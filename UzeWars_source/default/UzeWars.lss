
UzeWars.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000064ac  000065ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000064ac  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .objectstore  00000168  00800200  00800200  000065b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ramtiles     00000800  00800400  00800400  00006718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .vram         00000380  00800c00  00800c00  00006f18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .trigtable    00000040  00800f80  00800f80  00007298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f5  00800108  00800108  000065b0  2**3
                  ALLOC
  7 .debug_aranges 00000400  00000000  00000000  000072d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000008f5  00000000  00000000  000076d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003559  00000000  00000000  00007fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000962  00000000  00000000  0000b526  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000300c  00000000  00000000  0000be88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005a0  00000000  00000000  0000ee94  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000eb4  00000000  00000000  0000f434  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000021c6  00000000  00000000  000102e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000430  00000000  00000000  000124b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__ctors_end>
		tracks[t].slideSpeed=0x10;
	}

}

void StartSong(const char *midiSong){
       4:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>

OutStringXYProgmemFastC(12,13,strptr(str_GameOver));

while (ReadJoypad(0) == 0);

}
       8:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
       c:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      10:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      14:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      18:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      1c:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      20:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      24:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      28:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      2c:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      30:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      34:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__vector_13>
      38:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__vector_14>
      3c:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      40:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      44:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      48:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      4c:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      50:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      54:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      58:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      5c:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      60:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      64:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      68:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>
      6c:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	95 1c 98 1c a1 1c a6 1c af 1c b7 1c bc 1c c1 1c     ................
      ce:	c4 1c d6 1c d9 1c dc 1c 20 1d                       ........ .

000000d8 <playerShoot>:
      d8:	00 02 02 00 08 46 00 09 90 00 0a 60 00 00 f4 00     .....F.....`....
      e8:	04 02 02 03 08 01 04 02 01 04 02 01 04 02 01 04     ................
      f8:	02 01 04 02 01 04 02 01 04 02 01 04 02 01 04 02     ................
     108:	01 04 02 01 04 02 01 04 02 01 04 02 01 04 02 01     ................
     118:	05 00 00 ff                                         ....

0000011c <playerHit>:
     11c:	00 02 03 00 00 fc 00 08 28 01 04 05 01 04 04 01     ........(.......
     12c:	04 03 01 04 02 01 04 01 00 02 04 00 09 90 00 0a     ................
     13c:	60 02 04 01 02 04 01 02 04 01 02 04 01 02 04 01     `...............
     14c:	02 04 01 02 04 01 02 04 01 02 04 01 02 04 01 02     ................
     15c:	04 01 02 04 01 02 04 01 02 05 00 00 ff              .............

00000169 <monsterMoveA>:
     169:	00 02 01 00 08 4b 00 04 1a 01 03 03 01 03 03 01     .....K..........
     179:	03 03 01 04 10 01 05 00 00 ff                       ..........

00000183 <monsterMoveB>:
     183:	00 02 01 00 08 4b 00 04 1d 01 03 03 01 03 03 01     .....K..........
     193:	03 03 01 04 0d 01 05 00 00 ff                       ..........

0000019d <monsterHit>:
     19d:	00 02 03 00 00 f0 00 08 32 01 04 05 01 04 04 01     ........2.......
     1ad:	04 03 01 04 02 01 04 01 00 02 04 00 09 90 00 0a     ................
     1bd:	60 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     `...............
     1cd:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     1dd:	04 01 01 04 01 01 04 01 01 05 00 00 ff              .............

000001ea <ufoHovering>:
     1ea:	00 02 00 00 08 3c 00 03 02 02 04 02 02 03 02 02     .....<..........
     1fa:	03 02 02 03 02 02 04 02 02 04 02 02 04 02 02 03     ................
     20a:	02 02 03 02 02 03 02 02 04 02 02 04 02 02 04 02     ................
     21a:	02 03 02 02 03 02 02 03 02 02 04 02 02 04 02 02     ................
     22a:	04 02 02 03 02 02 03 02 02 03 02 02 04 02 02 04     ................
     23a:	02 02 04 02 02 03 02 02 03 02 02 03 02 02 04 02     ................
     24a:	02 04 02 02 04 02 02 03 02 02 03 02 02 03 02 02     ................
     25a:	04 02 02 04 02 02 04 02 02 03 02 02 03 02 02 03     ................
     26a:	02 02 04 02 02 04 02 02 04 02 02 03 02 02 03 02     ................
     27a:	02 03 02 02 04 02 02 04 02 02 04 02 02 03 02 02     ................
     28a:	03 02 02 03 02 02 04 02 02 04 02 02 04 02 02 03     ................
     29a:	02 02 03 02 02 03 02 02 04 02 02 04 02 02 04 02     ................
     2aa:	02 03 02 02 03 02 02 03 02 02 04 02 02 04 02 02     ................
     2ba:	04 02 02 03 02 02 03 02 02 03 02 02 04 02 02 04     ................
     2ca:	02 02 04 02 00 00 ff 02 03 02 02 03 02 02 03 02     ................
     2da:	02 04 02 02 04 02 02 04 02 02 03 02 02 03 02 02     ................
     2ea:	03 02 02 04 02 02 04 02 02 04 02 02 03 02 02 03     ................
     2fa:	02 02 03 02 02 04 02 02 04 02 02 04 02 02 03 02     ................
     30a:	02 03 02 02 03 02 02 04 02 02 04 02 02 04 02 02     ................
     31a:	03 02 02 03 02 02 03 02 02 04 02 02 04 02 02 04     ................
     32a:	02 02 03 02 02 03 02 02 03 02 02 04 02 02 04 02     ................
     33a:	02 04 02 02 03 02 02 03 02 02 03 02 02 04 02 02     ................
     34a:	04 02 02 04 02 02 03 02 02 03 02 02 03 02 02 04     ................
     35a:	02 02 04 02 02 04 02 02 03 02 02 03 02 02 03 02     ................
     36a:	02 04 02 02 04 02 02 04 02 02 03 02 02 03 02 02     ................
     37a:	03 02 02 04 02 02 04 02 02 04 02 02 03 02 02 03     ................
     38a:	02 02 03 02 02 04 02 02 04 02 02 04 02 02 03 02     ................
     39a:	02 03 02 02 03 02 02 04 02 02 04 02 02 04 02 00     ................
     3aa:	00 fc 02 03 02 02 03 02 02 04 02 02 04 02 02 03     ................
     3ba:	02 02 03 02 02 04 02 02 04 02 02 03 02 02 03 02     ................
     3ca:	02 04 02 02 04 02 02 03 02 02 03 02 02 04 02 02     ................
     3da:	04 02 02 03 02 02 03 02 02 04 02 02 04 02 02 03     ................
     3ea:	02 02 03 02 02 04 02 02 04 02 03 05 00 00 ff        ...............

000003f9 <patches>:
     3f9:	00 00 00 d8 00 00 00 00 00 00 00 00 1c 01 00 00     ................
     409:	00 00 00 00 00 69 01 00 00 00 00 00 00 00 83 01     .....i..........
     419:	00 00 00 00 00 00 00 9d 01 00 00 00 00 00 00 00     ................
     429:	ea 01 00 00 00 00                                   ......

0000042f <String01>:
     42f:	46 72 61 6d 65 20 52 61 74 65 3d 20 00 00           Frame Rate= ..

0000043d <String02>:
     43d:	46 72 65 65 20 54 69 6c 65 73 3d 20 00 00           Free Tiles= ..

0000044b <String03>:
     44b:	47 61 6d 65 20 4f 76 65 72 00 00                    Game Over..

00000456 <StringPointers>:
     456:	2f 04 3d 04 4b 04                                   /.=.K.

0000045c <CrawlText>:
     45c:	19 24 0b 19 23 0b 24 18 15 0b 0b 0b 29 15 11 22     .$..#.$.....).."
     46c:	0b 0f 19 1e 23 15 22 24 29 15 11 22 10 0c 0b 0b     ....#."$).."....
     47c:	12 1c 11 18 12 1c 11 18 0b 12 1c 11 18 0b 0b 0b     ................
     48c:	23 1f 1d 15 24 18 19 1e 17 0b 0b 0b 11 12 1f 25     #...$..........%
     49c:	24 0b 11 0b 0b 0b 0b 0b 23 13 19 15 1e 24 19 23     $.......#....$.#
     4ac:	24 0c 0b 0b 12 1c 11 18 0b 12 1c 11 0b 1f 1e 15     $...............
     4bc:	22 15 1d 11 19 1e 19 1e 17 0b 0b 0b 23 25 20 15     "...........#% .
     4cc:	22 0b 23 24 11 22 0b 0b 16 19 17 18 24 15 22 0b     ".#$."......$.".
     4dc:	11 26 22 0b 13 1c 11 23 23 0b 23 18 19 20 0c 0b     .&"....##.#.. ..
     4ec:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 12 1c 11 18     ................
     4fc:	0b 12 1c 11 18 0b 0b 0b 23 1f 1d 15 24 18 19 1e     ........#...$...
     50c:	17 0b 0b 0b 12 1c 11 18 0c 0b 0b 0b 0b 0b 0b 0b     ................
     51c:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 29 1f 25 0b     ............).%.
     52c:	11 22 15 0b 0b 0b 0b 0b 1d 11 1e 1b 19 1e 14 23     .".............#
     53c:	0b 0b 0b 0b 1c 11 23 24 0b 18 1f 20 15 0c 0b 0b     ......#$... ....

0000054c <Mode7LookupTable>:
     54c:	92 78 10 00 92 78 10 00 92 78 10 00 92 78 10 00     .x...x...x...x..
     55c:	92 78 10 00 92 78 10 00 92 78 10 00 92 78 10 00     .x...x...x...x..
     56c:	92 78 10 00 92 78 10 00 92 78 10 00 92 78 10 00     .x...x...x...x..
     57c:	92 78 11 00 92 78 11 00 92 78 11 00 92 78 11 00     .x...x...x...x..
     58c:	92 77 11 00 92 77 11 00 93 77 11 00 93 77 12 00     .w...w...w...w..
     59c:	93 77 12 00 93 77 12 00 93 77 12 00 93 77 12 00     .w...w...w...w..
     5ac:	93 77 13 00 93 77 13 00 93 76 13 00 93 76 13 00     .w...w...v...v..
     5bc:	93 76 14 00 93 76 14 00 93 76 14 00 93 76 14 00     .v...v...v...v..
     5cc:	94 76 15 00 94 75 15 00 94 75 15 00 94 75 16 00     .v...u...u...u..
     5dc:	94 75 16 00 94 75 16 00 94 75 17 00 94 74 17 00     .u...u...u...t..
     5ec:	94 74 17 00 95 74 18 00 95 74 18 00 95 74 19 00     .t...t...t...t..
     5fc:	95 73 19 00 95 73 1a 00 95 73 1a 00 95 73 1a 00     .s...s...s...s..
     60c:	96 73 1b 00 96 72 1b 00 96 72 1c 00 96 72 1c 00     .s...r...r...r..
     61c:	96 72 1d 00 96 71 1d 00 97 71 1e 00 97 71 1e 00     .r...q...q...q..
     62c:	97 71 1f 00 97 70 1f 00 97 70 20 00 97 70 21 00     .q...p...p ..p!.
     63c:	98 6f 21 00 98 6f 22 00 98 6f 22 00 98 6f 23 00     .o!..o"..o"..o#.
     64c:	98 6e 23 00 99 6e 24 00 99 6e 25 00 99 6d 25 00     .n#..n$..n%..m%.
     65c:	99 6d 26 00 99 6d 27 00 9a 6c 27 00 9a 6c 28 00     .m&..m'..l'..l(.
     66c:	9a 6c 29 00 9a 6b 29 00 9a 6b 2a 00 9b 6b 2b 00     .l)..k)..k*..k+.
     67c:	9b 6a 2c 00 9b 6a 2c 00 9b 69 2d 00 9c 69 2e 00     .j,..j,..i-..i..
     68c:	9c 69 2f 00 9c 68 2f 00 9c 68 30 00 9d 68 31 00     .i/..h/..h0..h1.
     69c:	9d 67 32 00 9d 67 33 00 9d 66 33 00 9e 66 34 00     .g2..g3..f3..f4.
     6ac:	9e 65 35 00 9e 65 36 00 9f 65 37 00 9f 64 38 00     .e5..e6..e7..d8.
     6bc:	9f 64 38 00 9f 63 39 00 a0 63 3a 00 a0 62 3b 00     .d8..c9..c:..b;.
     6cc:	a0 62 3c 00 a1 61 3d 00 a1 61 3e 00 a1 61 3f 00     .b<..a=..a>..a?.
     6dc:	a2 60 40 00 a2 60 41 00 a2 5f 42 00 a2 5f 43 00     .`@..`A.._B.._C.
     6ec:	a3 5e 44 00 a3 5e 45 00 a3 5d 46 00 a4 5d 47 00     .^D..^E..]F..]G.
     6fc:	a4 5c 48 00 a4 5c 49 00 a5 5b 4a 00 a5 5a 4b 00     .\H..\I..[J..ZK.
     70c:	a5 5a 4c 00 a6 59 4d 00 a6 59 4e 00 a6 58 4f 00     .ZL..YM..YN..XO.
     71c:	a7 58 50 00 a7 57 52 00 a8 57 53 00 a8 56 54 00     .XP..WR..WS..VT.
     72c:	a8 56 55 00 a9 55 56 00 a9 54 57 00 a9 54 58 00     .VU..UV..TW..TX.
     73c:	aa 53 5a 00 aa 53 5b 00 ab 52 5c 00 ab 51 5d 00     .SZ..S[..R\..Q].
     74c:	ab 51 5f 00 ac 50 60 00 ac 50 61 00 ad 4f 62 00     .Q_..P`..Pa..Ob.
     75c:	ad 4e 64 00 ad 4e 65 00 ae 4d 66 00 ae 4c 67 00     .Nd..Ne..Mf..Lg.
     76c:	af 4c 69 00 af 4b 6a 00 b0 4a 6b 00 b0 4a 6d 00     .Li..Kj..Jk..Jm.
     77c:	b0 49 6e 00 b1 48 6f 00 b1 48 71 00 b2 47 72 00     .In..Ho..Hq..Gr.
     78c:	b2 46 73 00 b3 46 75 00 b3 45 76 00 b3 44 78 00     .Fs..Fu..Ev..Dx.
     79c:	b4 43 79 00 b4 43 7a 00 b5 42 7c 00 b5 41 7d 00     .Cy..Cz..B|..A}.
     7ac:	b6 41 7f 00 b6 40 80 00 b7 3f 82 00 b7 3e 83 00     .A...@...?...>..
     7bc:	b8 3e 85 00 b8 3d 86 00 b9 3c 88 00 b9 3b 89 00     .>...=...<...;..
     7cc:	ba 3b 8b 00 ba 3a 8c 00 bb 39 8e 00 bb 38 8f 00     .;...:...9...8..
     7dc:	bc 37 91 00 bc 37 93 00 bd 36 94 00 bd 35 96 00     .7...7...6...5..
     7ec:	be 34 97 00 be 33 99 00 bf 33 9b 00 bf 32 9c 00     .4...3...3...2..
     7fc:	c0 31 9e 00 c0 30 a0 00 c1 2f a1 00 c1 2f a3 00     .1...0.../.../..
     80c:	c2 2e a5 00 c3 2d a6 00 c3 2c a8 00 c4 2b aa 00     .....-...,...+..
     81c:	c4 2a ab 00 c5 29 ad 00 c5 29 af 00 c6 28 b1 00     .*...)...)...(..
     82c:	c6 27 b2 00 c7 26 b4 00 c8 25 b6 00 c8 24 b8 00     .'...&...%...$..
     83c:	c9 23 ba 00 c9 22 bb 00 ca 21 bd 00 cb 20 bf 00     .#..."...!... ..
     84c:	cb 20 c1 00 cc 1f c3 00 cc 1e c5 00 cd 1d c6 00     . ..............
     85c:	ce 1c c8 00 ce 1b ca 00 cf 1a cc 00 cf 19 ce 00     ................
     86c:	d0 18 d0 00 d1 17 d2 00 d1 16 d4 00 d2 15 d6 00     ................
     87c:	d3 14 d8 00 d3 13 da 00 d4 12 dc 00 d4 11 de 00     ................
     88c:	d5 10 e0 00 d6 0f e2 00 d6 0e e4 00 d7 0d e6 00     ................
     89c:	d8 0c e8 00 d8 0b ea 00 d9 0a ec 00 da 09 ee 00     ................
     8ac:	da 08 f0 00 db 07 f2 00 dc 06 f4 00 dc 05 f6 00     ................
     8bc:	dd 04 f8 00 de 03 fa 00 de 02 fd 00 df 01 ff 00     ................

000008cc <Bin2AscTable>:
     8cc:	20 20 30 00 20 20 31 00 20 20 32 00 20 20 33 00       0.  1.  2.  3.
     8dc:	20 20 34 00 20 20 35 00 20 20 36 00 20 20 37 00       4.  5.  6.  7.
     8ec:	20 20 38 00 20 20 39 00 20 31 30 00 20 31 31 00       8.  9. 10. 11.
     8fc:	20 31 32 00 20 31 33 00 20 31 34 00 20 31 35 00      12. 13. 14. 15.
     90c:	20 31 36 00 20 31 37 00 20 31 38 00 20 31 39 00      16. 17. 18. 19.
     91c:	20 32 30 00 20 32 31 00 20 32 32 00 20 32 33 00      20. 21. 22. 23.
     92c:	20 32 34 00 20 32 35 00 20 32 36 00 20 32 37 00      24. 25. 26. 27.
     93c:	20 32 38 00 20 32 39 00 20 33 30 00 20 33 31 00      28. 29. 30. 31.
     94c:	20 33 32 00 20 33 33 00 20 33 34 00 20 33 35 00      32. 33. 34. 35.
     95c:	20 33 36 00 20 33 37 00 20 33 38 00 20 33 39 00      36. 37. 38. 39.
     96c:	20 34 30 00 20 34 31 00 20 34 32 00 20 34 33 00      40. 41. 42. 43.
     97c:	20 34 34 00 20 34 35 00 20 34 36 00 20 34 37 00      44. 45. 46. 47.
     98c:	20 34 38 00 20 34 39 00 20 35 30 00 20 35 31 00      48. 49. 50. 51.
     99c:	20 35 32 00 20 35 33 00 20 35 34 00 20 35 35 00      52. 53. 54. 55.
     9ac:	20 35 36 00 20 35 37 00 20 35 38 00 20 35 39 00      56. 57. 58. 59.
     9bc:	20 36 30 00 20 36 31 00 20 36 32 00 20 36 33 00      60. 61. 62. 63.
     9cc:	20 36 34 00 20 36 35 00 20 36 36 00 20 36 37 00      64. 65. 66. 67.
     9dc:	20 36 38 00 20 36 39 00 20 37 30 00 20 37 31 00      68. 69. 70. 71.
     9ec:	20 37 32 00 20 37 33 00 20 37 34 00 20 37 35 00      72. 73. 74. 75.
     9fc:	20 37 36 00 20 37 37 00 20 37 38 00 20 37 39 00      76. 77. 78. 79.
     a0c:	20 38 30 00 20 38 31 00 20 38 32 00 20 38 33 00      80. 81. 82. 83.
     a1c:	20 38 34 00 20 38 35 00 20 38 36 00 20 38 37 00      84. 85. 86. 87.
     a2c:	20 38 38 00 20 38 39 00 20 39 30 00 20 39 31 00      88. 89. 90. 91.
     a3c:	20 39 32 00 20 39 33 00 20 39 34 00 20 39 35 00      92. 93. 94. 95.
     a4c:	20 39 36 00 20 39 37 00 20 39 38 00 20 39 39 00      96. 97. 98. 99.
     a5c:	31 30 30 00 31 30 31 00 31 30 32 00 31 30 33 00     100.101.102.103.
     a6c:	31 30 34 00 31 30 35 00 31 30 36 00 31 30 37 00     104.105.106.107.
     a7c:	31 30 38 00 31 30 39 00 31 31 30 00 31 31 31 00     108.109.110.111.
     a8c:	31 31 32 00 31 31 33 00 31 31 34 00 31 31 35 00     112.113.114.115.
     a9c:	31 31 36 00 31 31 37 00 31 31 38 00 31 31 39 00     116.117.118.119.
     aac:	31 32 30 00 31 32 31 00 31 32 32 00 31 32 33 00     120.121.122.123.
     abc:	31 32 34 00 31 32 35 00 31 32 36 00 31 32 37 00     124.125.126.127.
     acc:	31 32 38 00 31 32 39 00 31 33 30 00 31 33 31 00     128.129.130.131.
     adc:	31 33 32 00 31 33 33 00 31 33 34 00 31 33 35 00     132.133.134.135.
     aec:	31 33 36 00 31 33 37 00 31 33 38 00 31 33 39 00     136.137.138.139.
     afc:	31 34 30 00 31 34 31 00 31 34 32 00 31 34 33 00     140.141.142.143.
     b0c:	31 34 34 00 31 34 35 00 31 34 36 00 31 34 37 00     144.145.146.147.
     b1c:	31 34 38 00 31 34 39 00 31 35 30 00 31 35 31 00     148.149.150.151.
     b2c:	31 35 32 00 31 35 33 00 31 35 34 00 31 35 35 00     152.153.154.155.
     b3c:	31 35 36 00 31 35 37 00 31 35 38 00 31 35 39 00     156.157.158.159.
     b4c:	31 36 30 00 31 36 31 00 31 36 32 00 31 36 33 00     160.161.162.163.
     b5c:	31 36 34 00 31 36 35 00 31 36 36 00 31 36 37 00     164.165.166.167.
     b6c:	31 36 38 00 31 36 39 00 31 37 30 00 31 37 31 00     168.169.170.171.
     b7c:	31 37 32 00 31 37 33 00 31 37 34 00 31 37 35 00     172.173.174.175.
     b8c:	31 37 36 00 31 37 37 00 31 37 38 00 31 37 39 00     176.177.178.179.
     b9c:	31 38 30 00 31 38 31 00 31 38 32 00 31 38 33 00     180.181.182.183.
     bac:	31 38 34 00 31 38 35 00 31 38 36 00 31 38 37 00     184.185.186.187.
     bbc:	31 38 38 00 31 38 39 00 31 39 30 00 31 39 31 00     188.189.190.191.
     bcc:	31 39 32 00 31 39 33 00 31 39 34 00 31 39 35 00     192.193.194.195.
     bdc:	31 39 36 00 31 39 37 00 31 39 38 00 31 39 39 00     196.197.198.199.
     bec:	32 30 30 00 32 30 31 00 32 30 32 00 32 30 33 00     200.201.202.203.
     bfc:	32 30 34 00 32 30 35 00 32 30 36 00 32 30 37 00     204.205.206.207.
     c0c:	32 30 38 00 32 30 39 00 32 31 30 00 32 31 31 00     208.209.210.211.
     c1c:	32 31 32 00 32 31 33 00 32 31 34 00 32 31 35 00     212.213.214.215.
     c2c:	32 31 36 00 32 31 37 00 32 31 38 00 32 31 39 00     216.217.218.219.
     c3c:	32 32 30 00 32 32 31 00 32 32 32 00 32 32 33 00     220.221.222.223.
     c4c:	32 32 34 00 32 32 35 00 32 32 36 00 32 32 37 00     224.225.226.227.
     c5c:	32 32 38 00 32 32 39 00 32 33 30 00 32 33 31 00     228.229.230.231.
     c6c:	32 33 32 00 32 33 33 00 32 33 34 00 32 33 35 00     232.233.234.235.
     c7c:	32 33 36 00 32 33 37 00 32 33 38 00 32 33 39 00     236.237.238.239.
     c8c:	32 34 30 00 32 34 31 00 32 34 32 00 32 34 33 00     240.241.242.243.
     c9c:	32 34 34 00 32 34 35 00 32 34 36 00 32 34 37 00     244.245.246.247.
     cac:	32 34 38 00 32 34 39 00 32 35 30 00 32 35 31 00     248.249.250.251.
     cbc:	32 35 32 00 32 35 33 00 32 35 34 00 32 35 35 00     252.253.254.255.

00000ccc <FontTable>:
     ccc:	04 0a 04 00 00 00 00 00 00 00 00 1f 10 10 10 10     ................
     cdc:	00 00 00 f0 10 10 10 10 10 10 10 f0 00 00 00 00     ................
     cec:	10 10 10 1f 00 00 00 00 10 10 10 10 10 10 10 10     ................
     cfc:	00 00 00 ff 00 00 00 00 10 10 10 ff 10 10 10 10     ................
     d0c:	10 10 10 1f 10 10 10 10 00 00 00 ff 10 10 10 10     ................
     d1c:	10 10 10 f0 10 10 10 10 10 10 10 ff 00 00 00 00     ................
     d2c:	92 00 49 00 92 00 49 00 aa 55 aa 55 aa 55 aa 55     ..I...I..U.U.U.U
     d3c:	6d ff b6 ff 6d ff b6 ff ff ff ff ff ff ff ff ff     m...m...........
     d4c:	00 12 24 48 24 12 00 00 00 48 24 12 24 48 00 00     ..$H$....H$.$H..
     d5c:	00 1c 22 22 22 14 36 00 3e 22 10 08 10 22 3e 00     ..""".6.>"...">.
     d6c:	00 3e 54 14 14 14 14 00 00 00 6c 92 92 6c 00 00     .>T.......l..l..
     d7c:	18 04 08 1c 00 00 00 00 18 14 14 14 00 00 00 00     ................
     d8c:	00 00 18 0c 0a 89 70 00 00 00 00 38 16 09 f0 00     ......p....8....
     d9c:	00 00 00 00 f0 28 c7 00 00 00 00 00 81 62 1c 00     .....(.......b..
     dac:	00 00 00 06 05 c4 38 00 00 00 00 00 00 00 00 00     ......8.........
	...
     dd4:	0c 0c 0c 08 08 00 08 00 14 14 00 00 00 00 00 00     ................
     de4:	00 00 14 3e 14 3e 14 00 08 1e 20 1c 02 3c 08 00     ...>.>.... ..<..
     df4:	20 52 24 18 64 0a 04 00 00 0c 10 10 2a 24 1a 00      R$.d.......*$..
     e04:	08 08 00 00 00 00 00 00 04 08 08 08 08 08 04 00     ................
     e14:	10 08 08 08 08 08 10 00 00 08 08 3e 08 14 14 00     ...........>....
     e24:	00 08 08 3e 08 08 00 00 00 00 00 00 00 18 18 08     ...>............
     e34:	00 00 00 3e 00 00 00 00 00 00 00 00 00 18 18 00     ...>............
     e44:	20 20 10 10 08 08 04 04 3e 22 22 22 22 22 3e 00       ......>""""">.
     e54:	08 08 08 08 08 08 08 00 3e 02 02 3e 20 20 3e 00     ........>..>  >.
     e64:	3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00     >..>..>.""">....
     e74:	3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00     >  >..>.>  >"">.
     e84:	3e 02 02 02 02 02 02 00 3e 22 22 3e 22 22 3e 00     >.......>"">"">.
     e94:	3e 22 22 3e 02 02 02 00 00 00 18 18 00 18 18 00     >"">............
     ea4:	00 00 18 18 00 18 18 08 04 08 10 20 10 08 04 00     ........... ....
     eb4:	00 00 3e 00 3e 00 00 00 20 10 08 04 08 10 20 00     ..>.>... ..... .
     ec4:	1c 22 02 04 08 00 08 00 18 24 2c 34 28 20 1c 00     .".......$,4( ..
     ed4:	1c 22 22 3e 22 22 22 00 3c 22 22 3c 22 22 3c 00     ."">""".<""<""<.
     ee4:	1e 20 20 20 20 20 1e 00 3c 22 22 22 22 22 3c 00     .     ..<"""""<.
     ef4:	3e 20 20 38 20 20 3e 00 3e 20 20 38 20 20 20 00     >  8  >.>  8   .
     f04:	3e 20 20 26 22 22 3e 00 22 22 22 3e 22 22 22 00     >  &"">.""">""".
     f14:	1c 08 08 08 08 08 1c 00 1e 04 04 04 04 24 18 00     .............$..
     f24:	22 24 28 30 28 24 22 00 20 20 20 20 20 20 3e 00     "$(0($".      >.
     f34:	22 36 2a 22 22 22 22 00 22 22 32 2a 26 22 22 00     "6*"""".""2*&"".
     f44:	3e 22 22 22 22 22 3e 00 3c 22 22 3c 20 20 20 00     >""""">.<""<   .
     f54:	3e 22 22 22 2a 24 3a 00 3c 22 22 3c 24 22 22 00     >"""*$:.<""<$"".
     f64:	1c 22 20 1c 02 22 1c 00 3e 08 08 08 08 08 08 00     ." .."..>.......
     f74:	22 22 22 22 22 22 1c 00 22 22 22 22 22 14 08 00     """""".."""""...
     f84:	22 22 22 22 2a 36 22 00 22 22 14 08 14 22 22 00     """"*6".""..."".
     f94:	22 22 14 08 08 08 08 00 3e 02 04 08 10 20 3e 00     ""......>.... >.
     fa4:	18 10 10 10 10 10 18 00 04 04 08 08 10 10 20 20     ..............  
     fb4:	18 08 08 08 08 08 18 00 00 00 00 00 00 00 7f 00     ................
     fc4:	08 14 22 00 00 00 00 00 10 08 00 00 00 00 00 00     ..".............
     fd4:	00 00 18 24 1c 24 1a 00 00 20 20 38 24 24 38 00     ...$.$...  8$$8.
     fe4:	00 00 1c 20 20 20 1c 00 00 04 04 1c 24 24 1c 00     ...   ......$$..
     ff4:	00 00 18 24 3c 20 1c 00 00 0c 10 38 10 10 10 00     ...$< .....8....
    1004:	00 00 18 24 24 1c 04 18 00 20 20 38 24 24 24 00     ...$$....  8$$$.
    1014:	00 08 00 08 08 08 08 00 00 04 00 04 04 04 04 18     ................
    1024:	00 20 24 28 30 28 24 00 00 08 08 08 08 08 08 00     . $(0($.........
    1034:	00 00 14 2a 2a 2a 2a 00 00 00 18 24 24 24 24 00     ...****....$$$$.
    1044:	00 00 18 24 24 24 18 00 00 00 38 24 24 38 20 20     ...$$$....8$$8  
    1054:	00 00 1c 24 24 1c 04 04 00 00 0c 10 10 10 10 00     ...$$...........
    1064:	00 00 1c 20 18 04 38 00 00 08 1c 08 08 08 08 00     ... ..8.........
    1074:	00 00 24 24 24 24 18 00 00 00 24 24 28 30 20 00     ..$$$$....$$(0 .
    1084:	00 00 22 2a 2a 2a 14 00 00 00 44 28 10 28 44 00     .."***....D(.(D.
    1094:	00 00 24 24 24 1c 04 18 00 00 3c 08 10 20 3c 00     ..$$$.....<.. <.
    10a4:	08 10 10 20 10 10 08 00 08 08 08 00 08 08 08 00     ... ............
    10b4:	10 08 08 04 08 08 10 00 32 4c 00 00 00 00 00 00     ........2L......
    10c4:	e0 98 87 42 44 28 30 20                             ...BD(0 

000010cc <VectFont>:
    10cc:	ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    10ec:	06 00 12 00 12 12 06 12 06 00 ff 00 00 00 00 00     ................
	...
    110c:	0c 00 0c 12 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    112c:	06 00 12 00 12 09 06 09 06 12 12 12 ff 00 00 00     ................
	...
    114c:	06 00 12 00 12 09 12 12 06 12 fe 00 12 09 06 09     ................
    115c:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    116c:	06 00 06 09 12 09 fe 00 12 00 12 12 ff 00 00 00     ................
	...
    118c:	12 00 06 00 06 09 12 09 12 12 06 12 ff 00 00 00     ................
	...
    11ac:	12 00 06 00 06 12 12 12 12 09 06 09 ff 00 00 00     ................
	...
    11cc:	06 00 12 00 12 12 ff 00 00 00 00 00 00 00 00 00     ................
	...
    11ec:	06 00 12 00 12 12 06 12 06 00 fe 00 06 09 12 09     ................
    11fc:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    120c:	12 12 12 00 06 00 06 09 12 09 ff 00 00 00 00 00     ................
	...
    122c:	ff 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    124c:	09 12 0c 12 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    126c:	09 12 0c 12 0c 15 ff 00 00 00 00 00 00 00 00 00     ................
	...
    128c:	06 09 0f 09 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12ac:	0f 00 06 09 0f 12 ff 00 00 00 00 00 00 00 00 00     ................
	...
    12cc:	06 00 0f 09 06 12 ff 00 00 00 00 00 00 00 00 00     ................
	...
    12ec:	06 12 06 03 09 00 0f 00 12 03 12 12 fe 00 06 09     ................
    12fc:	12 09 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    130c:	06 12 06 00 0f 00 12 03 12 06 0f 09 12 0c 12 0f     ................
    131c:	0f 12 06 12 fe 00 06 09 0f 09 ff 00 00 00 00 00     ................
    132c:	12 00 09 00 06 03 06 0f 09 12 12 12 ff 00 00 00     ................
	...
    134c:	06 00 06 12 0f 12 12 0f 12 03 0f 00 06 00 ff 00     ................
	...
    136c:	12 00 06 00 06 12 12 12 fe 00 0c 09 06 09 ff 00     ................
	...
    138c:	12 00 06 00 06 12 fe 00 0c 09 06 09 ff 00 00 00     ................
	...
    13ac:	12 00 06 00 06 12 12 12 12 09 0f 09 ff 00 00 00     ................
	...
    13cc:	06 00 06 12 fe 00 12 00 12 12 fe 00 06 09 12 09     ................
    13dc:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13ec:	0c 00 0c 12 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    140c:	09 00 12 00 fe 00 06 0f 09 12 0c 12 0f 0f 0f 00     ................
    141c:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    142c:	06 00 06 12 fe 00 12 12 06 09 12 00 ff 00 00 00     ................
	...
    144c:	06 00 06 12 12 12 ff 00 00 00 00 00 00 00 00 00     ................
	...
    146c:	06 12 06 00 0c 06 12 00 12 12 ff 00 00 00 00 00     ................
	...
    148c:	06 12 06 00 12 12 12 00 ff 00 00 00 00 00 00 00     ................
	...
    14ac:	06 00 12 00 12 12 06 12 06 00 ff 00 00 00 00 00     ................
	...
    14cc:	06 12 06 00 0f 00 12 03 12 06 0f 09 06 09 ff 00     ................
	...
    14ec:	06 00 12 00 12 0c 0c 12 06 12 06 00 fe 00 0c 0c     ................
    14fc:	12 12 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    150c:	06 12 06 00 0f 00 12 03 12 06 0f 09 06 09 fe 00     ................
    151c:	12 12 0f 09 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    152c:	12 03 0f 00 09 00 06 03 06 06 09 09 0f 09 12 0c     ................
    153c:	12 0f 0f 12 09 12 06 0f ff 00 00 00 00 00 00 00     ................
    154c:	06 00 12 00 fe 00 0c 12 0c 00 ff 00 00 00 00 00     ................
	...
    156c:	06 00 06 0f 09 12 0f 12 12 0f 12 00 ff 00 00 00     ................
	...
    158c:	06 00 06 0c 0c 12 12 0c 12 00 ff 00 00 00 00 00     ................
	...
    15ac:	06 00 06 12 0c 0c 12 12 12 00 ff 00 00 00 00 00     ................
	...
    15cc:	06 00 12 12 fe 00 12 00 06 12 ff 00 00 00 00 00     ................
	...
    15ec:	06 00 0c 09 0c 12 fe 00 0c 09 12 00 ff 00 00 00     ................
	...
    160c:	06 00 12 00 06 12 12 12 ff 00 00 00 00 00 00 00     ................
	...

0000162c <PolarObjects>:
    162c:	00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    164c:	0e 00 0e 6c 09 80 0e 94 0e 00 ff 00 00 00 00 00     ...l............
	...
    166c:	40 00 40 14 40 27 40 3b 40 4e 40 62 40 76 40 89     @.@.@'@;@N@b@v@.
    167c:	40 9d 40 b1 40 c4 40 d8 40 eb 40 00 ff 00 00 00     @.@.@.@.@.@.....
    168c:	0c 00 64 fe ff 00 00 00 00 00 00 00 00 00 00 00     ..d.............
	...
    16ac:	20 32 49 0e 43 fe 0a 00 20 32 ff 00 00 00 00 00      2I.C... 2......
	...
    16cc:	2e 3f 2e 30 2e 1e 2e 10 2e 03 2e f0 2e da 2e be     .?.0............
    16dc:	2e aa 2e 9b 2e 8b 2e 79 2e 68 2e 5a 2e 3f ff 00     .......y.h.Z.?..
    16ec:	32 5a 4c 2a 0f 22 26 14 24 0d 27 94 28 43 2d 5e     2ZL*."&.$.'.(C-^
    16fc:	32 5a ff 00 00 00 00 00 00 00 00 00 00 00 00 00     2Z..............
    170c:	36 50 1e 7e 14 fa 39 2b 35 32 11 26 15 61 32 46     6P.~..9+52.&.a2F
    171c:	36 50 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     6P..............
    172c:	14 fd 1e 80 35 4f 38 28 30 26 2a 4c 21 52 1e 32     ....5O8(0&*L!R.2
    173c:	16 30 1a 5b 15 6b 17 0e 14 00 ff 00 00 00 00 00     .0.[.k..........
    174c:	1e 80 35 4f 32 49 15 6b 0e 60 1a 49 19 3b 0a 44     ..5O2I.k.`.I.;.D
    175c:	0e 20 36 30 39 2a 14 fd 1e 80 ff 00 00 00 00 00     . 609*..........
    176c:	0e 00 0e 6c ff 00 00 00 00 00 00 00 00 00 00 00     ...l............
	...
    178c:	0e 6c 09 80 ff 00 00 00 00 00 00 00 00 00 00 00     .l..............
	...
    17ac:	09 80 0e 94 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    17cc:	0e 94 0e 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    17f0:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    180c:	0e 00 0e 6c 09 80 0e 94 0e 00 fe 00 1e 00 1e 40     ...l...........@
    181c:	1e 80 1e c0 1e 00 ff 00 00 00 00 00 00 00 00 00     ................
    182c:	38 28 35 4f 1e 80 14 80 19 5a 14 4a 1b 46 1b 3a     8(5O.....Z.J.F.:
    183c:	14 39 18 27 0a 00 14 00 38 28 ff 00 00 00 00 00     .9.'....8(......
    184c:	06 00 11 00 19 20 13 33 06 00 ff 00 00 00 00 00     ..... .3........
	...
    186c:	0c 00 15 27 ff 00 00 00 00 00 00 00 00 00 00 00     ...'............
	...
    188c:	13 33 19 20 13 14 0b 28 06 00 11 00 ff 00 00 00     .3. ...(........
	...
    18ac:	13 33 18 20 13 14 0b 28 13 14 11 00 06 00 ff 00     .3. ...(........
	...
    18cc:	13 33 0a 26 12 10 19 20 11 00 ff 00 00 00 00 00     .3.&... ........
	...
    18ec:	19 20 13 33 0b 28 13 12 11 00 06 00 ff 00 00 00     . .3.(..........
	...
    190c:	19 20 13 33 0b 28 13 12 11 00 06 00 0b 28 ff 00     . .3.(.......(..
	...
    192c:	13 33 19 20 11 00 ff 00 00 00 00 00 00 00 00 00     .3. ............
	...
    194c:	06 00 11 00 19 20 13 33 06 00 0b 28 13 14 ff 00     ..... .3...(....
	...
    196c:	13 14 0b 28 13 33 19 20 11 00 ff 00 00 00 00 00     ...(.3. ........
	...
    198c:	ff 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    19ac:	09 12 0c 12 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    19cc:	09 12 0c 12 0c 15 ff 00 00 00 00 00 00 00 00 00     ................
	...
    19ec:	06 09 0f 09 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a0c:	0f 00 06 09 0f 12 ff 00 00 00 00 00 00 00 00 00     ................
	...
    1a2c:	06 00 0f 09 06 12 ff 00 00 00 00 00 00 00 00 00     ................
	...
    1a4c:	05 00 10 33 16 2d 19 26 19 1a 14 00 17 15 0c 2f     ...3.-.&......./
    1a5c:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1a6c:	05 00 15 36 1a 23 1b 1e 18 17 14 15 0c 2f 14 15     ...6.#......./..
    1a7c:	16 11 14 06 11 00 05 00 ff 00 00 00 00 00 00 00     ................
    1a8c:	1b 1e 1a 23 15 32 13 34 06 16 07 00 11 00 14 06     ...#.2.4........
    1a9c:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1aac:	15 36 19 26 19 1a 15 0a 0f 00 05 00 15 36 ff 00     .6.&.........6..
	...
    1acc:	1c 20 15 36 0b 2d 11 16 0b 2d 05 00 14 00 ff 00     . .6.-...-......
	...
    1aec:	1c 20 15 36 0b 2d 11 16 0b 2d 05 00 ff 00 00 00     . .6.-...-......
	...
    1b0c:	19 1a 19 26 15 36 05 00 0f 00 15 0a 16 13 0e 20     ...&.6......... 
    1b1c:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b2c:	15 36 05 00 0b 2d 15 12 1c 20 13 00 ff 00 00 00     .6...-... ......
	...
    1b4c:	0c 00 18 28 ff 00 00 00 00 00 00 00 00 00 00 00     ...(............
	...
    1b6c:	15 32 1a 23 17 2a 0c 0a 0a 00 07 00 06 16 ff 00     .2.#.*..........
	...
    1b8c:	15 36 05 00 0b 2d 0e 20 14 00 0e 20 1c 20 ff 00     .6...-. ... . ..
	...
    1bac:	15 36 05 00 14 00 ff 00 00 00 00 00 00 00 00 00     .6..............
	...
    1bcc:	05 00 15 36 11 1c 1c 20 14 00 ff 00 00 00 00 00     ...6... ........
	...
    1bec:	05 00 15 36 14 00 1d 1f ff 00 00 00 00 00 00 00     ...6............
	...
    1c0c:	05 00 05 00 15 36 1c 20 13 00 05 00 ff 00 00 00     .....6. ........
	...
    1c2c:	05 00 15 36 1a 23 1b 1e 18 17 14 15 0b 2d ff 00     ...6.#.......-..
	...
    1c4c:	14 00 10 0d 13 0f 16 13 19 1a 19 20 19 26 16 2d     ........... .&.-
    1c5c:	13 33 10 33 0b 2d 0a 20 0b 13 10 0d 0f 14 ff 00     .3.3.-. ........
    1c6c:	05 00 15 36 1a 23 1b 1e 18 17 14 15 0b 2d 0f 1e     ...6.#.......-..
    1c7c:	13 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c8c:	1c 20 15 32 13 34 0e 31 0c 27 14 15 16 10 14 06     . .2.4.1.'......
    1c9c:	11 00 05 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    1cac:	15 34 1a 21 16 29 0c 00 ff 00 00 00 00 00 00 00     .4.!.)..........
	...
    1ccc:	15 36 06 16 07 00 12 00 14 06 1d 1f ff 00 00 00     .6..............
	...
    1cec:	15 36 0c 00 1c 20 ff 00 00 00 00 00 00 00 00 00     .6... ..........
	...
    1d0c:	15 36 0a 00 0e 15 0f 00 1c 20 ff 00 00 00 00 00     .6....... ......
	...
    1d2c:	15 36 14 00 10 1e 05 00 10 1e 1c 20 ff 00 00 00     .6......... ....
	...
    1d4c:	15 36 12 21 1c 21 12 21 0c 00 ff 00 00 00 00 00     .6.!.!.!........
	...
    1d6c:	15 36 1c 20 05 00 14 00 ff 00 00 00 00 00 00 00     .6. ............
	...
    1d8c:	35 2c 35 4f 1e 80 14 80 19 5a 16 26 0a 00 14 00     5,5O.....Z.&....
    1d9c:	21 20 22 26 26 24 34 26 35 2c ff 00 00 00 00 00     ! "&&$4&5,......
    1dac:	36 2b 35 4e 1e 63 15 2b 0d 24 1a 6f 1b 80 13 fd     6+5N.c.+.$.o....
    1dbc:	24 26 20 4d 29 49 2e 29 36 2b ff 00 00 00 00 00     $& M)I.)6+......
    1dcc:	0e 00 0e 6c 09 80 0e 94 0e 00 ff 00 00 00 00 00     ...l............
	...
    1dec:	07 e7 07 18 06 60 06 a0 07 e7 04 c9 0a c4 0e df     .....`..........
    1dfc:	0e a0 0a c4 0a 3c 0e 20 0e 60 ff 00 00 00 00 00     .....<. .`......
    1e0c:	13 0f 15 63 15 9d 13 f0 08 d5 08 2b 13 0f ff 00     ...c.......+....
	...
    1e2c:	05 f8 05 10 06 6a 09 4f 0e 31 0f 57 0d 76 10 78     .....j.O.1.W.v.x
    1e3c:	10 87 0d 89 0f a9 0e ce 09 b1 06 96 05 f8 ff 00     ................
    1e4c:	06 f9 06 06 0f 78 0f 87 06 f9 0f 87 0f 78 14 5d     .....x.......x.]
    1e5c:	0f 43 11 56 12 a7 10 bd 12 a7 15 a0 0f 87 ff 00     .C.V............

00001e6c <StatusPositionTable>:
    1e6c:	00 02 03 04 05 20 22 23 40 42 43                    ..... "#@BC

00001e77 <SinCosTable>:
    1e77:	00 03 06 09 0c 10 13 16 19 1c 1f 22 25 28 2b 2e     ..........."%(+.
    1e87:	31 34 36 39 3c 3f 42 44 47 49 4c 4e 51 53 56 58     1469<?BDGILNQSVX
    1e97:	5a 5c 5e 60 62 64 66 68 6a 6c 6d 6f 70 72 73 74     Z\^`bdfhjlmoprst
    1ea7:	76 77 78 79 7a 7b 7b 7c 7d 7d 7e 7e 7e 7f 7f 7f     vwxyz{{|}}~~~...
    1eb7:	7f 7f 7f 7f 7e 7e 7d 7d 7c 7c 7b 7a 79 78 77 76     ....~~}}||{zyxwv
    1ec7:	75 74 72 71 70 6e 6c 6b 69 67 65 63 61 5f 5d 5b     utrqpnlkigeca_][
    1ed7:	59 57 54 52 50 4d 4b 48 45 43 40 3d 3b 38 35 32     YWTRPMKHEC@=;852
    1ee7:	2f 2c 29 27 24 20 1d 1a 17 14 11 0e 0b 08 05 02     /,)'$ ..........
    1ef7:	fe fb f8 f5 f2 ef ec e9 e6 e3 e0 dc d9 d7 d4 d1     ................
    1f07:	ce cb c8 c5 c3 c0 bd bb b8 b5 b3 b0 ae ac a9 a7     ................
    1f17:	a5 a3 a1 9f 9d 9b 99 97 95 94 92 90 8f 8e 8c 8b     ................
    1f27:	8a 89 88 87 86 85 84 84 83 83 82 82 81 81 81 81     ................
    1f37:	81 81 81 82 82 82 83 83 84 85 85 86 87 88 89 8a     ................
    1f47:	8c 8d 8e 90 91 93 94 96 98 9a 9c 9e a0 a2 a4 a6     ................
    1f57:	a8 aa ad af b2 b4 b7 b9 bc be c1 c4 c7 ca cc cf     ................
    1f67:	d2 d5 d8 db de e1 e4 e7 ea ed f0 f4 f7 fa fd 00     ................

00001f77 <MessageText>:
    1f77:	fc 00 fe 14 c8 30 32 25 33 33 1b 33 34 21 32 34     .....02%33.34!24
    1f87:	ff fe 03 0c 4c 45 46 54 2f 52 49 47 48 54 20 3d     ....LEFT/RIGHT =
    1f97:	20 53 50 49 4e 20 53 48 49 50 fe 03 0d 42 20 6f      SPIN SHIP...B o
    1fa7:	72 20 55 50 20 20 20 20 3d 20 54 48 52 55 53 54     r UP    = THRUST
    1fb7:	fe 03 0e 41 20 20 20 20 20 20 20 20 20 20 3d 20     ...A          = 
    1fc7:	53 48 4f 4f 54 fe 03 10 53 48 4f 4f 54 20 54 48     SHOOT...SHOOT TH
    1fd7:	45 20 41 53 54 45 52 4f 49 44 53 fe 03 11 59 4f     E ASTEROIDS...YO
    1fe7:	55 52 20 50 4c 41 4e 45 54 20 49 53 20 44 45 50     UR PLANET IS DEP
    1ff7:	45 4e 44 49 4e 47 fe 03 12 4f 4e 20 59 4f 55 21     ENDING...ON YOU!
    2007:	ff fc 00 fe 03 0a 4c 45 56 45 4c 20 32 fe 03 0c     ......LEVEL 2...
    2017:	4c 45 46 54 2f 52 49 47 48 54 20 3d 20 4d 4f 56     LEFT/RIGHT = MOV
    2027:	45 20 53 48 49 50 fe 03 0d 41 20 20 20 20 20 20     E SHIP...A      
    2037:	20 20 20 20 3d 20 53 48 4f 4f 54 fe 03 10 59 4f         = SHOOT...YO
    2047:	55 20 4d 55 53 54 20 46 4c 59 20 42 41 43 4b 20     U MUST FLY BACK 
    2057:	54 4f 20 45 41 52 54 48 fe 03 12 53 48 4f 4f 54     TO EARTH...SHOOT
    2067:	20 52 4f 43 4b 53 20 46 4f 52 20 50 4f 49 4e 54      ROCKS FOR POINT
    2077:	53 ff fc 00 fe 03 0a 4c 45 56 45 4c 20 33 fe 03     S......LEVEL 3..
    2087:	0c 4c 45 46 54 2f 52 49 47 48 54 20 3d 20 53 50     .LEFT/RIGHT = SP
    2097:	49 4e 20 53 48 49 50 fe 03 0d 42 20 6f 72 20 55     IN SHIP...B or U
    20a7:	50 20 20 20 20 3d 20 54 48 52 55 53 54 fe 03 10     P    = THRUST...
    20b7:	59 4f 55 20 4d 55 53 54 20 46 4c 59 20 54 4f 20     YOU MUST FLY TO 
    20c7:	42 41 53 45 20 41 4e 44 fe 03 11 43 4f 4c 4c 45     BASE AND...COLLE
    20d7:	43 54 20 41 4e 54 49 20 41 53 54 45 52 4f 49 44     CT ANTI ASTEROID
    20e7:	20 fe 03 12 4d 49 53 53 49 4c 45 20 46 52 4f 4d      ...MISSILE FROM
    20f7:	20 53 43 49 45 4e 54 49 53 54 2e 20 20 fe 03 14      SCIENTIST.  ...
    2107:	4f 4e 43 45 20 43 4f 4c 4c 45 43 54 20 46 4c 59     ONCE COLLECT FLY
    2117:	20 42 41 43 4b 20 54 4f fe 03 15 53 50 41 43 45      BACK TO...SPACE
    2127:	fe 03 17 42 45 57 41 52 45 20 47 52 41 56 49 54     ...BEWARE GRAVIT
    2137:	59 ff fc 00 fe 03 0a 4c 45 56 45 4c 20 34 fe 03     Y......LEVEL 4..
    2147:	0c 55 2f 44 2f 4c 2f 52 20 20 20 20 3d 20 4d 4f     .U/D/L/R    = MO
    2157:	56 45 20 43 52 4f 53 53 fe 03 0d 41 20 20 20 20     VE CROSS...A    
    2167:	20 20 20 20 20 20 3d 20 53 48 4f 4f 54 fe 03 10           = SHOOT...
    2177:	59 4f 55 20 4d 55 53 54 20 44 45 46 45 4e 44 20     YOU MUST DEFEND 
    2187:	42 41 53 45 ff fc 02 fe 78 64 43 4f 4e 47 52 41     BASE....xdCONGRA
    2197:	54 55 4c 41 54 49 4f 4e fd 20 fe 03 0c 59 4f 55     TULATION. ...YOU
    21a7:	20 53 41 56 45 20 4f 55 52 20 42 41 53 45 2e fd      SAVE OUR BASE..
    21b7:	20 fe 03 0e 45 56 45 52 59 4f 4e 45 20 57 41 4e      ...EVERYONE WAN
    21c7:	54 20 54 4f 20 42 45 20 54 48 45 20 47 55 59 fe     T TO BE THE GUY.
    21d7:	03 0f 42 55 54 20 59 4f 55 20 41 52 45 20 54 48     ..BUT YOU ARE TH
    21e7:	45 20 47 55 59 20 13 ff                             E GUY ..

000021ef <LevelText>:
    21ef:	fc 00 fe 03 0a 4c 45 56 45 4c 20 31 fe 03 0c 4c     .....LEVEL 1...L
    21ff:	45 46 54 2f 52 49 47 48 54 20 3d 20 53 50 49 4e     EFT/RIGHT = SPIN
    220f:	20 53 48 49 50 fe 03 0d 42 20 6f 72 20 55 50 20      SHIP...B or UP 
    221f:	20 20 20 3d 20 54 48 52 55 53 54 fe 03 0e 41 20        = THRUST...A 
    222f:	20 20 20 20 20 20 20 20 20 3d 20 53 48 4f 4f 54              = SHOOT
    223f:	fe 03 10 53 48 4f 4f 54 20 54 48 45 20 41 53 54     ...SHOOT THE AST
    224f:	45 52 4f 49 44 53 fe 03 11 59 4f 55 52 20 50 4c     EROIDS...YOUR PL
    225f:	41 4e 45 54 20 49 53 20 44 45 50 45 4e 44 49 4e     ANET IS DEPENDIN
    226f:	47 fe 03 12 4f 4e 20 59 4f 55 21 ff fc 00 fe 03     G...ON YOU!.....
    227f:	0a 4c 45 56 45 4c 20 32 fe 03 0c 4c 45 46 54 2f     .LEVEL 2...LEFT/
    228f:	52 49 47 48 54 20 3d 20 4d 4f 56 45 20 53 48 49     RIGHT = MOVE SHI
    229f:	50 fe 03 0d 41 20 20 20 20 20 20 20 20 20 20 3d     P...A          =
    22af:	20 53 48 4f 4f 54 fe 03 10 59 4f 55 20 4d 55 53      SHOOT...YOU MUS
    22bf:	54 20 46 4c 59 20 42 41 43 4b 20 54 4f 20 45 41     T FLY BACK TO EA
    22cf:	52 54 48 fe 03 12 53 48 4f 4f 54 20 52 4f 43 4b     RTH...SHOOT ROCK
    22df:	53 20 46 4f 52 20 50 4f 49 4e 54 53 ff fc 00 fe     S FOR POINTS....
    22ef:	03 0a 4c 45 56 45 4c 20 33 fe 03 0c 4c 45 46 54     ..LEVEL 3...LEFT
    22ff:	2f 52 49 47 48 54 20 3d 20 53 50 49 4e 20 53 48     /RIGHT = SPIN SH
    230f:	49 50 fe 03 0d 42 20 6f 72 20 55 50 20 20 20 20     IP...B or UP    
    231f:	3d 20 54 48 52 55 53 54 fe 03 10 59 4f 55 20 4d     = THRUST...YOU M
    232f:	55 53 54 20 46 4c 59 20 54 4f 20 42 41 53 45 20     UST FLY TO BASE 
    233f:	41 4e 44 fe 03 11 43 4f 4c 4c 45 43 54 20 41 4e     AND...COLLECT AN
    234f:	54 49 20 41 53 54 45 52 4f 49 44 20 fe 03 12 4d     TI ASTEROID ...M
    235f:	49 53 53 49 4c 45 20 46 52 4f 4d 20 53 43 49 45     ISSILE FROM SCIE
    236f:	4e 54 49 53 54 2e 20 20 fe 03 14 4f 4e 43 45 20     NTIST.  ...ONCE 
    237f:	43 4f 4c 4c 45 43 54 20 46 4c 59 20 42 41 43 4b     COLLECT FLY BACK
    238f:	20 54 4f fe 03 15 53 50 41 43 45 fe 03 17 42 45      TO...SPACE...BE
    239f:	57 41 52 45 20 47 52 41 56 49 54 59 ff fc 00 fe     WARE GRAVITY....
    23af:	03 0a 4c 45 56 45 4c 20 34 fe 03 0c 55 2f 44 2f     ..LEVEL 4...U/D/
    23bf:	4c 2f 52 20 20 20 20 3d 20 4d 4f 56 45 20 43 52     L/R    = MOVE CR
    23cf:	4f 53 53 fe 03 0d 41 20 20 20 20 20 20 20 20 20     OSS...A         
    23df:	20 3d 20 53 48 4f 4f 54 fe 03 10 59 4f 55 20 4d      = SHOOT...YOU M
    23ef:	55 53 54 20 44 45 46 45 4e 44 20 42 41 53 45 ff     UST DEFEND BASE.
    23ff:	fc 02 fe 03 0a 43 4f 4e 47 52 41 54 55 4c 41 54     .....CONGRATULAT
    240f:	49 4f 4e fd 20 fe 03 0c 59 4f 55 20 53 41 56 45     ION. ...YOU SAVE
    241f:	20 4f 55 52 20 42 41 53 45 2e fd 20 fe 03 0e 45      OUR BASE.. ...E
    242f:	56 45 52 59 4f 4e 45 20 57 41 4e 54 20 54 4f 20     VERYONE WANT TO 
    243f:	42 45 20 54 48 45 20 47 55 59 fe 03 0f 42 55 54     BE THE GUY...BUT
    244f:	20 59 4f 55 20 41 52 45 20 54 48 45 20 47 55 59      YOU ARE THE GUY
    245f:	20 13 ff                                             ..

00002462 <__ctors_end>:
    2462:	11 24       	eor	r1, r1
    2464:	1f be       	out	0x3f, r1	; 63
    2466:	cf ef       	ldi	r28, 0xFF	; 255
    2468:	d0 e1       	ldi	r29, 0x10	; 16
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	cd bf       	out	0x3d, r28	; 61

0000246e <wdt_init>:
void Initialize(void) __attribute__((naked)) __attribute__((section(".init8")));


void wdt_init(void)
{
    MCUSR = 0;
    246e:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    2470:	88 e1       	ldi	r24, 0x18	; 24
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	80 93 60 00 	sts	0x0060, r24
    247a:	10 92 60 00 	sts	0x0060, r1
    247e:	0f be       	out	0x3f, r0	; 63

00002480 <__do_clear_bss>:
    2480:	11 e0       	ldi	r17, 0x01	; 1
    2482:	a8 e0       	ldi	r26, 0x08	; 8
    2484:	b1 e0       	ldi	r27, 0x01	; 1
    2486:	01 c0       	rjmp	.+2      	; 0x248a <.do_clear_bss_start>

00002488 <.do_clear_bss_loop>:
    2488:	1d 92       	st	X+, r1

0000248a <.do_clear_bss_start>:
    248a:	ad 3f       	cpi	r26, 0xFD	; 253
    248c:	b1 07       	cpc	r27, r17
    248e:	e1 f7       	brne	.-8      	; 0x2488 <.do_clear_bss_loop>

00002490 <__do_copy_data>:
    2490:	11 e0       	ldi	r17, 0x01	; 1
    2492:	a0 e0       	ldi	r26, 0x00	; 0
    2494:	b1 e0       	ldi	r27, 0x01	; 1
    2496:	ec ea       	ldi	r30, 0xAC	; 172
    2498:	f4 e6       	ldi	r31, 0x64	; 100
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <.do_copy_data_start>

0000249c <.do_copy_data_loop>:
    249c:	05 90       	lpm	r0, Z+
    249e:	0d 92       	st	X+, r0

000024a0 <.do_copy_data_start>:
    24a0:	a4 30       	cpi	r26, 0x04	; 4
    24a2:	b1 07       	cpc	r27, r17
    24a4:	d9 f7       	brne	.-10     	; 0x249c <.do_copy_data_loop>

000024a6 <Initialize>:
	io_set(OCR1BL,0x4f),		//lo8(0x36e-31) eq pulse pulse restore
	io_set(OCR1BH,0x03)			//hi8(0x36e-31)	
};


void Initialize(void){
    24a6:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <isEepromFormatted>
    24aa:	88 23       	and	r24, r24
    24ac:	11 f4       	brne	.+4      	; 0x24b2 <Initialize+0xc>
    24ae:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <FormatEeprom>
	int i;

	if(!isEepromFormatted()) FormatEeprom();

	cli();
    24b2:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    24b4:	91 e0       	ldi	r25, 0x01	; 1
    24b6:	90 93 4e 01 	sts	0x014E, r25
		tr4_barrel_hi=1;		
    24ba:	90 93 4f 01 	sts	0x014F, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    24be:	90 93 4d 01 	sts	0x014D, r25
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    24c2:	10 92 3a 01 	sts	0x013A, r1
    24c6:	10 92 40 01 	sts	0x0140, r1
    24ca:	10 92 46 01 	sts	0x0146, r1
    24ce:	10 92 4c 01 	sts	0x014C, r1
    24d2:	10 92 52 01 	sts	0x0152, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    24d6:	10 92 22 01 	sts	0x0122, r1
	sync_flags=0;
    24da:	10 92 24 01 	sts	0x0124, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    24de:	82 e1       	ldi	r24, 0x12	; 18
    24e0:	80 93 23 01 	sts	0x0123, r24

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    24e4:	80 ee       	ldi	r24, 0xE0	; 224
    24e6:	80 93 2c 01 	sts	0x012C, r24
	render_lines_count=FRAME_LINES;
    24ea:	80 93 2a 01 	sts	0x012A, r24
	first_render_line_tmp=FIRST_RENDER_LINE;
    24ee:	84 e1       	ldi	r24, 0x14	; 20
    24f0:	80 93 2b 01 	sts	0x012B, r24
	first_render_line=FIRST_RENDER_LINE;
    24f4:	80 93 29 01 	sts	0x0129, r24

	joypad1_status_hi=0;
    24f8:	10 92 30 01 	sts	0x0130, r1
    24fc:	10 92 2f 01 	sts	0x012F, r1
	joypad2_status_hi=0;
    2500:	10 92 34 01 	sts	0x0134, r1
    2504:	10 92 33 01 	sts	0x0133, r1
	sound_enabled=1;
    2508:	90 93 39 01 	sts	0x0139, r25

	InitializeVideoMode();
    250c:	0e 94 be 13 	call	0x277c	; 0x277c <InitializeVideoMode>
    2510:	20 e9       	ldi	r18, 0x90	; 144
    2512:	30 e0       	ldi	r19, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    2514:	f9 01       	movw	r30, r18
    2516:	85 91       	lpm	r24, Z+
    2518:	94 91       	lpm	r25, Z+
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
    251a:	fc 01       	movw	r30, r24
    251c:	f0 70       	andi	r31, 0x00	; 0
    251e:	90 83       	st	Z, r25
    2520:	2e 5f       	subi	r18, 0xFE	; 254
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	2e 3b       	cpi	r18, 0xBE	; 190
    2528:	38 07       	cpc	r19, r24
    252a:	a1 f7       	brne	.-24     	; 0x2514 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    252c:	78 94       	sei
	
	DisplayLogo();
    252e:	0e 94 bd 13 	call	0x277a	; 0x277a <DisplayLogo>
    2532:	0e 94 81 2c 	call	0x5902	; 0x5902 <main>
    2536:	0c 94 54 32 	jmp	0x64a8	; 0x64a8 <_exit>

0000253a <__bad_interrupt>:
    253a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000253e <sub_video_mode6>:
.section .text

sub_video_mode6:					; At this point R0..R29 have all been saved to the stack
									; So all can be trashed.

	lds 	r16,render_lines_count	; total scanlines to draw
    253e:	00 91 2a 01 	lds	r16, 0x012A
	andi	r16, 0b11111000			; must be multiple of 8 (because of my updated "clear while render"
    2542:	08 7f       	andi	r16, 0xF8	; 248
	mov		r10, r16				; routines
    2544:	a0 2e       	mov	r10, r16


	ldi		r17, (28*8)
    2546:	10 ee       	ldi	r17, 0xE0	; 224
	sub		r17, r16			;
    2548:	10 1b       	sub	r17, r16

	ldi		r16, 0x04				; 32x = already x8 because pixel rather than CHAR x4 here
    254a:	04 e0       	ldi	r16, 0x04	; 4
	mul		r17, r16
    254c:	10 9f       	mul	r17, r16

	movw	r28, r0
    254e:	e0 01       	movw	r28, r0
	subi	r29, hi8(-(vram))			; Add VRAM offset
    2550:	d4 5f       	subi	r29, 0xF4	; 244
//	ldi 	YL,lo8(vram)			; Get the base address of the VRAM
//	ldi 	YH,hi8(vram)			; for the first row of CHARs to render



	clr 	r22						; Line within Char is 0 of 7
    2552:	66 27       	eor	r22, r22

	movw	r14, YL					; Copy address of VRAM into R14:15 
    2554:	7e 01       	movw	r14, r28


	clr		r5						; CF.. Use R5 as ZERO during these bits
    2556:	55 24       	eor	r5, r5
	lds		r4, ClearVramFlags		
    2558:	40 90 13 01 	lds	r4, 0x0113

	sbrc	r4, 0					; Test Bit0 of ClearVRAMFlags and is SET
    255c:	40 fc       	sbrc	r4, 0
	rjmp	clear_this_frame		; We need to clear VRAM
    255e:	07 c0       	rjmp	.+14     	; 0x256e <clear_this_frame>

00002560 <dont_clear_this_frame>:

dont_clear_this_frame:				; Otherwise don't clear VRAM
	lds		r21, renderCount		
    2560:	50 91 12 01 	lds	r21, 0x0112
	inc		r21						; INC the variable keeping a copy of how many frames
    2564:	53 95       	inc	r21
	sts		renderCount, r21		; since last clear happened.
    2566:	50 93 12 01 	sts	0x0112, r21

	ldi		r21, 0xFF				; How Many Rows to wait before clearing VRAM 0xFF = never
    256a:	5f ef       	ldi	r21, 0xFF	; 255
	rjmp	clear_this_frame_common
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <clear_this_frame_common>

0000256e <clear_this_frame>:

clear_this_frame:
	sts		renderCount, r5
    256e:	50 92 12 01 	sts	0x0112, r5
	ldi		r21, 0x07				; How Many Rows to wait before clearing VRAM 0x07 = normal
    2572:	57 e0       	ldi	r21, 0x07	; 7

	rjmp	.
    2574:	00 c0       	rjmp	.+0      	; 0x2576 <clear_this_frame+0x8>
	rjmp	.
    2576:	00 c0       	rjmp	.+0      	; 0x2578 <clear_this_frame_common>

00002578 <clear_this_frame_common>:

clear_this_frame_common:
	WAIT r19,1327					; waste cycles to align with next
    2578:	3d ed       	ldi	r19, 0xDD	; 221
    257a:	3a 95       	dec	r19
    257c:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <clear_this_frame_common+0x8>
    2580:	e1 f7       	brne	.-8      	; 0x257a <clear_this_frame_common+0x2>
	...

00002584 <next_text_line>:
									; hsync that is first rendered line


next_text_line:	
	rcall hsync_pulse 
    2584:	fb d1       	rcall	.+1014   	; 0x297c <hsync_pulse>

	lds ZL,hsync_user_callback+0	; process user hsync callback
    2586:	e0 91 20 01 	lds	r30, 0x0120
	lds ZH,hsync_user_callback+1
    258a:	f0 91 21 01 	lds	r31, 0x0121
	icall							; callback must take exactly 32 cycles
    258e:	09 95       	icall
	...

00002592 <Draw_Score_Lives_Level>:
;
; These chars are stored as 11 bytes in RAM and are permanently allocated 11 ramTiles (0x01..0x11)
;

Draw_Score_Lives_Level:
	ldi		r19, 0x0C						; If we have made it to the 12th last render line
    2592:	3c e0       	ldi	r19, 0x0C	; 12
	cp		r10, r19
    2594:	a3 16       	cp	r10, r19
	brlo	Draw_Score_Lives_Level_Start	; then we can start drawing the status chars
    2596:	30 f0       	brcs	.+12     	; 0x25a4 <Draw_Score_Lives_Level_Start>


	WAIT r19,74								; Other wise waste some time and go to the next bit
    2598:	38 e1       	ldi	r19, 0x18	; 24
    259a:	3a 95       	dec	r19
    259c:	f1 f7       	brne	.-4      	; 0x259a <Draw_Score_Lives_Level+0x8>
    259e:	00 00       	nop
    25a0:	00 00       	nop
	rjmp	Draw_Score_Lives_Level_Skip
    25a2:	2a c0       	rjmp	.+84     	; 0x25f8 <Draw_Score_Lives_Level_Skip>

000025a4 <Draw_Score_Lives_Level_Start>:

Draw_Score_Lives_Level_Start:


	mov		r30, r10						; Get a copy of the Status# to print (11..1)
    25a4:	ea 2d       	mov	r30, r10
	dec		r30								; subract one from it as we actually want (10..0)
    25a6:	ea 95       	dec	r30

	clr		r31
    25a8:	ff 27       	eor	r31, r31
	subi	r30, lo8(-(StatusTiles))		; Add the base address of the table in ram
    25aa:	ec 5e       	subi	r30, 0xEC	; 236
	sbci	r31, hi8(-(StatusTiles))		; holding the CHAR to print.
    25ac:	fe 4f       	sbci	r31, 0xFE	; 254
	ld		r19, Z							; and read the CHAR we are going to print
    25ae:	30 81       	ld	r19, Z

	ldi		r17, 0x08
    25b0:	18 e0       	ldi	r17, 0x08	; 8
	mul		r19, r17						; Multiply the Char_Number *8
    25b2:	31 9f       	mul	r19, r17
											; and leave in R0:1

	mov		r30, r10							; Get a copy of the Status# to print again
    25b4:	ea 2d       	mov	r30, r10
	dec		r30									; subract one from it as we actually want (10..0)
    25b6:	ea 95       	dec	r30
	clr		r31
    25b8:	ff 27       	eor	r31, r31
	subi	r30, lo8(-(StatusPositionTable))	; add to the BASE address in flash of the 
    25ba:	e4 59       	subi	r30, 0x94	; 148
	sbci	r31, hi8(-(StatusPositionTable))	; position table
    25bc:	f1 4e       	sbci	r31, 0xE1	; 225

	lpm		r26, Z							; Read the lower byte of the VRAM address from
    25be:	a4 91       	lpm	r26, Z+
	ldi		r27, hi8(vram)					; the position table and LDI the upper address byte
    25c0:	bc e0       	ldi	r27, 0x0C	; 12

	mov		r19, r10						; Get Status# again
    25c2:	3a 2d       	mov	r19, r10
	st		X, r19							; save the tile# to VRAM
    25c4:	3c 93       	st	X, r19

	movw	r30, r0							; Move the result of (CHAR*8) to the Z_Register
    25c6:	f0 01       	movw	r30, r0
	subi 	r30, lo8(-(FontTable))			; Add the offset to the FontTable[] array to Z_Register
    25c8:	e4 53       	subi	r30, 0x34	; 52
    sbci 	r31, hi8(-(FontTable))			; 		(Must be 16 bit add as FontTable is not aligned)
    25ca:	f3 4f       	sbci	r31, 0xF3	; 243

	mul		r19, r17						; Multiple the ramTile# *8
    25cc:	31 9f       	mul	r19, r17
	movw	r26, r0							; move the resutl of ramTile*8 to X
    25ce:	d0 01       	movw	r26, r0
	ldi		r27, hi8(ramTiles)				; Add the offset of the ramTiles
    25d0:	b4 e0       	ldi	r27, 0x04	; 4


	lpm		r19, Z+							; Copy the 8 bytes of FONT data to ramTile space
    25d2:	35 91       	lpm	r19, Z+
	st		X+, r19
    25d4:	3d 93       	st	X+, r19
	lpm		r19, Z+
    25d6:	35 91       	lpm	r19, Z+
	st		X+, r19
    25d8:	3d 93       	st	X+, r19
	lpm		r19, Z+
    25da:	35 91       	lpm	r19, Z+
	st		X+, r19
    25dc:	3d 93       	st	X+, r19
	lpm		r19, Z+
    25de:	35 91       	lpm	r19, Z+
	st		X+, r19
    25e0:	3d 93       	st	X+, r19
	lpm		r19, Z+
    25e2:	35 91       	lpm	r19, Z+
	st		X+, r19
    25e4:	3d 93       	st	X+, r19
	lpm		r19, Z+
    25e6:	35 91       	lpm	r19, Z+
	st		X+, r19
    25e8:	3d 93       	st	X+, r19
	lpm		r19, Z+
    25ea:	35 91       	lpm	r19, Z+
	st		X+, r19
    25ec:	3d 93       	st	X+, r19
	lpm		r19, Z+
    25ee:	35 91       	lpm	r19, Z+
	st		X+, r19
    25f0:	3d 93       	st	X+, r19

	rjmp	.			; 5 nops
    25f2:	00 c0       	rjmp	.+0      	; 0x25f4 <Draw_Score_Lives_Level_Start+0x50>
	rjmp	.
    25f4:	00 c0       	rjmp	.+0      	; 0x25f6 <Draw_Score_Lives_Level_Start+0x52>
	rjmp	.
    25f6:	00 c0       	rjmp	.+0      	; 0x25f8 <Draw_Score_Lives_Level_Skip>

000025f8 <Draw_Score_Lives_Level_Skip>:

Draw_Score_Lives_Level_Skip:

	call render_tile_line_hires 	; render_tile_line
    25f8:	0e 94 3f 13 	call	0x267e	; 0x267e <render_tile_line_hires>
	

	cpi	 r21, 0x00					; See if we have already skipped the first 7 lines
    25fc:	50 30       	cpi	r21, 0x00	; 0
	breq  clear_vram_this_line
    25fe:	31 f0       	breq	.+12     	; 0x260c <clear_vram_this_line>

	dec	r21
    2600:	5a 95       	dec	r21

	WAIT r19,133					; Extra Cycles becuase 256 pixels	
    2602:	3c e2       	ldi	r19, 0x2C	; 44
    2604:	3a 95       	dec	r19
    2606:	f1 f7       	brne	.-4      	; 0x2604 <Draw_Score_Lives_Level_Skip+0xc>
    2608:	00 00       	nop

	rjmp	clear_vram_com_end
    260a:	16 c0       	rjmp	.+44     	; 0x2638 <clear_vram_com_end>

0000260c <clear_vram_this_line>:

clear_vram_this_line:

	movw	r30, r14				; Move the VRAM Clear Address Counter into Z
    260c:	f7 01       	movw	r30, r14
	ld		r16, Z					; Get the # of the tile pointed to
    260e:	00 81       	ld	r16, Z

	clr		r3						; ZERO out a temp reg
    2610:	33 24       	eor	r3, r3
	sbrc	r4, 1					; test to see if we should be clearing VRAM
    2612:	41 fc       	sbrc	r4, 1
	mov		r3, r16					; if we are NOT clearing VRAM then UN-ZERO R3 with the current tile
    2614:	30 2e       	mov	r3, r16

	st		Z+, r3					; Store R3 to the VRAM address
    2616:	31 92       	st	Z+, r3
	movw	r14, r30				; Save VRAM address counter as render_line trashes Z
    2618:	7f 01       	movw	r14, r30

	ldi		r17, 0x08				; Multiply the Tile# by 8 to get the ram location - 0x0800
    261a:	18 e0       	ldi	r17, 0x08	; 8
	mul		r16,r17
    261c:	01 9f       	mul	r16, r17

	movw	r30, r0					; Move the 16 bit value into Z and add 0x0400 to it
    261e:	f0 01       	movw	r30, r0
	subi	r31, hi8(-(ramTiles))	; to get the actual RAM address of the first byte of tile
    2620:	fc 5f       	subi	r31, 0xFC	; 252

	st		Z+, r5					; Clear 8 consecutive bytes
    2622:	51 92       	st	Z+, r5
	st		Z+, r5
    2624:	51 92       	st	Z+, r5
	st		Z+, r5
    2626:	51 92       	st	Z+, r5
	st		Z+, r5
    2628:	51 92       	st	Z+, r5
	st		Z+, r5
    262a:	51 92       	st	Z+, r5
	st		Z+, r5
    262c:	51 92       	st	Z+, r5
	st		Z+, r5
    262e:	51 92       	st	Z+, r5
	st		Z+, r5
    2630:	51 92       	st	Z+, r5

	mov		r17, r14
    2632:	1e 2d       	mov	r17, r14
	andi	r17, 0b00000011
    2634:	13 70       	andi	r17, 0x03	; 3
	brne	clear_vram_this_line
    2636:	51 f7       	brne	.-44     	; 0x260c <clear_vram_this_line>

00002638 <clear_vram_com_end>:

clear_vram_com_end:
 	dec r10							; Check to see if all lines rendered
    2638:	aa 94       	dec	r10
	breq text_frame_end
    263a:	81 f0       	breq	.+32     	; 0x265c <text_frame_end>
	
	inc r22
    263c:	63 95       	inc	r22

	cpi r22,8 						; if 8 rows have been rendered 
    263e:	68 30       	cpi	r22, 0x08	; 8
	breq next_text_row 				; then we are on a new char row
    2640:	29 f0       	breq	.+10     	; 0x264c <next_text_row>
	
									; Make sure this path take same number
									; of clocks as next_text_row path
	lpm ;3 nop
    2642:	c8 95       	lpm
	lpm ;3 nop
    2644:	c8 95       	lpm
	lpm ;3 nop
    2646:	c8 95       	lpm
	nop
    2648:	00 00       	nop

	rjmp next_text_line	
    264a:	9c cf       	rjmp	.-200    	; 0x2584 <next_text_line>

0000264c <next_text_row>:

next_text_row:
	clr r22							; Reset Line within Char counter to 0
    264c:	66 27       	eor	r22, r22

	clr r0							; Get the base address of the VRAM
    264e:	00 24       	eor	r0, r0
	ldi r19,VRAM_TILES_H			; for the NEXT row of CHARs to render
    2650:	30 e2       	ldi	r19, 0x20	; 32
	add YL,r19
    2652:	c3 0f       	add	r28, r19
	adc YH,r0
    2654:	d0 1d       	adc	r29, r0

	lpm
    2656:	c8 95       	lpm
	nop
    2658:	00 00       	nop

	rjmp next_text_line
    265a:	94 cf       	rjmp	.-216    	; 0x2584 <next_text_line>

0000265c <text_frame_end>:

text_frame_end:

	WAIT r19,17
    265c:	35 e0       	ldi	r19, 0x05	; 5
    265e:	3a 95       	dec	r19
    2660:	f1 f7       	brne	.-4      	; 0x265e <text_frame_end+0x2>
    2662:	00 00       	nop
    2664:	00 00       	nop

	rcall hsync_pulse ;145
    2666:	8a d1       	rcall	.+788    	; 0x297c <hsync_pulse>

00002668 <text_end2>:
	
text_end2:

	;set vsync flag & flip field
	lds ZL,sync_flags
    2668:	e0 91 24 01 	lds	r30, 0x0124
	ldi r20,SYNC_FLAG_FIELD
    266c:	42 e0       	ldi	r20, 0x02	; 2
	ori ZL,SYNC_FLAG_VSYNC
    266e:	e1 60       	ori	r30, 0x01	; 1
	eor ZL,r20
    2670:	e4 27       	eor	r30, r20
	sts sync_flags,ZL
    2672:	e0 93 24 01 	sts	0x0124, r30

	;clear any pending timer int
	ldi ZL,(1<<OCF1A)
    2676:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIFR1),ZL
    2678:	e0 93 36 00 	sts	0x0036, r30

	ret
    267c:	08 95       	ret

0000267e <render_tile_line_hires>:


//high resolution
render_tile_line_hires:

	movw XL,YL						; Save Y (Y pointer R28:R29)
    267e:	de 01       	movw	r26, r28

	ldi r23,8						; Bytes per tile for the MUL
    2680:	78 e0       	ldi	r23, 0x08	; 8

	clr r0
    2682:	00 24       	eor	r0, r0
	ldi r24,lo8(ramTiles)			; Get the base address of the RAM Tiles
    2684:	80 e0       	ldi	r24, 0x00	; 0
	ldi r25,hi8(ramTiles)
    2686:	94 e0       	ldi	r25, 0x04	; 4
	add r24,r22						; add Line within Char offset
    2688:	86 0f       	add	r24, r22
	adc r25,r0
    268a:	90 1d       	adc	r25, r0

	;load the first 8 pixels

	ld	r20,X+						; load TILE from VRAM
    268c:	4d 91       	ld	r20, X+
	mul r20,r23						; Multiply loaded TILE value by 8
    268e:	47 9f       	mul	r20, r23
	movw ZL,r24						; Copy address of BASE+Line_within_Char to Z
    2690:	fc 01       	movw	r30, r24
	add ZL,r0						; Add TILE*8 to BASE+Line_within_Char
    2692:	e0 0d       	add	r30, r0
	adc ZH,r1
    2694:	f1 1d       	adc	r31, r1
	ld r17,Z						; Load the 8 pixels into r17
    2696:	10 81       	ld	r17, Z

	ldi r18,SCREEN_TILES_H			; Load TILE_PER_LINE_COUNTER
    2698:	20 e2       	ldi	r18, 0x20	; 32

	rjmp .							; Waste 4 clock cycles
    269a:	00 c0       	rjmp	.+0      	; 0x269c <render_tile_line_hires+0x1e>
	rjmp .
    269c:	00 c0       	rjmp	.+0      	; 0x269e <render_tile_line_hires+0x20>
; loading 0x00 or 0xFF into PORT switches between BLACK and foreground
;
; finally 2 clocks EACH pixel (16 clocks total) to get the NEXT 8 pixels

									; Pixel 0
	rol r17							
    269e:	11 1f       	adc	r17, r17
	sbc r2,r2						
    26a0:	22 08       	sbc	r2, r2
	out _SFR_IO_ADDR(DATA_PORT),r2	
    26a2:	28 b8       	out	0x08, r2	; 8
	ld r16,X+						; load next TILE from VRAM into R16
    26a4:	0d 91       	ld	r16, X+


									; Pixel 1
	rol r17
    26a6:	11 1f       	adc	r17, r17
	sbc r2,r2
    26a8:	22 08       	sbc	r2, r2
	out _SFR_IO_ADDR(DATA_PORT),r2
    26aa:	28 b8       	out	0x08, r2	; 8
	mul r16,23						; Multiply loaded TILE value by 8
    26ac:	07 9f       	mul	r16, r23

									; Pixel 2
	rol r17
    26ae:	11 1f       	adc	r17, r17
	sbc r2,r2
    26b0:	22 08       	sbc	r2, r2
	out _SFR_IO_ADDR(DATA_PORT),r2
    26b2:	28 b8       	out	0x08, r2	; 8
	add r0,r24						; Add TILE*8 to BASE+Line_within_Char
    26b4:	08 0e       	add	r0, r24
	adc r1,r25						; leaving result in R0:R1
    26b6:	19 1e       	adc	r1, r25

									; Pixel 3
	rol r17
    26b8:	11 1f       	adc	r17, r17
	sbc r2,r2
    26ba:	22 08       	sbc	r2, r2
	out _SFR_IO_ADDR(DATA_PORT),r2
    26bc:	28 b8       	out	0x08, r2	; 8
	movw ZL,r0						; Move result to Z
    26be:	f0 01       	movw	r30, r0
	mov r19,r17						; shuffle current pixel into r19
    26c0:	31 2f       	mov	r19, r17

									; Pixel 4
	rol r19							; {Using R19 for last 3 pixels)
    26c2:	33 1f       	adc	r19, r19
	sbc r2,r2
    26c4:	22 08       	sbc	r2, r2
	out _SFR_IO_ADDR(DATA_PORT),r2
    26c6:	28 b8       	out	0x08, r2	; 8
	ld r17,Z						; load next 8 pixels into R17
    26c8:	10 81       	ld	r17, Z

									; Pixel 5
	rol r19
    26ca:	33 1f       	adc	r19, r19
	sbc r2,r2
    26cc:	22 08       	sbc	r2, r2
	out _SFR_IO_ADDR(DATA_PORT),r2
    26ce:	28 b8       	out	0x08, r2	; 8
	rjmp .							; 2 cycle NOP
    26d0:	00 c0       	rjmp	.+0      	; 0x26d2 <render_tile_line_hires+0x54>

									; Pixel 6
	rol r19
    26d2:	33 1f       	adc	r19, r19
	sbc r2,r2
    26d4:	22 08       	sbc	r2, r2
	out _SFR_IO_ADDR(DATA_PORT),r2
    26d6:	28 b8       	out	0x08, r2	; 8
	nop								; only one NOP here as Pixel 7 has the Dec R18
    26d8:	00 00       	nop

									; Pixel 7
	rol r19
    26da:	33 1f       	adc	r19, r19
	sbc r2,r2
    26dc:	22 08       	sbc	r2, r2
	dec r18							; Dec the TILE_PER_LINE_COUNTER
    26de:	2a 95       	dec	r18
	out _SFR_IO_ADDR(DATA_PORT),r2
    26e0:	28 b8       	out	0x08, r2	; 8
	brne 1b							; If line not finished go back
    26e2:	e9 f6       	brne	.-70     	; 0x269e <render_tile_line_hires+0x20>

	lpm 							; 2 cycle NOP
    26e4:	c8 95       	lpm
	clr r0
    26e6:	00 24       	eor	r0, r0
	out _SFR_IO_ADDR(DATA_PORT),r0	; Colour out = black after visable region.
    26e8:	08 b8       	out	0x08, r0	; 8


	ret
    26ea:	08 95       	ret

000026ec <ClearBuffer>:
;		R24
;		R26:27

ClearBuffer:

	ldi 	XL,lo8(ramTiles)		; Get base address of ramTiles
    26ec:	a0 e0       	ldi	r26, 0x00	; 0
	ldi 	XH,hi8(ramTiles)
    26ee:	b4 e0       	ldi	r27, 0x04	; 4
	ldi		r24, 0xB8				; there are 0xB8 (184) * 16 = 2944 bytes of ramTile + VRAM to clear
    26f0:	88 eb       	ldi	r24, 0xB8	; 184

000026f2 <ClearBufferLoop>:

ClearBufferLoop:
	st		X+, r1					; clear 16 bytes
    26f2:	1d 92       	st	X+, r1
	st		X+, r1
    26f4:	1d 92       	st	X+, r1
	st		X+, r1
    26f6:	1d 92       	st	X+, r1
	st		X+, r1
    26f8:	1d 92       	st	X+, r1
	st		X+, r1
    26fa:	1d 92       	st	X+, r1
	st		X+, r1
    26fc:	1d 92       	st	X+, r1
	st		X+, r1
    26fe:	1d 92       	st	X+, r1
	st		X+, r1
    2700:	1d 92       	st	X+, r1
	st		X+, r1
    2702:	1d 92       	st	X+, r1
	st		X+, r1
    2704:	1d 92       	st	X+, r1
	st		X+, r1
    2706:	1d 92       	st	X+, r1
	st		X+, r1
    2708:	1d 92       	st	X+, r1
	st		X+, r1
    270a:	1d 92       	st	X+, r1
	st		X+, r1
    270c:	1d 92       	st	X+, r1
	st		X+, r1
    270e:	1d 92       	st	X+, r1
	st		X+, r1
    2710:	1d 92       	st	X+, r1

	dec		r24						; if 1920 have not been cleared yet then keep going
    2712:	8a 95       	dec	r24
	brne	ClearBufferLoop
    2714:	71 f7       	brne	.-36     	; 0x26f2 <ClearBufferLoop>

	ldi 	r24,12					; set the first free ramTile as 1 (tile 0 = blank)
    2716:	8c e0       	ldi	r24, 0x0C	; 12
	sts 	nextFreeRamTile,r24
    2718:	80 93 10 01 	sts	0x0110, r24
	ret
    271c:	08 95       	ret

0000271e <ClearBufferLastLine>:
;		R26:27
;		R30:31

ClearBufferLastLine:

	ldi 	XL, 0x60							; Get the address of the last line of the VRAM
    271e:	a0 e6       	ldi	r26, 0x60	; 96
	ldi 	XH, 0x0F
    2720:	bf e0       	ldi	r27, 0x0F	; 15
	ldi		r23, 0x08							; We have to (ramTile# * 8) + 0x0800 to get ramTile address
    2722:	78 e0       	ldi	r23, 0x08	; 8

00002724 <ClearBufferLastLineLoop>:

ClearBufferLastLineLoop:
	
	ld		r24, X								; get the ramTile# at location n
    2724:	8c 91       	ld	r24, X
	st		X+, r1								; erase location n
    2726:	1d 92       	st	X+, r1

	cp		r24, r1								; if location n was ramTile# 0 then we don't
    2728:	81 15       	cp	r24, r1
	breq	ClearBufferLastLineNoRamTile		; need to clear that tile
    272a:	61 f0       	breq	.+24     	; 0x2744 <ClearBufferLastLineNoRamTile>


	mul		r24,r23								; (ramTile# * 8) + 0x0400
    272c:	87 9f       	mul	r24, r23
	movw	ZL, r0
    272e:	f0 01       	movw	r30, r0
	clr		r1
    2730:	11 24       	eor	r1, r1
	subi	r31, hi8(-(ramTiles))
    2732:	fc 5f       	subi	r31, 0xFC	; 252
	
	st 		Z+,r1								; clear all 8 bytes of the ramTile
    2734:	11 92       	st	Z+, r1
	st 		Z+,r1
    2736:	11 92       	st	Z+, r1
	st 		Z+,r1
    2738:	11 92       	st	Z+, r1
	st 		Z+,r1
    273a:	11 92       	st	Z+, r1
	st 		Z+,r1
    273c:	11 92       	st	Z+, r1
	st 		Z+,r1
    273e:	11 92       	st	Z+, r1
	st 		Z+,r1
    2740:	11 92       	st	Z+, r1
	st 		Z+,r1
    2742:	11 92       	st	Z+, r1

00002744 <ClearBufferLastLineNoRamTile>:
	
ClearBufferLastLineNoRamTile:
	cpi		XL, 0x80							; Check to see if we are at location 0x0F80
    2744:	a0 38       	cpi	r26, 0x80	; 128
	brne	ClearBufferLastLineLoop				; if we are not we still have more work to do
    2746:	71 f7       	brne	.-36     	; 0x2724 <ClearBufferLastLineLoop>

	ldi 	r24,12								; Reset nextFreeRamTile to 1
    2748:	8c e0       	ldi	r24, 0x0C	; 12
	sts 	nextFreeRamTile,r24
    274a:	80 93 10 01 	sts	0x0110, r24
	ret
    274e:	08 95       	ret

00002750 <ClearBufferLastLineTileOnly>:
;		R26:27
;		R30:31

ClearBufferLastLineTileOnly:

	ldi 	XL, 0x60							; Get the address of the last line of the VRAM
    2750:	a0 e6       	ldi	r26, 0x60	; 96
	ldi 	XH, 0x0F
    2752:	bf e0       	ldi	r27, 0x0F	; 15
	ldi		r23, 0x08							; We have to (ramTile# * 8) + 0x0800 to get ramTile address
    2754:	78 e0       	ldi	r23, 0x08	; 8

00002756 <ClearBufferLastLineTileOnlyLoop>:

ClearBufferLastLineTileOnlyLoop:
	
	ld		r24, X+								; get the ramTile# at location n
    2756:	8d 91       	ld	r24, X+

	cp		r24, r1								; if location n was ramTile# 0 then we don't
    2758:	81 15       	cp	r24, r1
	breq	ClearBufferLastLineTileOnlyNoRamTile		; need to clear that tile
    275a:	61 f0       	breq	.+24     	; 0x2774 <ClearBufferLastLineTileOnlyNoRamTile>

	mul		r24,r23								; (ramTile# * 8) + 0x0400
    275c:	87 9f       	mul	r24, r23
	movw	ZL, r0
    275e:	f0 01       	movw	r30, r0
	clr		r1
    2760:	11 24       	eor	r1, r1
	subi	r31, hi8(-(ramTiles))
    2762:	fc 5f       	subi	r31, 0xFC	; 252
	
	st 		Z+,r1								; clear all 8 bytes of the ramTile
    2764:	11 92       	st	Z+, r1
	st 		Z+,r1
    2766:	11 92       	st	Z+, r1
	st 		Z+,r1
    2768:	11 92       	st	Z+, r1
	st 		Z+,r1
    276a:	11 92       	st	Z+, r1
	st 		Z+,r1
    276c:	11 92       	st	Z+, r1
	st 		Z+,r1
    276e:	11 92       	st	Z+, r1
	st 		Z+,r1
    2770:	11 92       	st	Z+, r1
	st 		Z+,r1
    2772:	11 92       	st	Z+, r1

00002774 <ClearBufferLastLineTileOnlyNoRamTile>:
	
ClearBufferLastLineTileOnlyNoRamTile:
	cpi		XL, 0x80							; Check to see if we are at location 0x0F80
    2774:	a0 38       	cpi	r26, 0x80	; 128
	brne	ClearBufferLastLineTileOnlyLoop		; if we are not we still have more work to do
    2776:	79 f7       	brne	.-34     	; 0x2756 <ClearBufferLastLineTileOnlyLoop>

	ret
    2778:	08 95       	ret

0000277a <DisplayLogo>:


;Nothing to do in this mode
DisplayLogo:
VideoModeVsync:
	ret
    277a:	08 95       	ret

0000277c <InitializeVideoMode>:


InitializeVideoMode:

	ldi 	r24,lo8(pm(DefaultCallback))		; Point HSyncCallBack to something so it does not jump
    277c:	8e e8       	ldi	r24, 0x8E	; 142
	sts 	hsync_user_callback+0,r24			; to somewhere undefined before a user callback is set
    277e:	80 93 20 01 	sts	0x0120, r24
	ldi 	r24,hi8(pm(DefaultCallback))
    2782:	85 e1       	ldi	r24, 0x15	; 21
	sts 	hsync_user_callback+1,r24
    2784:	80 93 21 01 	sts	0x0121, r24

	rcall	ClearBuffer							; Clear the VRAM and tile ram and set nextFreeRamTile to 12
    2788:	b1 df       	rcall	.-158    	; 0x26ec <ClearBuffer>

	ldi 	r24,0xff							; Set the foreground colour to white
    278a:	8f ef       	ldi	r24, 0xFF	; 255
	sts 	fg_color,r24
    278c:	80 93 11 01 	sts	0x0111, r24

	ldi 	XL,lo8(shift_tbl_ram)				; Make a shift table in RAM 
    2790:	a8 e0       	ldi	r26, 0x08	; 8
	ldi 	XH,hi8(shift_tbl_ram)
    2792:	b1 e0       	ldi	r27, 0x01	; 1
	ldi 	r24,0b10000000
    2794:	80 e8       	ldi	r24, 0x80	; 128

00002796 <init_ram_table_loop>:
init_ram_table_loop:
	st 		X+,r24
    2796:	8d 93       	st	X+, r24
	lsr 	r24
    2798:	86 95       	lsr	r24
	brcc 	init_ram_table_loop
    279a:	e8 f7       	brcc	.-6      	; 0x2796 <init_ram_table_loop>


	ldi 	ZL,lo8(SinCosTable)
    279c:	e7 e7       	ldi	r30, 0x77	; 119
	ldi 	ZH,hi8(SinCosTable)
    279e:	fe e1       	ldi	r31, 0x1E	; 30

	ldi 	XL,lo8(trigtable)
    27a0:	a0 e8       	ldi	r26, 0x80	; 128
	ldi 	XH,hi8(trigtable)
    27a2:	bf e0       	ldi	r27, 0x0F	; 15

	ldi		r24, 0x00
    27a4:	80 e0       	ldi	r24, 0x00	; 0

000027a6 <init_sin_table_loop>:

init_sin_table_loop:
	lpm		r25, Z+
    27a6:	95 91       	lpm	r25, Z+
	st		X+, 25
    27a8:	9d 93       	st	X+, r25
	
	dec		r24
    27aa:	8a 95       	dec	r24
	brne	init_sin_table_loop
    27ac:	e1 f7       	brne	.-8      	; 0x27a6 <init_sin_table_loop>

	ret
    27ae:	08 95       	ret

000027b0 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    27b0:	0f 92       	push	r0
	push r1
    27b2:	1f 92       	push	r1
	push ZL;2
    27b4:	ef 93       	push	r30
	push ZH;2
    27b6:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    27b8:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    27ba:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    27bc:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    27c0:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    27c2:	f1 e0       	ldi	r31, 0x01	; 1

000027c4 <latency_loop>:
latency_loop:
	cp ZL,ZH
    27c4:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    27c6:	00 f0       	brcs	.+0      	; 0x27c8 <latency_loop+0x4>
	inc ZH
    27c8:	f3 95       	inc	r31
	cpi ZH,10
    27ca:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    27cc:	d8 f3       	brcs	.-10     	; 0x27c4 <latency_loop>
	jmp .
    27ce:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    27d2:	e0 91 23 01 	lds	r30, 0x0123
	dec ZL
    27d6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    27d8:	e0 93 23 01 	sts	0x0123, r30

	;process sync phases
	lds ZH,sync_phase
    27dc:	f0 91 22 01 	lds	r31, 0x0122
	sbrc ZH,0
    27e0:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    27e2:	57 c0       	rjmp	.+174    	; 0x2892 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    27e4:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    27e6:	98 f0       	brcs	.+38     	; 0x280e <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    27e8:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    27ea:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    27ee:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    27f0:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    27f4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    27f6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    27f8:	26 f4       	brtc	.+8      	; 0x2802 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    27fa:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    27fc:	0e 94 cf 14 	call	0x299e	; 0x299e <update_sound>
	rjmp sync_end
    2800:	b6 c0       	rjmp	.+364    	; 0x296e <sync_end>

00002802 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    2802:	e5 e1       	ldi	r30, 0x15	; 21
    2804:	ea 95       	dec	r30
    2806:	f1 f7       	brne	.-4      	; 0x2804 <sync_pre_eq_no_sound_update+0x2>
    2808:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    280a:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    280c:	b0 c0       	rjmp	.+352    	; 0x296e <sync_end>

0000280e <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    280e:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    2810:	38 f1       	brcs	.+78     	; 0x2860 <sync_post_eq>

	rjmp .
    2812:	00 c0       	rjmp	.+0      	; 0x2814 <sync_eq+0x6>
	rjmp .
    2814:	00 c0       	rjmp	.+0      	; 0x2816 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    2816:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    2818:	e0 fb       	bst	r30, 0
	ldi ZL,4
    281a:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    281c:	16 f4       	brtc	.+4      	; 0x2822 <sync_eq_skip>
	
	call update_sound
    281e:	0e 94 cf 14 	call	0x299e	; 0x299e <update_sound>

00002822 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    2822:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    2824:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    2828:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    282a:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    282e:	9f c0       	rjmp	.+318    	; 0x296e <sync_end>

00002830 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    2830:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    2832:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    2834:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    2836:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    283a:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    283c:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    283e:	00 f0       	brcs	.+0      	; 0x2840 <__vector_14+0x10>

	cpi ZL,2
    2840:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    2842:	00 f0       	brcs	.+0      	; 0x2844 <__vector_14+0x14>

	cpi ZL,3
    2844:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    2846:	00 f0       	brcs	.+0      	; 0x2848 <__vector_14+0x18>

	cpi ZL,4
    2848:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    284a:	00 f0       	brcs	.+0      	; 0x284c <__vector_14+0x1c>

	cpi ZL,5
    284c:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    284e:	00 f0       	brcs	.+0      	; 0x2850 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    2850:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    2852:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    2854:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    2858:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    285a:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    285c:	ef 91       	pop	r30
	reti
    285e:	18 95       	reti

00002860 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    2860:	00 c0       	rjmp	.+0      	; 0x2862 <sync_post_eq+0x2>

	bst ZL,0
    2862:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    2864:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    2866:	26 f4       	brtc	.+8      	; 0x2870 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    2868:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    286a:	0e 94 cf 14 	call	0x299e	; 0x299e <update_sound>
	rjmp sync_pre_eq_cont
    286e:	05 c0       	rjmp	.+10     	; 0x287a <sync_pre_eq_cont>

00002870 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    2870:	e5 e1       	ldi	r30, 0x15	; 21
    2872:	ea 95       	dec	r30
    2874:	f1 f7       	brne	.-4      	; 0x2872 <sync_post_eq_no_sound_update+0x2>
    2876:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    2878:	28 9a       	sbi	0x05, 0	; 5

0000287a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    287a:	e0 91 23 01 	lds	r30, 0x0123
	cpi ZL,0
    287e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    2880:	09 f0       	breq	.+2      	; 0x2884 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    2882:	75 c0       	rjmp	.+234    	; 0x296e <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    2884:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    2886:	e0 93 23 01 	sts	0x0123, r30
	ldi ZL,1
    288a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    288c:	e0 93 22 01 	sts	0x0122, r30
	
	rjmp sync_end
    2890:	6e c0       	rjmp	.+220    	; 0x296e <sync_end>

00002892 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    2892:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    2894:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    2898:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    289a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    289e:	00 c0       	rjmp	.+0      	; 0x28a0 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    28a0:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    28a2:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    28a4:	00 c0       	rjmp	.+0      	; 0x28a6 <sync_hsync+0x14>
	call update_sound
    28a6:	0e 94 cf 14 	call	0x299e	; 0x299e <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    28aa:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    28ac:	00 90 29 01 	lds	r0, 0x0129
	sub ZH,r0				
    28b0:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    28b2:	e0 91 23 01 	lds	r30, 0x0123
	cp ZL,ZH
    28b6:	ef 17       	cp	r30, r31
	brsh no_render
    28b8:	d0 f4       	brcc	.+52     	; 0x28ee <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    28ba:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    28bc:	00 90 29 01 	lds	r0, 0x0129
	sub ZH,r0				
    28c0:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    28c2:	00 90 2a 01 	lds	r0, 0x012A
	sub ZH,r0			
    28c6:	f0 19       	sub	r31, r0
	cp ZL,ZH
    28c8:	ef 17       	cp	r30, r31
	brlo no_render
    28ca:	88 f0       	brcs	.+34     	; 0x28ee <no_render>

	;push r1-r29
	ldi ZL,29
    28cc:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    28ce:	ff 27       	eor	r31, r31

000028d0 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    28d0:	00 80       	ld	r0, Z
	push r0
    28d2:	0f 92       	push	r0
	dec ZL
    28d4:	ea 95       	dec	r30
	brne push_loop	
    28d6:	e1 f7       	brne	.-8      	; 0x28d0 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,18+212-AUDIO_OUT_HSYNC_CYCLES
    28d8:	06 e0       	ldi	r16, 0x06	; 6
    28da:	0a 95       	dec	r16
    28dc:	f1 f7       	brne	.-4      	; 0x28da <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    28de:	0e 94 9f 12 	call	0x253e	; 0x253e <sub_video_mode6>

	;pop r1-r29
	ldi ZL,1
    28e2:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    28e4:	ff 27       	eor	r31, r31

000028e6 <pop_loop>:
pop_loop:
	pop r0
    28e6:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    28e8:	01 92       	st	Z+, r0
	cpi ZL,30
    28ea:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    28ec:	e0 f3       	brcs	.-8      	; 0x28e6 <pop_loop>

000028ee <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    28ee:	e0 91 23 01 	lds	r30, 0x0123
	cpi ZL,0
    28f2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <no_render+0xa>
	rjmp sync_end
    28f6:	3b c0       	rjmp	.+118    	; 0x296e <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    28f8:	2f 93       	push	r18
	push r19
    28fa:	3f 93       	push	r19
	push r20
    28fc:	4f 93       	push	r20
	push r21
    28fe:	5f 93       	push	r21
	push r22
    2900:	6f 93       	push	r22
	push r23
    2902:	7f 93       	push	r23
	push r24
    2904:	8f 93       	push	r24
	push r25
    2906:	9f 93       	push	r25
	push r26
    2908:	af 93       	push	r26
	push r27
    290a:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    290c:	78 94       	sei
	clr r1
    290e:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    2910:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    2912:	e0 93 22 01 	sts	0x0122, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    2916:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    2918:	e0 93 23 01 	sts	0x0123, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    291c:	f0 91 2b 01 	lds	r31, 0x012B
	sts first_render_line,ZH
    2920:	f0 93 29 01 	sts	0x0129, r31
	
	lds ZH,render_lines_count_tmp
    2924:	f0 91 2c 01 	lds	r31, 0x012C
	sts render_lines_count,ZH
    2928:	f0 93 2a 01 	sts	0x012A, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    292c:	e0 91 25 01 	lds	r30, 0x0125
	lds ZH,pre_vsync_user_callback+1
    2930:	f0 91 26 01 	lds	r31, 0x0126
	cp  ZL,r1
    2934:	e1 15       	cp	r30, r1
	cpc ZH,r1
    2936:	f1 05       	cpc	r31, r1
	breq .+2 
    2938:	09 f0       	breq	.+2      	; 0x293c <no_render+0x4e>
	icall
    293a:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    293c:	0e 94 4b 1c 	call	0x3896	; 0x3896 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    2940:	0e 94 bd 13 	call	0x277a	; 0x277a <DisplayLogo>

	;process music (music, envelopes, etc)
	call process_music
    2944:	0e 94 c9 14 	call	0x2992	; 0x2992 <process_music>
	clr r1
    2948:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    294a:	e0 91 27 01 	lds	r30, 0x0127
	lds ZH,post_vsync_user_callback+1
    294e:	f0 91 28 01 	lds	r31, 0x0128
	cp  ZL,r1
    2952:	e1 15       	cp	r30, r1
	cpc ZH,r1
    2954:	f1 05       	cpc	r31, r1
	breq .+2 
    2956:	09 f0       	breq	.+2      	; 0x295a <no_render+0x6c>
	icall
    2958:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    295a:	bf 91       	pop	r27
	pop r26
    295c:	af 91       	pop	r26
	pop r25
    295e:	9f 91       	pop	r25
	pop r24
    2960:	8f 91       	pop	r24
	pop r23
    2962:	7f 91       	pop	r23
	pop r22
    2964:	6f 91       	pop	r22
	pop r21
    2966:	5f 91       	pop	r21
	pop r20
    2968:	4f 91       	pop	r20
	pop r19
    296a:	3f 91       	pop	r19
	pop r18
    296c:	2f 91       	pop	r18

0000296e <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    296e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    2970:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    2972:	ff 91       	pop	r31
	pop ZL
    2974:	ef 91       	pop	r30
	pop r1
    2976:	1f 90       	pop	r1
	pop r0
    2978:	0f 90       	pop	r0
	reti
    297a:	18 95       	reti

0000297c <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    297c:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    297e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    2980:	00 c0       	rjmp	.+0      	; 0x2982 <hsync_pulse+0x6>
	call update_sound
    2982:	0e 94 cf 14 	call	0x299e	; 0x299e <update_sound>

	lds ZL,sync_pulse
    2986:	e0 91 23 01 	lds	r30, 0x0123
	dec ZL
    298a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    298c:	e0 93 23 01 	sts	0x0123, r30

	ret
    2990:	08 95       	ret

00002992 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    2992:	e0 91 39 01 	lds	r30, 0x0139
	sbrc ZL,0
    2996:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    2998:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <ProcessMusic>
#endif

	ret
    299c:	08 95       	ret

0000299e <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    299e:	0f 93       	push	r16
	push r17
    29a0:	1f 93       	push	r17
	push r18
    29a2:	2f 93       	push	r18
	push r28
    29a4:	cf 93       	push	r28
	push r29
    29a6:	df 93       	push	r29

	mov r18,ZL
    29a8:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    29aa:	00 91 3b 01 	lds	r16, 0x013B
	lds r17,tr1_pos_frac
    29ae:	10 91 3d 01 	lds	r17, 0x013D
	add	r17,r16	;add step to fractional part of sample pos
    29b2:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    29b4:	00 91 3c 01 	lds	r16, 0x013C
	lds ZL,tr1_pos_lo
    29b8:	e0 91 3e 01 	lds	r30, 0x013E
	lds ZH,tr1_pos_hi 
    29bc:	f0 91 3f 01 	lds	r31, 0x013F
	adc ZL,r16	;add step to low byte of sample pos
    29c0:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    29c2:	04 91       	lpm	r16, Z+
	sts tr1_pos_lo,ZL
    29c4:	e0 93 3e 01 	sts	0x013E, r30
	sts tr1_pos_frac,r17
    29c8:	10 93 3d 01 	sts	0x013D, r17
	lds r17,tr1_vol
    29cc:	10 91 3a 01 	lds	r17, 0x013A
	mulsu r16,r17;(sample*mixing vol)
    29d0:	01 03       	mulsu	r16, r17
	clr r0
    29d2:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend	
    29d4:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    29d6:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    29d8:	d0 2d       	mov	r29, r0

;38
	
	;channel 2
	lds r16,tr2_step_lo
    29da:	00 91 41 01 	lds	r16, 0x0141
	lds r17,tr2_pos_frac
    29de:	10 91 43 01 	lds	r17, 0x0143
	add	r17,r16	;add step to fractional part of sample pos
    29e2:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    29e4:	00 91 42 01 	lds	r16, 0x0142
	lds ZL,tr2_pos_lo
    29e8:	e0 91 44 01 	lds	r30, 0x0144
	lds ZH,tr2_pos_hi 
    29ec:	f0 91 45 01 	lds	r31, 0x0145
	adc ZL,r16	;add step to low byte of sample pos
    29f0:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    29f2:	04 91       	lpm	r16, Z+
	sts tr2_pos_lo,ZL
    29f4:	e0 93 44 01 	sts	0x0144, r30
	sts tr2_pos_frac,r17
    29f8:	10 93 43 01 	sts	0x0143, r17
	lds r17,tr2_vol
    29fc:	10 91 40 01 	lds	r17, 0x0140
	;clr r17
	;nop

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    2a00:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    2a02:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    2a04:	20 ff       	sbrs	r18, 0
	rjmp .
    2a06:	00 c0       	rjmp	.+0      	; 0x2a08 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    2a08:	01 03       	mulsu	r16, r17
	clr r0
    2a0a:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    2a0c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    2a0e:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    2a10:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    2a12:	00 91 47 01 	lds	r16, 0x0147
	lds r17,tr3_pos_frac
    2a16:	10 91 49 01 	lds	r17, 0x0149
	add	r17,r16				;add step to fractional part of sample pos
    2a1a:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    2a1c:	00 91 48 01 	lds	r16, 0x0148
	lds ZL,tr3_pos_lo
    2a20:	e0 91 4a 01 	lds	r30, 0x014A
	lds ZH,tr3_pos_hi 
    2a24:	f0 91 4b 01 	lds	r31, 0x014B
	adc ZL,r16				;add step to low byte of sample pos
    2a28:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    2a2a:	04 91       	lpm	r16, Z+
	sts tr3_pos_lo,ZL
    2a2c:	e0 93 4a 01 	sts	0x014A, r30
	sts tr3_pos_frac,r17
    2a30:	10 93 49 01 	sts	0x0149, r17
	lds r17,tr3_vol
    2a34:	10 91 46 01 	lds	r17, 0x0146
	mulsu r16,r17			;(sample*mixing vol)
    2a38:	01 03       	mulsu	r16, r17
	clr r0
    2a3a:	00 24       	eor	r0, r0
	sbc r0,r0				;sign extend
    2a3c:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    2a3e:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    2a40:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    2a42:	00 91 4e 01 	lds	r16, 0x014E
	lds r17,tr4_barrel_hi
    2a46:	10 91 4f 01 	lds	r17, 0x014F
	lds ZL,tr4_divider
    2a4a:	e0 91 50 01 	lds	r30, 0x0150
	dec ZL	
    2a4e:	ea 95       	dec	r30
	brpl ch4_no_shift	
    2a50:	92 f4       	brpl	.+36     	; 0x2a76 <ch4_no_shift>

	lds ZH,tr4_params
    2a52:	f0 91 4d 01 	lds	r31, 0x014D
	mov ZL,ZH
    2a56:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    2a58:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    2a5a:	00 2e       	mov	r0, r16
	lsr r0
    2a5c:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    2a5e:	00 26       	eor	r0, r16
	bst r0,0
    2a60:	00 fa       	bst	r0, 0
	lsr r17
    2a62:	16 95       	lsr	r17
	ror r16
    2a64:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    2a66:	16 f9       	bld	r17, 6
	sbrs ZH,0
    2a68:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    2a6a:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    2a6c:	00 93 4e 01 	sts	0x014E, r16
	sts tr4_barrel_hi,r17
    2a70:	10 93 4f 01 	sts	0x014F, r17

	rjmp ch4_end
    2a74:	03 c0       	rjmp	.+6      	; 0x2a7c <ch4_end>

00002a76 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    2a76:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    2a78:	1a 95       	dec	r17
	brne .-4
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <ch4_no_shift+0x2>

00002a7c <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    2a7c:	e0 93 50 01 	sts	0x0150, r30
;126
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    2a80:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    2a82:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    2a84:	21 ff       	sbrs	r18, 1
	rjmp .
    2a86:	00 c0       	rjmp	.+0      	; 0x2a88 <ch4_end+0xc>
	;*************************
	
	ldi r17,0x80 ;-128
    2a88:	10 e8       	ldi	r17, 0x80	; 128
	sbrc r16,0
    2a8a:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    2a8c:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    2a8e:	00 91 4c 01 	lds	r16, 0x014C

	mulsu r17,r16;(sample*mixing vol)
    2a92:	10 03       	mulsu	r17, r16
	clr r0
    2a94:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    2a96:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    2a98:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    2a9a:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 43 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    2a9c:	00 91 55 01 	lds	r16, 0x0155
	lds r17,tr5_step_lo 
    2aa0:	10 91 53 01 	lds	r17, 0x0153
	add r16,r17
    2aa4:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    2aa6:	00 93 55 01 	sts	0x0155, r16

	;add lo
	lds ZL,tr5_pos_lo
    2aaa:	e0 91 56 01 	lds	r30, 0x0156
	lds r17,tr5_step_hi 
    2aae:	10 91 54 01 	lds	r17, 0x0154
	adc ZL,r17
    2ab2:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    2ab4:	f0 91 57 01 	lds	r31, 0x0157
	ldi r16,0
    2ab8:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    2aba:	f0 1f       	adc	r31, r16

	lds r0,tr5_loop_end_lo
    2abc:	00 90 5a 01 	lds	r0, 0x015A
	lds r1,tr5_loop_end_hi
    2ac0:	10 90 5b 01 	lds	r1, 0x015B

	lds r16,tr5_loop_start_lo
    2ac4:	00 91 58 01 	lds	r16, 0x0158
	lds r17,tr5_loop_start_hi	
    2ac8:	10 91 59 01 	lds	r17, 0x0159

	cp ZL,r0
    2acc:	e0 15       	cp	r30, r0
	cpc ZH,r1
    2ace:	f1 05       	cpc	r31, r1
	brlo .+2
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <ch4_end+0x58>
	movw ZL,r16
    2ad2:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    2ad4:	e0 93 56 01 	sts	0x0156, r30
	sts tr5_pos_hi,ZH
    2ad8:	f0 93 57 01 	sts	0x0157, r31

	lpm	r16,Z	;load sample
    2adc:	04 91       	lpm	r16, Z+
	lds r17,tr5_vol
    2ade:	10 91 52 01 	lds	r17, 0x0152

	mulsu r16,r17;(sample*mixing vol)
    2ae2:	01 03       	mulsu	r16, r17
	clr r0
    2ae4:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    2ae6:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    2ae8:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    2aea:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    2aec:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    2aee:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    2af0:	d0 05       	cpc	r29, r0
	brlt .+2
    2af2:	0c f0       	brlt	.+2      	; 0x2af6 <ch4_end+0x7a>
	ldi r28,127
    2af4:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    2af6:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    2af8:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    2afa:	d0 05       	cpc	r29, r0
	brge .+2
    2afc:	0c f4       	brge	.+2      	; 0x2b00 <ch4_end+0x84>
	ldi r28,-128
    2afe:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    2b00:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    2b02:	c0 93 b3 00 	sts	0x00B3, r28
	
	pop r29
    2b06:	df 91       	pop	r29
	pop r28
    2b08:	cf 91       	pop	r28
	pop r18
    2b0a:	2f 91       	pop	r18
	pop r17
    2b0c:	1f 91       	pop	r17
	pop r16
    2b0e:	0f 91       	pop	r16
	
	ret
    2b10:	08 95       	ret

00002b12 <SetHsyncCallback>:
; C callable
; r25:r24 - pointer to C function: void ptr*(void)
;****************************
.section .text.SetHsyncCallback
SetHsyncCallback:
	sts 	hsync_user_callback+0,r24
    2b12:	80 93 20 01 	sts	0x0120, r24
	sts 	hsync_user_callback+1,r25
    2b16:	90 93 21 01 	sts	0x0121, r25
	ret
    2b1a:	08 95       	ret

00002b1c <DefaultCallback>:

;must take exactly 32 cycles including the ret
DefaultCallback:

	WAIT r24,28
    2b1c:	89 e0       	ldi	r24, 0x09	; 9
    2b1e:	8a 95       	dec	r24
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <DefaultCallback+0x2>
    2b22:	00 00       	nop
	ret
    2b24:	08 95       	ret

00002b26 <mycallback>:

;C-callable
;must take exactly 32 cycles including the ret
mycallback:

	ldi		r24, 0xFF				; Set the ForeGround colour to White
    2b26:	8f ef       	ldi	r24, 0xFF	; 255
	out 	_SFR_IO_ADDR(DDRC),r24	; On every single line
    2b28:	87 b9       	out	0x07, r24	; 7
	WAIT r24,26
    2b2a:	88 e0       	ldi	r24, 0x08	; 8
    2b2c:	8a 95       	dec	r24
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <mycallback+0x6>
    2b30:	00 00       	nop
    2b32:	00 00       	nop
	ret
    2b34:	08 95       	ret

00002b36 <OutStringXYProgmemFastC>:


OutStringXYProgmemFastC:

	movw	r30, r20
    2b36:	fa 01       	movw	r30, r20

00002b38 <OutStringXYProgmemFastCLoop>:
OutStringXYProgmemFastCLoop:
	lpm		r20, Z+
    2b38:	45 91       	lpm	r20, Z+
	tst		r20
    2b3a:	44 23       	and	r20, r20
	breq	OutStringXYProgmemFastCEnd
    2b3c:	29 f0       	breq	.+10     	; 0x2b48 <OutStringXYProgmemFastCEnd>
	movw	r18, r30
    2b3e:	9f 01       	movw	r18, r30
	rcall	OutCharXYFastC		; Put the low nibble to the screen
    2b40:	4f d0       	rcall	.+158    	; 0x2be0 <OutCharXYFastC>
	movw	r30, r18
    2b42:	f9 01       	movw	r30, r18
	inc		r24
    2b44:	83 95       	inc	r24
	rjmp	OutStringXYProgmemFastCLoop
    2b46:	f8 cf       	rjmp	.-16     	; 0x2b38 <OutStringXYProgmemFastCLoop>

00002b48 <OutStringXYProgmemFastCEnd>:
OutStringXYProgmemFastCEnd:
	ret
    2b48:	08 95       	ret

00002b4a <LineMode7FastC>:

.global LineMode7FastC
LineMode7FastC:
	cp		r22, r18
    2b4a:	62 17       	cp	r22, r18
	breq	LineMode7FastC_HLine
    2b4c:	b1 f0       	breq	.+44     	; 0x2b7a <LineMode7FastC_HLine>

	ldi		r23, 0x04		
    2b4e:	74 e0       	ldi	r23, 0x04	; 4
	mul		r22, r23		; Mul y0 x4
    2b50:	67 9f       	mul	r22, r23
	
	movw	r30, r0
    2b52:	f0 01       	movw	r30, r0

	subi	r30, lo8(-(Mode7LookupTable))
    2b54:	e4 5b       	subi	r30, 0xB4	; 180
	sbci	r31, hi8(-(Mode7LookupTable))
    2b56:	fa 4f       	sbci	r31, 0xFA	; 250

	lpm		r22, Z+		// New y0
    2b58:	65 91       	lpm	r22, Z+
	lpm		r26, Z+		// X Off
    2b5a:	a5 91       	lpm	r26, Z+
	lpm		r27, Z+		// X MUL
    2b5c:	b5 91       	lpm	r27, Z+

	mul		r24, r27
    2b5e:	8b 9f       	mul	r24, r27
	mov		r24, r1
    2b60:	81 2d       	mov	r24, r1
	add		r24, r26
    2b62:	8a 0f       	add	r24, r26

	mul		r18, r23		; Mul y0 x4
    2b64:	27 9f       	mul	r18, r23
	
	movw	r30, r0
    2b66:	f0 01       	movw	r30, r0

	subi	r30, lo8(-(Mode7LookupTable))
    2b68:	e4 5b       	subi	r30, 0xB4	; 180
	sbci	r31, hi8(-(Mode7LookupTable))
    2b6a:	fa 4f       	sbci	r31, 0xFA	; 250

	lpm		r18, Z+		// New y0
    2b6c:	25 91       	lpm	r18, Z+
	lpm		r26, Z+		// X Off
    2b6e:	a5 91       	lpm	r26, Z+
	lpm		r27, Z+		// X MUL
    2b70:	b5 91       	lpm	r27, Z+

	mul		r20, r27
    2b72:	4b 9f       	mul	r20, r27
	mov		r20, r1
    2b74:	41 2d       	mov	r20, r1
	add		r20, r26
    2b76:	4a 0f       	add	r20, r26

	rjmp 	bresh_line_asm
    2b78:	0c c5       	rjmp	.+2584   	; 0x3592 <bresh_line_asm>

00002b7a <LineMode7FastC_HLine>:

LineMode7FastC_HLine:

	ldi		r23, 0x04		
    2b7a:	74 e0       	ldi	r23, 0x04	; 4
	mul		r22, r23		; Mul y0 x4
    2b7c:	67 9f       	mul	r22, r23
	
	movw	r30, r0
    2b7e:	f0 01       	movw	r30, r0

	subi	r30, lo8(-(Mode7LookupTable))
    2b80:	e4 5b       	subi	r30, 0xB4	; 180
	sbci	r31, hi8(-(Mode7LookupTable))
    2b82:	fa 4f       	sbci	r31, 0xFA	; 250

	lpm		r22, Z+		// New y0
    2b84:	65 91       	lpm	r22, Z+
	mov		r18, r22	// Copy into Y2 as is the same
    2b86:	26 2f       	mov	r18, r22

	lpm		r26, Z+		// X Off
    2b88:	a5 91       	lpm	r26, Z+
	lpm		r27, Z+		// X MUL
    2b8a:	b5 91       	lpm	r27, Z+

	mul		r24, r27
    2b8c:	8b 9f       	mul	r24, r27
	mov		r24, r1
    2b8e:	81 2d       	mov	r24, r1
	add		r24, r26
    2b90:	8a 0f       	add	r24, r26


	mul		r20, r27
    2b92:	4b 9f       	mul	r20, r27
	mov		r20, r1
    2b94:	41 2d       	mov	r20, r1
	add		r20, r26
    2b96:	4a 0f       	add	r20, r26

	rjmp 	bresh_line_asm
    2b98:	fc c4       	rjmp	.+2552   	; 0x3592 <bresh_line_asm>

00002b9a <OutDec8XYFastC>:
; Returns 
;		void

OutDec8XYFastC:

	ldi		r23, 0x04
    2b9a:	74 e0       	ldi	r23, 0x04	; 4
	mul		r20, r23
    2b9c:	47 9f       	mul	r20, r23
	movw	r30, r0
    2b9e:	f0 01       	movw	r30, r0
	subi 	r30, lo8(-(Bin2AscTable))		; Add the offset to the FontTable[] array to Z_Register
    2ba0:	e4 53       	subi	r30, 0x34	; 52
    sbci 	r31, hi8(-(Bin2AscTable))		; (Must be 16 bit add as FontTable is not aligned)
    2ba2:	f7 4f       	sbci	r31, 0xF7	; 247

	lpm		r20, Z+
    2ba4:	45 91       	lpm	r20, Z+
	movw	r18, r30
    2ba6:	9f 01       	movw	r18, r30
	rcall	OutCharXYFastC		; Put the low nibble to the screen
    2ba8:	1b d0       	rcall	.+54     	; 0x2be0 <OutCharXYFastC>

	movw	r30, r18
    2baa:	f9 01       	movw	r30, r18
	lpm		r20, Z+
    2bac:	45 91       	lpm	r20, Z+
	movw	r18, r30
    2bae:	9f 01       	movw	r18, r30
	inc		r24
    2bb0:	83 95       	inc	r24
	rcall	OutCharXYFastC		; Put the low nibble to the screen
    2bb2:	16 d0       	rcall	.+44     	; 0x2be0 <OutCharXYFastC>

	movw	r30, r18
    2bb4:	f9 01       	movw	r30, r18
	lpm		r20, Z+
    2bb6:	45 91       	lpm	r20, Z+
	inc		r24
    2bb8:	83 95       	inc	r24
	rcall	OutCharXYFastC		; Put the low nibble to the screen
    2bba:	12 d0       	rcall	.+36     	; 0x2be0 <OutCharXYFastC>


	ret
    2bbc:	08 95       	ret

00002bbe <OutHex8XYFastC>:
;		R30:31


OutHex8XYFastC:

	mov		r19, r20			; Save a copy of the HEX byte we are printing to R19
    2bbe:	34 2f       	mov	r19, r20
	swap	r20					; swap high and low nibble
    2bc0:	42 95       	swap	r20
	andi	r20, 0b00001111		; clear out the high nibble
    2bc2:	4f 70       	andi	r20, 0x0F	; 15
	subi	r20, (-(0x30))		; Add 0x30 to low nibble (0..9 + 0x30 = "0".."9" ASCII)
    2bc4:	40 5d       	subi	r20, 0xD0	; 208
	cpi		r20, 0x3A			; See if the result is > "9" ASCII
    2bc6:	4a 33       	cpi	r20, 0x3A	; 58
	brlo	OutHex8XYFastCSkip1
    2bc8:	08 f0       	brcs	.+2      	; 0x2bcc <OutHex8XYFastCSkip1>
	subi	r20, (-(0x07))		; and if it is > "9" then add 7 more to it to get to "A".."F"
    2bca:	49 5f       	subi	r20, 0xF9	; 249

00002bcc <OutHex8XYFastCSkip1>:

OutHex8XYFastCSkip1:
	rcall	OutCharXYFastC		; Put the low nibble to the screen
    2bcc:	09 d0       	rcall	.+18     	; 0x2be0 <OutCharXYFastC>

	inc		r24					; move to the next char right to print second nibble
    2bce:	83 95       	inc	r24

	mov		r20, r19			; restore the copy of the HEX byte we are printing to R20
    2bd0:	43 2f       	mov	r20, r19
	andi	r20, 0b00001111		; clear out the high nibble
    2bd2:	4f 70       	andi	r20, 0x0F	; 15
	subi	r20, (-(0x30))		; Add 0x30 to low nibble (0..9 + 0x30 = "0".."9" ASCII)
    2bd4:	40 5d       	subi	r20, 0xD0	; 208
	cpi		r20, 0x3A			; See if the result is > "9" ASCII
    2bd6:	4a 33       	cpi	r20, 0x3A	; 58
	brlo	OutHex8XYFastCSkip2
    2bd8:	08 f0       	brcs	.+2      	; 0x2bdc <OutHex8XYFastCSkip2>
	subi	r20, (-(0x07))		; and if it is > "9" then add 7 more to it to get to "A".."F"
    2bda:	49 5f       	subi	r20, 0xF9	; 249

00002bdc <OutHex8XYFastCSkip2>:

OutHex8XYFastCSkip2:
	rcall	OutCharXYFastC		; Put the low nibble to the screen
    2bdc:	01 d0       	rcall	.+2      	; 0x2be0 <OutCharXYFastC>

	ret
    2bde:	08 95       	ret

00002be0 <OutCharXYFastC>:
;
; NOTE:	 Other ASM routines rely on this routine only trashing the above Regs
; 		 Modify this behaviour and you are on your own.

OutCharXYFastC:
	cpi		r24, 32						; Make Sure X is not out of bounds
    2be0:	80 32       	cpi	r24, 0x20	; 32
	brge	OutCharXYFastCFail1			; Fail if it is
    2be2:	64 f5       	brge	.+88     	; 0x2c3c <OutCharXYFastCFail1>
	cpi		r22, 28						; Make Sure X is not out of bounds
    2be4:	6c 31       	cpi	r22, 0x1C	; 28
	brge	OutCharXYFastCFail1			; Fail if it is
    2be6:	54 f5       	brge	.+84     	; 0x2c3c <OutCharXYFastCFail1>
	ldi		r23, 0x20
    2be8:	70 e2       	ldi	r23, 0x20	; 32
	mul		r22, r23					; Multiply Y*32
    2bea:	67 9f       	mul	r22, r23
	movw	r26, r0
    2bec:	d0 01       	movw	r26, r0
	add		r26, r24					; Add X
    2bee:	a8 0f       	add	r26, r24
	subi	r27, hi8(-(vram))			; Add VRAM offset
    2bf0:	b4 5f       	subi	r27, 0xF4	; 244

	ld		r21, X						; Load R21 = vram[X+Y*32]
    2bf2:	5c 91       	ld	r21, X
	tst		r21
    2bf4:	55 23       	and	r21, r21
	brne	OutCharXYFastCAllocated		; if R24 <> 0 then exit
    2bf6:	49 f4       	brne	.+18     	; 0x2c0a <OutCharXYFastCAllocated>

    lds     r21,nextFreeRamTile         ; If not allocated then we need to get # of the next free tile
    2bf8:	50 91 10 01 	lds	r21, 0x0110
    cpi     r21,(RAM_TILES_COUNT-1)     ; make sure we have not run out of ram tiles
    2bfc:	5f 3f       	cpi	r21, 0xFF	; 255
    breq    OutCharXYFastCFail2			; If we have run out then FAIL
    2bfe:	e9 f0       	breq	.+58     	; 0x2c3a <OutCharXYFastCFail2>

    st		X, r21						; Save the newly allocated tile to vram[X+Y*32]
    2c00:	5c 93       	st	X, r21

	inc     r21                         ; Save the new value of "next free" into
    2c02:	53 95       	inc	r21
    sts     nextFreeRamTile, r21
    2c04:	50 93 10 01 	sts	0x0110, r21
    dec     r21                         ; undo the INC two lines above because we want to know THIS not next
    2c08:	5a 95       	dec	r21

00002c0a <OutCharXYFastCAllocated>:

OutCharXYFastCAllocated:

	ldi		r23, 0x08					; Multiply the ramTileNumber *8
    2c0a:	78 e0       	ldi	r23, 0x08	; 8
	mul		r21, r23
    2c0c:	57 9f       	mul	r21, r23
	movw	r26, r0						; Save that result into the X_Register
    2c0e:	d0 01       	movw	r26, r0
	subi	r27, hi8(-(ramTiles))		; Add the offset to the ramTile[] array to X_Register
    2c10:	bc 5f       	subi	r27, 0xFC	; 252

	mul		r20, r23					; Multiply the Char_Number *8
    2c12:	47 9f       	mul	r20, r23
	movw	r30, r0						; and move the result to the Z_Register
    2c14:	f0 01       	movw	r30, r0
	subi 	r30, lo8(-(FontTable))		; Add the offset to the FontTable[] array to Z_Register
    2c16:	e4 53       	subi	r30, 0x34	; 52
    sbci 	r31, hi8(-(FontTable))		;		(Must be 16 bit add as FontTable is not aligned)
    2c18:	f3 4f       	sbci	r31, 0xF3	; 243

	lpm		r0, Z+						; copy 8 bytes from program memory to ram
    2c1a:	05 90       	lpm	r0, Z+
	st		X+, r0 
    2c1c:	0d 92       	st	X+, r0
	lpm		r0, Z+
    2c1e:	05 90       	lpm	r0, Z+
	st		X+, r0 
    2c20:	0d 92       	st	X+, r0
	lpm		r0, Z+
    2c22:	05 90       	lpm	r0, Z+
	st		X+, r0 
    2c24:	0d 92       	st	X+, r0
	lpm		r0, Z+
    2c26:	05 90       	lpm	r0, Z+
	st		X+, r0 
    2c28:	0d 92       	st	X+, r0
	lpm		r0, Z+
    2c2a:	05 90       	lpm	r0, Z+
	st		X+, r0 
    2c2c:	0d 92       	st	X+, r0
	lpm		r0, Z+
    2c2e:	05 90       	lpm	r0, Z+
	st		X+, r0 
    2c30:	0d 92       	st	X+, r0
	lpm		r0, Z+
    2c32:	05 90       	lpm	r0, Z+
	st		X+, r0 
    2c34:	0d 92       	st	X+, r0
	lpm		r0, Z+
    2c36:	05 90       	lpm	r0, Z+
	st		X+, r0 
    2c38:	0d 92       	st	X+, r0

00002c3a <OutCharXYFastCFail2>:

OutCharXYFastCFail2:
	clr		r1							; restore (zero) for C after it was trashed by MUL
    2c3a:	11 24       	eor	r1, r1

00002c3c <OutCharXYFastCFail1>:
OutCharXYFastCFail1:
	ret
    2c3c:	08 95       	ret

00002c3e <GetRamTileFastC>:
;		R24
;		R26:27
;

GetRamTileFastC:
	cpi		r24, 32						; Make Sure X is not out of bounds
    2c3e:	80 32       	cpi	r24, 0x20	; 32
	brge	GetRamTileFastCFail			; Fail if it is
    2c40:	ac f4       	brge	.+42     	; 0x2c6c <GetRamTileFastCFail>
	cpi		r22, 28						; Make Sure X is not out of bounds
    2c42:	6c 31       	cpi	r22, 0x1C	; 28
	brge	GetRamTileFastCFail			; Fail if it is
    2c44:	9c f4       	brge	.+38     	; 0x2c6c <GetRamTileFastCFail>
	ldi		r23, 0x20
    2c46:	70 e2       	ldi	r23, 0x20	; 32
	mul		r22, r23					; Multiply Y*32 (0x20)
    2c48:	67 9f       	mul	r22, r23
	movw	r26, r0						; Move the result of (Y*32) into Z-Register
    2c4a:	d0 01       	movw	r26, r0
	add		r26, r24					; Add c_char to the Z-Register
    2c4c:	a8 0f       	add	r26, r24
	subi	r27, hi8(-(vram))			; Add VRAM offset to the high byte of Z-Register
    2c4e:	b4 5f       	subi	r27, 0xF4	; 244
	clr		r1
    2c50:	11 24       	eor	r1, r1
	ld		r24, X						; Load R24 = vram[X + Y*32]
    2c52:	8c 91       	ld	r24, X
	tst		r24
    2c54:	88 23       	and	r24, r24
	brne	GetRamTileFastCAllocated	; if R24 <> 0 then return R24 (exit as success)
    2c56:	49 f4       	brne	.+18     	; 0x2c6a <GetRamTileFastCAllocated>

    lds     r24,nextFreeRamTile         ; If not allocated then we need to get # of the next free tile
    2c58:	80 91 10 01 	lds	r24, 0x0110
    cpi     r24,(RAM_TILES_COUNT-1)     ; make sure we have not run out of ram tiles
    2c5c:	8f 3f       	cpi	r24, 0xFF	; 255
    breq    GetRamTileFastCFail			; If we have run out then FAIL
    2c5e:	31 f0       	breq	.+12     	; 0x2c6c <GetRamTileFastCFail>

    st		X, r24						; Save the newly allocated tile to vram[X+Y*32]
    2c60:	8c 93       	st	X, r24

	inc     r24                         ; Save the new value of "next free" into variable
    2c62:	83 95       	inc	r24
    sts     nextFreeRamTile, r24
    2c64:	80 93 10 01 	sts	0x0110, r24
    dec     r24                         ; undo the INC two lines above because we want to know THIS not next
    2c68:	8a 95       	dec	r24

00002c6a <GetRamTileFastCAllocated>:
GetRamTileFastCAllocated:
	ret
    2c6a:	08 95       	ret

00002c6c <GetRamTileFastCFail>:
GetRamTileFastCFail:
	ldi		r24, 0
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
	ret
    2c6e:	08 95       	ret

00002c70 <SetPixelFastC>:
;		R26:27


SetPixelFastC:

	cpi		r22, 224			; Make sure we are not trying to plot a pixel out out bounds
    2c70:	60 3e       	cpi	r22, 0xE0	; 224
	brsh	SPF_Fail			; if so fail
    2c72:	38 f5       	brcc	.+78     	; 0x2cc2 <SPF_Fail>

    mov     r25,r22             ; Mov Y from r22 to r25 so they are in consecutive regs R24/25
    2c74:	96 2f       	mov	r25, r22

    movw    r26,r24             ; Mov X/Y in to Y-Register (can be trashed). Y is now "VRAM address Hi/Lo"
    2c76:	dc 01       	movw	r26, r24

                                ;                                   r27              r26                Carry
                                ;                                   y7y6y5y4y3y2y1y0 x7x6x5x4x3x2x1x0   -
    lsr     r27                 ;                                   0 y7y6y5y4y3y2y1 x7x6x5x4x3x2x1x0   y0
    2c78:	b6 95       	lsr	r27
    lsr     r27                 ;                                   0 0 y7y6y5y4y3y2 x7x6x5x4x3x2x1x0   y1
    2c7a:	b6 95       	lsr	r27
    lsr     r27                 ;                                   0 0 0 y7y6y5y4y3 x7x6x5x4x3x2x1x0   y2
    2c7c:	b6 95       	lsr	r27

    lsr     r27                 ;                                   0 0 0 0 y7y6y5y4 x7x6x5x4x3x2x1x0   y3
    2c7e:	b6 95       	lsr	r27
    ror     r26                 ;                                   0 0 0 0 y7y6y5y4 y3x7x6x5x4x3x2x1   y3
    2c80:	a7 95       	ror	r26

    lsr     r27                 ;                                   0 0 0 0 0 y7y6y5 x7x6x5x4x3x2x1x0   y4
    2c82:	b6 95       	lsr	r27
    ror     r26                 ;                                   0 0 0 0 0 y7y6y5 y4y3x7x6x5x4x3x2   y4
    2c84:	a7 95       	ror	r26

    lsr     r27                 ;                                   0 0 0 0 0 0 y7y6 y4y3x7x6x5x4x3x2   y5
    2c86:	b6 95       	lsr	r27
    ror     r26                 ;                                   0 0 0 0 0 0 y7y6 y5y4y3x7x6x5x4x3   y5
    2c88:	a7 95       	ror	r26

    ori     r27, hi8(vram)      ; Fixed in linker to 0x0C00         0 0 0 0 1 1 y7y6 y5y4y3x7x6x5x4x3   y5
    2c8a:	bc 60       	ori	r27, 0x0C	; 12
	
    ld      r22, X              ; Get the Tile to use from VRAM address. r22 is now Tile#
    2c8c:	6c 91       	ld	r22, X

    cpi     r22, 0x00           ; See if there is already a tile allocated at this X/Y address
    2c8e:	60 30       	cpi	r22, 0x00	; 0
    brne    SPF_Allocated
    2c90:	49 f4       	brne	.+18     	; 0x2ca4 <SPF_Allocated>

    lds     r22,nextFreeRamTile         ; If not allocated then we need to get # of the next free tile
    2c92:	60 91 10 01 	lds	r22, 0x0110
    cpi     r22,(RAM_TILES_COUNT-1)     ; make sure we have not run out of ram tiles
    2c96:	6f 3f       	cpi	r22, 0xFF	; 255
    breq    SPF_Fail
    2c98:	a1 f0       	breq	.+40     	; 0x2cc2 <SPF_Fail>

    st      X, r22                      ; After alloacting new tile save the # in the VRAM location X/Y
    2c9a:	6c 93       	st	X, r22

    inc     r22                         ; Save the new value of "next free" into
    2c9c:	63 95       	inc	r22
    sts     nextFreeRamTile, r22
    2c9e:	60 93 10 01 	sts	0x0110, r22
    dec     r22                         ; undo the INC two lines above because we want to know THIS not next
    2ca2:	6a 95       	dec	r22

00002ca4 <SPF_Allocated>:

SPF_Allocated:
                                ;                                   R23 / R1         R22 / R0           Carry
                                ;                                   - - - - - - - -  0 t6t5t4t3t2t1t0   -
    ldi     r19, 0x08           ;
    2ca4:	38 e0       	ldi	r19, 0x08	; 8
    mul     r22, r19            ; x8 and leave result in r0/r1      0 0 0 0 0 0 t6t5 t4t3t2t1t0- - -    -
    2ca6:	63 9f       	mul	r22, r19
    andi    r25, 0x07           ; clear r25 to 0 0 0 0 0 y2y1y0
    2ca8:	97 70       	andi	r25, 0x07	; 7
    or      r0, r25             ;                                   0 0 0 0 0 0 t6t5 t4t3t2t1t0y2y1y0   -
    2caa:	09 2a       	or	r0, r25
;   subi    r27, hi8(-(ramTiles))   ; Fixed in linker at 0x0400


                                    ;                               R25              R24                Carry
                                    ;                               0 0 0 0 0 y2y1y0 x7x6x5x4x3x2x1x0   -
    andi    r24, 0b00000111         ;                               0 0 0 0 0 y2y1y0 0 0 0 0 0 x2x1x0   -
    2cac:	87 70       	andi	r24, 0x07	; 7
    ori     r24, lo8(shift_tbl_ram) ;                               0 0 0 0 0 y2y1y0 t7t6t5t4t3x2x1x0   -
    2cae:	88 60       	ori	r24, 0x08	; 8
    ldi     r25, hi8(shift_tbl_ram) ;                               T7T6T5T4T3T2T1T0 t7t6t5t4t3x2x1x0   -
    2cb0:	91 e0       	ldi	r25, 0x01	; 1
	
    movw    r26, r24                ; Get pixel mask			
    2cb2:	dc 01       	movw	r26, r24
    ld      r20, X
    2cb4:	4c 91       	ld	r20, X

    movw    r26, r0             	; Move Tile_Row_Byte_Address into Y from r0/r1 where it was left from MUL
    2cb6:	d0 01       	movw	r26, r0
	
;   NEXT LINE IS DEFERED FROM ABOVE
    subi    r27, hi8(-(ramTiles))
    2cb8:	bc 5f       	subi	r27, 0xFC	; 252
    ld      r21, X              	; Get TileRowByte
    2cba:	5c 91       	ld	r21, X
    or      r21, r20            	; OR TileRowByte with the pixel mask
    2cbc:	54 2b       	or	r21, r20
    st      X, r21              	; write TileRowByte back to memory
    2cbe:	5c 93       	st	X, r21

    clr     r1                 		; clear r1 back to zero after the MUL trashing.
    2cc0:	11 24       	eor	r1, r1

00002cc2 <SPF_Fail>:
	
SPF_Fail:

    ret
    2cc2:	08 95       	ret

00002cc4 <bresh_q1_asm>:
; Apart from that they are bog-standard Bresenham and should not need
; any indepth explanation

bresh_q1_asm:
	; dx = gx1 - gx0
	mov		r21, r20				; Copy gx1 into dx
    2cc4:	54 2f       	mov	r21, r20
	sub		r21, r24				; subtract (without carry)  gx0 from dx (contains gx1)
    2cc6:	58 1b       	sub	r21, r24

	; dy = gy1 - gy0
	mov		r19, r18				; copy gy1 into dy
    2cc8:	32 2f       	mov	r19, r18
	sub		r19, r22				; subtract (without carry) gy0 from dy (contains gy1)
    2cca:	36 1b       	sub	r19, r22

	; if (dx < dy)
	cp		r21, r19
    2ccc:	53 17       	cp	r21, r19
	brge	bresh_q1_shallow		; (not_true) -> ELSE
    2cce:	0c f4       	brge	.+2      	; 0x2cd2 <bresh_q1_shallow>
	rjmp	bresh_q1_steep
    2cd0:	72 c0       	rjmp	.+228    	; 0x2db6 <bresh_q1_steep>

00002cd2 <bresh_q1_shallow>:

bresh_q1_shallow:
	; err = dx >> 1
	mov		r15, r21				; copy dx into err
    2cd2:	f5 2e       	mov	r15, r21
	asr		r15						; dx >> 1
    2cd4:	f5 94       	asr	r15

00002cd6 <bresh_q1_shallow_loop>:

bresh_q1_shallow_loop:
	; err = err - dy
	sub		r15, r19
    2cd6:	f3 1a       	sub	r15, r19
	; gx0++
	inc		r24
    2cd8:	83 95       	inc	r24

	; if (err < 0)
	sbrs	r15, 7						; if bit7 is 1 the result is negative
    2cda:	f7 fe       	sbrs	r15, 7
	rjmp	bresh_q1_shallow_no_minor	; (not_true) -> continue
    2cdc:	45 c0       	rjmp	.+138    	; 0x2d68 <bresh_q1_shallow_no_minor>

00002cde <bresh_q1_shallow_minor>:

bresh_q1_shallow_minor:
	; err = err + dx
	add		r15, r21
    2cde:	f5 0e       	add	r15, r21
	; gy0++
	inc		r22
    2ce0:	63 95       	inc	r22
	; SetPixelFastC(gx0, gy0)
	fast_line_XP_YP
    2ce2:	10 83       	st	Z, r17
    2ce4:	76 95       	lsr	r23
    2ce6:	e8 f4       	brcc	.+58     	; 0x2d22 <bresh_q1_shallow_minor+0x44>
    2ce8:	77 95       	ror	r23
    2cea:	6c 9f       	mul	r22, r28
    2cec:	d0 01       	movw	r26, r0
    2cee:	a0 7e       	andi	r26, 0xE0	; 224
    2cf0:	8d 9f       	mul	r24, r29
    2cf2:	a1 29       	or	r26, r1
    2cf4:	b4 5f       	subi	r27, 0xF4	; 244
    2cf6:	ec 91       	ld	r30, X
    2cf8:	e0 30       	cpi	r30, 0x00	; 0
    2cfa:	51 f4       	brne	.+20     	; 0x2d10 <bresh_q1_shallow_minor+0x32>
    2cfc:	e0 91 10 01 	lds	r30, 0x0110
    2d00:	ef 3f       	cpi	r30, 0xFF	; 255
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <bresh_q1_shallow_minor+0x28>
    2d04:	83 c4       	rjmp	.+2310   	; 0x360c <bresh_pixel>
    2d06:	ec 93       	st	X, r30
    2d08:	e3 95       	inc	r30
    2d0a:	e0 93 10 01 	sts	0x0110, r30
    2d0e:	ea 95       	dec	r30
    2d10:	e9 9f       	mul	r30, r25
    2d12:	e6 2f       	mov	r30, r22
    2d14:	e7 70       	andi	r30, 0x07	; 7
    2d16:	f1 2d       	mov	r31, r1
    2d18:	e0 29       	or	r30, r0
    2d1a:	fc 5f       	subi	r31, 0xFC	; 252
    2d1c:	10 81       	ld	r17, Z
    2d1e:	17 2b       	or	r17, r23
    2d20:	20 c0       	rjmp	.+64     	; 0x2d62 <bresh_q1_shallow_minor+0x84>
    2d22:	10 83       	st	Z, r17
    2d24:	e3 95       	inc	r30
    2d26:	0e 2f       	mov	r16, r30
    2d28:	07 70       	andi	r16, 0x07	; 7
    2d2a:	c9 f4       	brne	.+50     	; 0x2d5e <bresh_q1_shallow_minor+0x80>
    2d2c:	6c 9f       	mul	r22, r28
    2d2e:	d0 01       	movw	r26, r0
    2d30:	a0 7e       	andi	r26, 0xE0	; 224
    2d32:	8d 9f       	mul	r24, r29
    2d34:	a1 29       	or	r26, r1
    2d36:	b4 5f       	subi	r27, 0xF4	; 244
    2d38:	ec 91       	ld	r30, X
    2d3a:	e0 30       	cpi	r30, 0x00	; 0
    2d3c:	51 f4       	brne	.+20     	; 0x2d52 <bresh_q1_shallow_minor+0x74>
    2d3e:	e0 91 10 01 	lds	r30, 0x0110
    2d42:	ef 3f       	cpi	r30, 0xFF	; 255
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <bresh_q1_shallow_minor+0x6a>
    2d46:	62 c4       	rjmp	.+2244   	; 0x360c <bresh_pixel>
    2d48:	ec 93       	st	X, r30
    2d4a:	e3 95       	inc	r30
    2d4c:	e0 93 10 01 	sts	0x0110, r30
    2d50:	ea 95       	dec	r30
    2d52:	e9 9f       	mul	r30, r25
    2d54:	e6 2f       	mov	r30, r22
    2d56:	e7 70       	andi	r30, 0x07	; 7
    2d58:	f1 2d       	mov	r31, r1
    2d5a:	e0 29       	or	r30, r0
    2d5c:	fc 5f       	subi	r31, 0xFC	; 252
    2d5e:	10 81       	ld	r17, Z
    2d60:	17 2b       	or	r17, r23
	; while (gx0 != gx1)
	cp		r24, r20
    2d62:	84 17       	cp	r24, r20
	breq	bresh_q1_shallow_exit
    2d64:	01 f1       	breq	.+64     	; 0x2da6 <bresh_q1_shallow_exit>
	rjmp	bresh_q1_shallow_loop	
    2d66:	b7 cf       	rjmp	.-146    	; 0x2cd6 <bresh_q1_shallow_loop>

00002d68 <bresh_q1_shallow_no_minor>:


bresh_q1_shallow_no_minor:
	; SetPixelFastC(gx0, gy0)
	fast_line_X_plus
    2d68:	76 95       	lsr	r23
    2d6a:	c8 f4       	brcc	.+50     	; 0x2d9e <bresh_q1_shallow_no_minor+0x36>
    2d6c:	77 95       	ror	r23
    2d6e:	10 83       	st	Z, r17
    2d70:	a0 7e       	andi	r26, 0xE0	; 224
    2d72:	8d 9f       	mul	r24, r29
    2d74:	a1 29       	or	r26, r1
    2d76:	ec 91       	ld	r30, X
    2d78:	e0 30       	cpi	r30, 0x00	; 0
    2d7a:	51 f4       	brne	.+20     	; 0x2d90 <bresh_q1_shallow_no_minor+0x28>
    2d7c:	e0 91 10 01 	lds	r30, 0x0110
    2d80:	ef 3f       	cpi	r30, 0xFF	; 255
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <bresh_q1_shallow_no_minor+0x1e>
    2d84:	43 c4       	rjmp	.+2182   	; 0x360c <bresh_pixel>
    2d86:	ec 93       	st	X, r30
    2d88:	e3 95       	inc	r30
    2d8a:	e0 93 10 01 	sts	0x0110, r30
    2d8e:	ea 95       	dec	r30
    2d90:	e9 9f       	mul	r30, r25
    2d92:	e6 2f       	mov	r30, r22
    2d94:	e7 70       	andi	r30, 0x07	; 7
    2d96:	f1 2d       	mov	r31, r1
    2d98:	e0 29       	or	r30, r0
    2d9a:	fc 5f       	subi	r31, 0xFC	; 252
    2d9c:	10 81       	ld	r17, Z
    2d9e:	17 2b       	or	r17, r23


	; while (gx0 != gx1)
	cp		r24, r20
    2da0:	84 17       	cp	r24, r20
	breq	bresh_q1_shallow_exit
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <bresh_q1_shallow_exit>
	rjmp	bresh_q1_shallow_loop	
    2da4:	98 cf       	rjmp	.-208    	; 0x2cd6 <bresh_q1_shallow_loop>

00002da6 <bresh_q1_shallow_exit>:
bresh_q1_shallow_exit:
	fast_line_exit
    2da6:	10 83       	st	Z, r17
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ff 90       	pop	r15
    2db2:	11 24       	eor	r1, r1
	ret
    2db4:	08 95       	ret

00002db6 <bresh_q1_steep>:



bresh_q1_steep:
	; err = dy >> 1
	mov		r15, r19				; copy dy into err
    2db6:	f3 2e       	mov	r15, r19
	asr		r15						; dy >> 1
    2db8:	f5 94       	asr	r15

00002dba <bresh_q1_steep_loop>:

bresh_q1_steep_loop:
	; err = err - dx
	sub		r15, r21
    2dba:	f5 1a       	sub	r15, r21

	; gy0++
	inc		r22
    2dbc:	63 95       	inc	r22

	; if (err < 0)
	sbrs	r15, 7					; if bit7 is 1 the result is negative
    2dbe:	f7 fe       	sbrs	r15, 7
	rjmp	bresh_q1_steep_no_minor	; (not_true) -> continue
    2dc0:	45 c0       	rjmp	.+138    	; 0x2e4c <bresh_q1_steep_no_minor>

00002dc2 <bresh_q1_steep_minor>:

bresh_q1_steep_minor:
	; err = err + dy
	add		r15, r19
    2dc2:	f3 0e       	add	r15, r19
	; gx0++
	inc		r24
    2dc4:	83 95       	inc	r24
	; SetPixelFastC(gx0, gy0)
	fast_line_XP_YP
    2dc6:	10 83       	st	Z, r17
    2dc8:	76 95       	lsr	r23
    2dca:	e8 f4       	brcc	.+58     	; 0x2e06 <bresh_q1_steep_minor+0x44>
    2dcc:	77 95       	ror	r23
    2dce:	6c 9f       	mul	r22, r28
    2dd0:	d0 01       	movw	r26, r0
    2dd2:	a0 7e       	andi	r26, 0xE0	; 224
    2dd4:	8d 9f       	mul	r24, r29
    2dd6:	a1 29       	or	r26, r1
    2dd8:	b4 5f       	subi	r27, 0xF4	; 244
    2dda:	ec 91       	ld	r30, X
    2ddc:	e0 30       	cpi	r30, 0x00	; 0
    2dde:	51 f4       	brne	.+20     	; 0x2df4 <bresh_q1_steep_minor+0x32>
    2de0:	e0 91 10 01 	lds	r30, 0x0110
    2de4:	ef 3f       	cpi	r30, 0xFF	; 255
    2de6:	09 f4       	brne	.+2      	; 0x2dea <bresh_q1_steep_minor+0x28>
    2de8:	11 c4       	rjmp	.+2082   	; 0x360c <bresh_pixel>
    2dea:	ec 93       	st	X, r30
    2dec:	e3 95       	inc	r30
    2dee:	e0 93 10 01 	sts	0x0110, r30
    2df2:	ea 95       	dec	r30
    2df4:	e9 9f       	mul	r30, r25
    2df6:	e6 2f       	mov	r30, r22
    2df8:	e7 70       	andi	r30, 0x07	; 7
    2dfa:	f1 2d       	mov	r31, r1
    2dfc:	e0 29       	or	r30, r0
    2dfe:	fc 5f       	subi	r31, 0xFC	; 252
    2e00:	10 81       	ld	r17, Z
    2e02:	17 2b       	or	r17, r23
    2e04:	20 c0       	rjmp	.+64     	; 0x2e46 <bresh_q1_steep_minor+0x84>
    2e06:	10 83       	st	Z, r17
    2e08:	e3 95       	inc	r30
    2e0a:	0e 2f       	mov	r16, r30
    2e0c:	07 70       	andi	r16, 0x07	; 7
    2e0e:	c9 f4       	brne	.+50     	; 0x2e42 <bresh_q1_steep_minor+0x80>
    2e10:	6c 9f       	mul	r22, r28
    2e12:	d0 01       	movw	r26, r0
    2e14:	a0 7e       	andi	r26, 0xE0	; 224
    2e16:	8d 9f       	mul	r24, r29
    2e18:	a1 29       	or	r26, r1
    2e1a:	b4 5f       	subi	r27, 0xF4	; 244
    2e1c:	ec 91       	ld	r30, X
    2e1e:	e0 30       	cpi	r30, 0x00	; 0
    2e20:	51 f4       	brne	.+20     	; 0x2e36 <bresh_q1_steep_minor+0x74>
    2e22:	e0 91 10 01 	lds	r30, 0x0110
    2e26:	ef 3f       	cpi	r30, 0xFF	; 255
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <bresh_q1_steep_minor+0x6a>
    2e2a:	f0 c3       	rjmp	.+2016   	; 0x360c <bresh_pixel>
    2e2c:	ec 93       	st	X, r30
    2e2e:	e3 95       	inc	r30
    2e30:	e0 93 10 01 	sts	0x0110, r30
    2e34:	ea 95       	dec	r30
    2e36:	e9 9f       	mul	r30, r25
    2e38:	e6 2f       	mov	r30, r22
    2e3a:	e7 70       	andi	r30, 0x07	; 7
    2e3c:	f1 2d       	mov	r31, r1
    2e3e:	e0 29       	or	r30, r0
    2e40:	fc 5f       	subi	r31, 0xFC	; 252
    2e42:	10 81       	ld	r17, Z
    2e44:	17 2b       	or	r17, r23
	; while (gy0 != gy1)
	cp		r22, r18
    2e46:	62 17       	cp	r22, r18
	breq	bresh_q1_steep_exit
    2e48:	21 f1       	breq	.+72     	; 0x2e92 <bresh_q1_steep_exit>
	rjmp	bresh_q1_steep_loop
    2e4a:	b7 cf       	rjmp	.-146    	; 0x2dba <bresh_q1_steep_loop>

00002e4c <bresh_q1_steep_no_minor>:


bresh_q1_steep_no_minor:
	; SetPixelFastC(gx0, gy0)
	fast_line_Y_plus
    2e4c:	10 83       	st	Z, r17
    2e4e:	e3 95       	inc	r30
    2e50:	0e 2f       	mov	r16, r30
    2e52:	07 70       	andi	r16, 0x07	; 7
    2e54:	c9 f4       	brne	.+50     	; 0x2e88 <bresh_q1_steep_no_minor+0x3c>
    2e56:	6c 9f       	mul	r22, r28
    2e58:	d0 01       	movw	r26, r0
    2e5a:	a0 7e       	andi	r26, 0xE0	; 224
    2e5c:	8d 9f       	mul	r24, r29
    2e5e:	a1 29       	or	r26, r1
    2e60:	b4 5f       	subi	r27, 0xF4	; 244
    2e62:	ec 91       	ld	r30, X
    2e64:	e0 30       	cpi	r30, 0x00	; 0
    2e66:	51 f4       	brne	.+20     	; 0x2e7c <bresh_q1_steep_no_minor+0x30>
    2e68:	e0 91 10 01 	lds	r30, 0x0110
    2e6c:	ef 3f       	cpi	r30, 0xFF	; 255
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <bresh_q1_steep_no_minor+0x26>
    2e70:	cd c3       	rjmp	.+1946   	; 0x360c <bresh_pixel>
    2e72:	ec 93       	st	X, r30
    2e74:	e3 95       	inc	r30
    2e76:	e0 93 10 01 	sts	0x0110, r30
    2e7a:	ea 95       	dec	r30
    2e7c:	e9 9f       	mul	r30, r25
    2e7e:	e6 2f       	mov	r30, r22
    2e80:	e7 70       	andi	r30, 0x07	; 7
    2e82:	f1 2d       	mov	r31, r1
    2e84:	e0 29       	or	r30, r0
    2e86:	fc 5f       	subi	r31, 0xFC	; 252
    2e88:	10 81       	ld	r17, Z
    2e8a:	17 2b       	or	r17, r23


	; while (gy0 != gy1)
	cp		r22, r18
    2e8c:	62 17       	cp	r22, r18
	breq	bresh_q1_steep_exit
    2e8e:	09 f0       	breq	.+2      	; 0x2e92 <bresh_q1_steep_exit>
	rjmp	bresh_q1_steep_loop	
    2e90:	94 cf       	rjmp	.-216    	; 0x2dba <bresh_q1_steep_loop>

00002e92 <bresh_q1_steep_exit>:

bresh_q1_steep_exit:
	fast_line_exit
    2e92:	10 83       	st	Z, r17
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	ff 90       	pop	r15
    2e9e:	11 24       	eor	r1, r1
	ret
    2ea0:	08 95       	ret

00002ea2 <bresh_q2_asm>:


bresh_q2_asm:
	; dx = gx0 - gx1
	mov		r21, r24				; Copy gx0 into dx
    2ea2:	58 2f       	mov	r21, r24
	sub		r21, r20				; subtract (without carry)  gx1 from dx (contains gx0)
    2ea4:	54 1b       	sub	r21, r20

	; dy = gy1 - gy0
	mov		r19, r18				; copy gy1 into dy
    2ea6:	32 2f       	mov	r19, r18
	sub		r19, r22				; subtract (without carry) gy0 from dy (contains gy1)
    2ea8:	36 1b       	sub	r19, r22

	; if (dx < dy)
	cp		r21, r19
    2eaa:	53 17       	cp	r21, r19
	brge	bresh_q2_shallow		; (not_true) -> ELSE
    2eac:	0c f4       	brge	.+2      	; 0x2eb0 <bresh_q2_shallow>
	rjmp	bresh_q2_steep
    2eae:	72 c0       	rjmp	.+228    	; 0x2f94 <bresh_q2_steep>

00002eb0 <bresh_q2_shallow>:

bresh_q2_shallow:
	; err = dx >> 1
	mov		r15, r21				; copy dx into err
    2eb0:	f5 2e       	mov	r15, r21
	asr		r15						; dx >> 1
    2eb2:	f5 94       	asr	r15

00002eb4 <bresh_q2_shallow_loop>:

bresh_q2_shallow_loop:
	; err = err - dy
	sub		r15, r19
    2eb4:	f3 1a       	sub	r15, r19
	; gx0--
	dec		r24
    2eb6:	8a 95       	dec	r24

	; if (err < 0)
	sbrs	r15, 7						; if bit7 is 1 the result is negative
    2eb8:	f7 fe       	sbrs	r15, 7
	rjmp	bresh_q2_shallow_no_minor	; (not_true) -> continue
    2eba:	45 c0       	rjmp	.+138    	; 0x2f46 <bresh_q2_shallow_no_minor>

00002ebc <bresh_q2_shallow_minor>:

bresh_q2_shallow_minor:
	; err = err + dx
	add		r15, r21
    2ebc:	f5 0e       	add	r15, r21
	; gy0++
	inc		r22
    2ebe:	63 95       	inc	r22
	; SetPixelFastC(gx0, gy0)
	fast_line_XM_YP
    2ec0:	10 83       	st	Z, r17
    2ec2:	77 0f       	add	r23, r23
    2ec4:	e8 f4       	brcc	.+58     	; 0x2f00 <bresh_q2_shallow_minor+0x44>
    2ec6:	77 1f       	adc	r23, r23
    2ec8:	6c 9f       	mul	r22, r28
    2eca:	d0 01       	movw	r26, r0
    2ecc:	a0 7e       	andi	r26, 0xE0	; 224
    2ece:	8d 9f       	mul	r24, r29
    2ed0:	a1 29       	or	r26, r1
    2ed2:	b4 5f       	subi	r27, 0xF4	; 244
    2ed4:	ec 91       	ld	r30, X
    2ed6:	e0 30       	cpi	r30, 0x00	; 0
    2ed8:	51 f4       	brne	.+20     	; 0x2eee <bresh_q2_shallow_minor+0x32>
    2eda:	e0 91 10 01 	lds	r30, 0x0110
    2ede:	ef 3f       	cpi	r30, 0xFF	; 255
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <bresh_q2_shallow_minor+0x28>
    2ee2:	94 c3       	rjmp	.+1832   	; 0x360c <bresh_pixel>
    2ee4:	ec 93       	st	X, r30
    2ee6:	e3 95       	inc	r30
    2ee8:	e0 93 10 01 	sts	0x0110, r30
    2eec:	ea 95       	dec	r30
    2eee:	e9 9f       	mul	r30, r25
    2ef0:	e6 2f       	mov	r30, r22
    2ef2:	e7 70       	andi	r30, 0x07	; 7
    2ef4:	f1 2d       	mov	r31, r1
    2ef6:	e0 29       	or	r30, r0
    2ef8:	fc 5f       	subi	r31, 0xFC	; 252
    2efa:	10 81       	ld	r17, Z
    2efc:	17 2b       	or	r17, r23
    2efe:	20 c0       	rjmp	.+64     	; 0x2f40 <bresh_q2_shallow_minor+0x84>
    2f00:	10 83       	st	Z, r17
    2f02:	e3 95       	inc	r30
    2f04:	0e 2f       	mov	r16, r30
    2f06:	07 70       	andi	r16, 0x07	; 7
    2f08:	c9 f4       	brne	.+50     	; 0x2f3c <bresh_q2_shallow_minor+0x80>
    2f0a:	6c 9f       	mul	r22, r28
    2f0c:	d0 01       	movw	r26, r0
    2f0e:	a0 7e       	andi	r26, 0xE0	; 224
    2f10:	8d 9f       	mul	r24, r29
    2f12:	a1 29       	or	r26, r1
    2f14:	b4 5f       	subi	r27, 0xF4	; 244
    2f16:	ec 91       	ld	r30, X
    2f18:	e0 30       	cpi	r30, 0x00	; 0
    2f1a:	51 f4       	brne	.+20     	; 0x2f30 <bresh_q2_shallow_minor+0x74>
    2f1c:	e0 91 10 01 	lds	r30, 0x0110
    2f20:	ef 3f       	cpi	r30, 0xFF	; 255
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <bresh_q2_shallow_minor+0x6a>
    2f24:	73 c3       	rjmp	.+1766   	; 0x360c <bresh_pixel>
    2f26:	ec 93       	st	X, r30
    2f28:	e3 95       	inc	r30
    2f2a:	e0 93 10 01 	sts	0x0110, r30
    2f2e:	ea 95       	dec	r30
    2f30:	e9 9f       	mul	r30, r25
    2f32:	e6 2f       	mov	r30, r22
    2f34:	e7 70       	andi	r30, 0x07	; 7
    2f36:	f1 2d       	mov	r31, r1
    2f38:	e0 29       	or	r30, r0
    2f3a:	fc 5f       	subi	r31, 0xFC	; 252
    2f3c:	10 81       	ld	r17, Z
    2f3e:	17 2b       	or	r17, r23
	; while (gx0 != gx1)
	cp		r24, r20
    2f40:	84 17       	cp	r24, r20
	breq	bresh_q2_shallow_exit
    2f42:	01 f1       	breq	.+64     	; 0x2f84 <bresh_q2_shallow_exit>
	rjmp	bresh_q2_shallow_loop	
    2f44:	b7 cf       	rjmp	.-146    	; 0x2eb4 <bresh_q2_shallow_loop>

00002f46 <bresh_q2_shallow_no_minor>:


bresh_q2_shallow_no_minor:
	; SetPixelFastC(gx0, gy0)
	fast_line_X_minus
    2f46:	77 0f       	add	r23, r23
    2f48:	c8 f4       	brcc	.+50     	; 0x2f7c <bresh_q2_shallow_no_minor+0x36>
    2f4a:	77 1f       	adc	r23, r23
    2f4c:	10 83       	st	Z, r17
    2f4e:	a0 7e       	andi	r26, 0xE0	; 224
    2f50:	8d 9f       	mul	r24, r29
    2f52:	a1 29       	or	r26, r1
    2f54:	ec 91       	ld	r30, X
    2f56:	e0 30       	cpi	r30, 0x00	; 0
    2f58:	51 f4       	brne	.+20     	; 0x2f6e <bresh_q2_shallow_no_minor+0x28>
    2f5a:	e0 91 10 01 	lds	r30, 0x0110
    2f5e:	ef 3f       	cpi	r30, 0xFF	; 255
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <bresh_q2_shallow_no_minor+0x1e>
    2f62:	54 c3       	rjmp	.+1704   	; 0x360c <bresh_pixel>
    2f64:	ec 93       	st	X, r30
    2f66:	e3 95       	inc	r30
    2f68:	e0 93 10 01 	sts	0x0110, r30
    2f6c:	ea 95       	dec	r30
    2f6e:	e9 9f       	mul	r30, r25
    2f70:	e6 2f       	mov	r30, r22
    2f72:	e7 70       	andi	r30, 0x07	; 7
    2f74:	f1 2d       	mov	r31, r1
    2f76:	e0 29       	or	r30, r0
    2f78:	fc 5f       	subi	r31, 0xFC	; 252
    2f7a:	10 81       	ld	r17, Z
    2f7c:	17 2b       	or	r17, r23
	; while (gx0 != gx1)
	cp		r24, r20
    2f7e:	84 17       	cp	r24, r20
	breq	bresh_q2_shallow_exit
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <bresh_q2_shallow_exit>
	rjmp	bresh_q2_shallow_loop	
    2f82:	98 cf       	rjmp	.-208    	; 0x2eb4 <bresh_q2_shallow_loop>

00002f84 <bresh_q2_shallow_exit>:
bresh_q2_shallow_exit:
	fast_line_exit
    2f84:	10 83       	st	Z, r17
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	ff 90       	pop	r15
    2f90:	11 24       	eor	r1, r1
	ret
    2f92:	08 95       	ret

00002f94 <bresh_q2_steep>:


bresh_q2_steep:
	; err = dy >> 1
	mov		r15, r19				; copy dy into err
    2f94:	f3 2e       	mov	r15, r19
	asr		r15						; dy >> 1
    2f96:	f5 94       	asr	r15

00002f98 <bresh_q2_steep_loop>:

bresh_q2_steep_loop:
	; err = err - dx
	sub		r15, r21
    2f98:	f5 1a       	sub	r15, r21
	; gy0++
	inc		r22
    2f9a:	63 95       	inc	r22

	; if (err < 0)
	sbrs	r15, 7					; if bit7 is 1 the result is negative
    2f9c:	f7 fe       	sbrs	r15, 7
	rjmp	bresh_q2_steep_no_minor	; (not_true) -> continue
    2f9e:	45 c0       	rjmp	.+138    	; 0x302a <bresh_q2_steep_no_minor>

00002fa0 <bresh_q2_steep_minor>:

bresh_q2_steep_minor:
	; err = err + dy
	add		r15, r19
    2fa0:	f3 0e       	add	r15, r19
	; gx0--
	dec		r24
    2fa2:	8a 95       	dec	r24
	; SetPixelFastC(gx0, gy0)
	fast_line_XM_YP
    2fa4:	10 83       	st	Z, r17
    2fa6:	77 0f       	add	r23, r23
    2fa8:	e8 f4       	brcc	.+58     	; 0x2fe4 <bresh_q2_steep_minor+0x44>
    2faa:	77 1f       	adc	r23, r23
    2fac:	6c 9f       	mul	r22, r28
    2fae:	d0 01       	movw	r26, r0
    2fb0:	a0 7e       	andi	r26, 0xE0	; 224
    2fb2:	8d 9f       	mul	r24, r29
    2fb4:	a1 29       	or	r26, r1
    2fb6:	b4 5f       	subi	r27, 0xF4	; 244
    2fb8:	ec 91       	ld	r30, X
    2fba:	e0 30       	cpi	r30, 0x00	; 0
    2fbc:	51 f4       	brne	.+20     	; 0x2fd2 <bresh_q2_steep_minor+0x32>
    2fbe:	e0 91 10 01 	lds	r30, 0x0110
    2fc2:	ef 3f       	cpi	r30, 0xFF	; 255
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <bresh_q2_steep_minor+0x28>
    2fc6:	22 c3       	rjmp	.+1604   	; 0x360c <bresh_pixel>
    2fc8:	ec 93       	st	X, r30
    2fca:	e3 95       	inc	r30
    2fcc:	e0 93 10 01 	sts	0x0110, r30
    2fd0:	ea 95       	dec	r30
    2fd2:	e9 9f       	mul	r30, r25
    2fd4:	e6 2f       	mov	r30, r22
    2fd6:	e7 70       	andi	r30, 0x07	; 7
    2fd8:	f1 2d       	mov	r31, r1
    2fda:	e0 29       	or	r30, r0
    2fdc:	fc 5f       	subi	r31, 0xFC	; 252
    2fde:	10 81       	ld	r17, Z
    2fe0:	17 2b       	or	r17, r23
    2fe2:	20 c0       	rjmp	.+64     	; 0x3024 <bresh_q2_steep_minor+0x84>
    2fe4:	10 83       	st	Z, r17
    2fe6:	e3 95       	inc	r30
    2fe8:	0e 2f       	mov	r16, r30
    2fea:	07 70       	andi	r16, 0x07	; 7
    2fec:	c9 f4       	brne	.+50     	; 0x3020 <bresh_q2_steep_minor+0x80>
    2fee:	6c 9f       	mul	r22, r28
    2ff0:	d0 01       	movw	r26, r0
    2ff2:	a0 7e       	andi	r26, 0xE0	; 224
    2ff4:	8d 9f       	mul	r24, r29
    2ff6:	a1 29       	or	r26, r1
    2ff8:	b4 5f       	subi	r27, 0xF4	; 244
    2ffa:	ec 91       	ld	r30, X
    2ffc:	e0 30       	cpi	r30, 0x00	; 0
    2ffe:	51 f4       	brne	.+20     	; 0x3014 <bresh_q2_steep_minor+0x74>
    3000:	e0 91 10 01 	lds	r30, 0x0110
    3004:	ef 3f       	cpi	r30, 0xFF	; 255
    3006:	09 f4       	brne	.+2      	; 0x300a <bresh_q2_steep_minor+0x6a>
    3008:	01 c3       	rjmp	.+1538   	; 0x360c <bresh_pixel>
    300a:	ec 93       	st	X, r30
    300c:	e3 95       	inc	r30
    300e:	e0 93 10 01 	sts	0x0110, r30
    3012:	ea 95       	dec	r30
    3014:	e9 9f       	mul	r30, r25
    3016:	e6 2f       	mov	r30, r22
    3018:	e7 70       	andi	r30, 0x07	; 7
    301a:	f1 2d       	mov	r31, r1
    301c:	e0 29       	or	r30, r0
    301e:	fc 5f       	subi	r31, 0xFC	; 252
    3020:	10 81       	ld	r17, Z
    3022:	17 2b       	or	r17, r23
	; while (gy0 != gy1)
	cp		r22, r18
    3024:	62 17       	cp	r22, r18
	breq	bresh_q2_steep_exit
    3026:	21 f1       	breq	.+72     	; 0x3070 <bresh_q2_steep_exit>
	rjmp	bresh_q2_steep_loop	
    3028:	b7 cf       	rjmp	.-146    	; 0x2f98 <bresh_q2_steep_loop>

0000302a <bresh_q2_steep_no_minor>:


bresh_q2_steep_no_minor:
	; SetPixelFastC(gx0, gy0)
	fast_line_Y_plus
    302a:	10 83       	st	Z, r17
    302c:	e3 95       	inc	r30
    302e:	0e 2f       	mov	r16, r30
    3030:	07 70       	andi	r16, 0x07	; 7
    3032:	c9 f4       	brne	.+50     	; 0x3066 <bresh_q2_steep_no_minor+0x3c>
    3034:	6c 9f       	mul	r22, r28
    3036:	d0 01       	movw	r26, r0
    3038:	a0 7e       	andi	r26, 0xE0	; 224
    303a:	8d 9f       	mul	r24, r29
    303c:	a1 29       	or	r26, r1
    303e:	b4 5f       	subi	r27, 0xF4	; 244
    3040:	ec 91       	ld	r30, X
    3042:	e0 30       	cpi	r30, 0x00	; 0
    3044:	51 f4       	brne	.+20     	; 0x305a <bresh_q2_steep_no_minor+0x30>
    3046:	e0 91 10 01 	lds	r30, 0x0110
    304a:	ef 3f       	cpi	r30, 0xFF	; 255
    304c:	09 f4       	brne	.+2      	; 0x3050 <bresh_q2_steep_no_minor+0x26>
    304e:	de c2       	rjmp	.+1468   	; 0x360c <bresh_pixel>
    3050:	ec 93       	st	X, r30
    3052:	e3 95       	inc	r30
    3054:	e0 93 10 01 	sts	0x0110, r30
    3058:	ea 95       	dec	r30
    305a:	e9 9f       	mul	r30, r25
    305c:	e6 2f       	mov	r30, r22
    305e:	e7 70       	andi	r30, 0x07	; 7
    3060:	f1 2d       	mov	r31, r1
    3062:	e0 29       	or	r30, r0
    3064:	fc 5f       	subi	r31, 0xFC	; 252
    3066:	10 81       	ld	r17, Z
    3068:	17 2b       	or	r17, r23
	; while (gy0 != gy1)
	cp		r22, r18
    306a:	62 17       	cp	r22, r18
	breq	bresh_q2_steep_exit
    306c:	09 f0       	breq	.+2      	; 0x3070 <bresh_q2_steep_exit>
	rjmp	bresh_q2_steep_loop	
    306e:	94 cf       	rjmp	.-216    	; 0x2f98 <bresh_q2_steep_loop>

00003070 <bresh_q2_steep_exit>:
bresh_q2_steep_exit:
	fast_line_exit
    3070:	10 83       	st	Z, r17
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	ff 90       	pop	r15
    307c:	11 24       	eor	r1, r1
	ret
    307e:	08 95       	ret

00003080 <bresh_q3_asm>:



bresh_q3_asm:
	; dx = gx0 - gx1
	mov		r21, r24				; Copy gx0 into dx
    3080:	58 2f       	mov	r21, r24
	sub		r21, r20				; subtract (without carry)  gx1 from dx (contains gx0)
    3082:	54 1b       	sub	r21, r20

	; dy = gy0 - gy1
	mov		r19, r22				; copy gy0 into dy
    3084:	36 2f       	mov	r19, r22
	sub		r19, r18				; subtract (without carry) gy1 from dy (contains gy0)
    3086:	32 1b       	sub	r19, r18

	; if (dx < dy)
	cp		r21, r19
    3088:	53 17       	cp	r21, r19
	brge	bresh_q3_shallow		; (not_true) -> ELSE
    308a:	0c f4       	brge	.+2      	; 0x308e <bresh_q3_shallow>
	rjmp	bresh_q3_steep
    308c:	73 c0       	rjmp	.+230    	; 0x3174 <bresh_q3_steep>

0000308e <bresh_q3_shallow>:

bresh_q3_shallow:
	; err = dx >> 1
	mov		r15, r21				; copy dx into err
    308e:	f5 2e       	mov	r15, r21
	asr		r15						; dx >> 1
    3090:	f5 94       	asr	r15

00003092 <bresh_q3_shallow_loop>:

bresh_q3_shallow_loop:
	; err = err - dy
	sub		r15, r19
    3092:	f3 1a       	sub	r15, r19
	; gx0--
	dec		r24
    3094:	8a 95       	dec	r24

	; if (err < 0)
	sbrs	r15, 7						; if bit7 is 1 the result is negative
    3096:	f7 fe       	sbrs	r15, 7
	rjmp	bresh_q3_shallow_no_minor	; (not_true) -> continue
    3098:	46 c0       	rjmp	.+140    	; 0x3126 <bresh_q3_shallow_no_minor>

0000309a <bresh_q3_shallow_minor>:

bresh_q3_shallow_minor:
	; err = err + dx
	add		r15, r21
    309a:	f5 0e       	add	r15, r21
	; gy0--
	dec		r22
    309c:	6a 95       	dec	r22
	; SetPixelFastC(gx0, gy0)
	fast_line_XM_YM
    309e:	10 83       	st	Z, r17
    30a0:	77 0f       	add	r23, r23
    30a2:	e8 f4       	brcc	.+58     	; 0x30de <bresh_q3_shallow_minor+0x44>
    30a4:	77 1f       	adc	r23, r23
    30a6:	6c 9f       	mul	r22, r28
    30a8:	d0 01       	movw	r26, r0
    30aa:	a0 7e       	andi	r26, 0xE0	; 224
    30ac:	8d 9f       	mul	r24, r29
    30ae:	a1 29       	or	r26, r1
    30b0:	b4 5f       	subi	r27, 0xF4	; 244
    30b2:	ec 91       	ld	r30, X
    30b4:	e0 30       	cpi	r30, 0x00	; 0
    30b6:	51 f4       	brne	.+20     	; 0x30cc <bresh_q3_shallow_minor+0x32>
    30b8:	e0 91 10 01 	lds	r30, 0x0110
    30bc:	ef 3f       	cpi	r30, 0xFF	; 255
    30be:	09 f4       	brne	.+2      	; 0x30c2 <bresh_q3_shallow_minor+0x28>
    30c0:	a5 c2       	rjmp	.+1354   	; 0x360c <bresh_pixel>
    30c2:	ec 93       	st	X, r30
    30c4:	e3 95       	inc	r30
    30c6:	e0 93 10 01 	sts	0x0110, r30
    30ca:	ea 95       	dec	r30
    30cc:	e9 9f       	mul	r30, r25
    30ce:	e6 2f       	mov	r30, r22
    30d0:	e7 70       	andi	r30, 0x07	; 7
    30d2:	f1 2d       	mov	r31, r1
    30d4:	e0 29       	or	r30, r0
    30d6:	fc 5f       	subi	r31, 0xFC	; 252
    30d8:	10 81       	ld	r17, Z
    30da:	17 2b       	or	r17, r23
    30dc:	21 c0       	rjmp	.+66     	; 0x3120 <bresh_q3_shallow_minor+0x86>
    30de:	10 83       	st	Z, r17
    30e0:	0e 2f       	mov	r16, r30
    30e2:	07 70       	andi	r16, 0x07	; 7
    30e4:	d1 f4       	brne	.+52     	; 0x311a <bresh_q3_shallow_minor+0x80>
    30e6:	6c 9f       	mul	r22, r28
    30e8:	d0 01       	movw	r26, r0
    30ea:	a0 7e       	andi	r26, 0xE0	; 224
    30ec:	8d 9f       	mul	r24, r29
    30ee:	a1 29       	or	r26, r1
    30f0:	b4 5f       	subi	r27, 0xF4	; 244
    30f2:	ec 91       	ld	r30, X
    30f4:	e0 30       	cpi	r30, 0x00	; 0
    30f6:	51 f4       	brne	.+20     	; 0x310c <bresh_q3_shallow_minor+0x72>
    30f8:	e0 91 10 01 	lds	r30, 0x0110
    30fc:	ef 3f       	cpi	r30, 0xFF	; 255
    30fe:	09 f4       	brne	.+2      	; 0x3102 <bresh_q3_shallow_minor+0x68>
    3100:	85 c2       	rjmp	.+1290   	; 0x360c <bresh_pixel>
    3102:	ec 93       	st	X, r30
    3104:	e3 95       	inc	r30
    3106:	e0 93 10 01 	sts	0x0110, r30
    310a:	ea 95       	dec	r30
    310c:	e9 9f       	mul	r30, r25
    310e:	e6 2f       	mov	r30, r22
    3110:	e7 70       	andi	r30, 0x07	; 7
    3112:	f1 2d       	mov	r31, r1
    3114:	e0 29       	or	r30, r0
    3116:	fc 5f       	subi	r31, 0xFC	; 252
    3118:	01 c0       	rjmp	.+2      	; 0x311c <bresh_q3_shallow_minor+0x82>
    311a:	ea 95       	dec	r30
    311c:	10 81       	ld	r17, Z
    311e:	17 2b       	or	r17, r23
	; while (gx0 != gx1)
	cp		r24, r20
    3120:	84 17       	cp	r24, r20
	breq	bresh_q3_shallow_exit
    3122:	01 f1       	breq	.+64     	; 0x3164 <bresh_q3_shallow_exit>
	rjmp	bresh_q3_shallow_loop	
    3124:	b6 cf       	rjmp	.-148    	; 0x3092 <bresh_q3_shallow_loop>

00003126 <bresh_q3_shallow_no_minor>:


bresh_q3_shallow_no_minor:
	; SetPixelFastC(gx0, gy0)
	fast_line_X_minus
    3126:	77 0f       	add	r23, r23
    3128:	c8 f4       	brcc	.+50     	; 0x315c <bresh_q3_shallow_no_minor+0x36>
    312a:	77 1f       	adc	r23, r23
    312c:	10 83       	st	Z, r17
    312e:	a0 7e       	andi	r26, 0xE0	; 224
    3130:	8d 9f       	mul	r24, r29
    3132:	a1 29       	or	r26, r1
    3134:	ec 91       	ld	r30, X
    3136:	e0 30       	cpi	r30, 0x00	; 0
    3138:	51 f4       	brne	.+20     	; 0x314e <bresh_q3_shallow_no_minor+0x28>
    313a:	e0 91 10 01 	lds	r30, 0x0110
    313e:	ef 3f       	cpi	r30, 0xFF	; 255
    3140:	09 f4       	brne	.+2      	; 0x3144 <bresh_q3_shallow_no_minor+0x1e>
    3142:	64 c2       	rjmp	.+1224   	; 0x360c <bresh_pixel>
    3144:	ec 93       	st	X, r30
    3146:	e3 95       	inc	r30
    3148:	e0 93 10 01 	sts	0x0110, r30
    314c:	ea 95       	dec	r30
    314e:	e9 9f       	mul	r30, r25
    3150:	e6 2f       	mov	r30, r22
    3152:	e7 70       	andi	r30, 0x07	; 7
    3154:	f1 2d       	mov	r31, r1
    3156:	e0 29       	or	r30, r0
    3158:	fc 5f       	subi	r31, 0xFC	; 252
    315a:	10 81       	ld	r17, Z
    315c:	17 2b       	or	r17, r23
	; while (gx0 != gx1)
	cp		r24, r20
    315e:	84 17       	cp	r24, r20
	breq	bresh_q3_shallow_exit
    3160:	09 f0       	breq	.+2      	; 0x3164 <bresh_q3_shallow_exit>
	rjmp	bresh_q3_shallow_loop	
    3162:	97 cf       	rjmp	.-210    	; 0x3092 <bresh_q3_shallow_loop>

00003164 <bresh_q3_shallow_exit>:
bresh_q3_shallow_exit:
	fast_line_exit
    3164:	10 83       	st	Z, r17
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	1f 91       	pop	r17
    316c:	0f 91       	pop	r16
    316e:	ff 90       	pop	r15
    3170:	11 24       	eor	r1, r1
	ret
    3172:	08 95       	ret

00003174 <bresh_q3_steep>:


bresh_q3_steep:
	; err = dy >> 1
	mov		r15, r19				; copy dy into err
    3174:	f3 2e       	mov	r15, r19
	asr		r15						; dy >> 1
    3176:	f5 94       	asr	r15

00003178 <bresh_q3_steep_loop>:

bresh_q3_steep_loop:
	; err = err - dx
	sub		r15, r21
    3178:	f5 1a       	sub	r15, r21
	; gy0--
	dec		r22
    317a:	6a 95       	dec	r22

	; if (err < 0)
	sbrs	r15, 7					; if bit7 is 1 the result is negative
    317c:	f7 fe       	sbrs	r15, 7
	rjmp	bresh_q3_steep_no_minor	; (not_true) -> continue
    317e:	46 c0       	rjmp	.+140    	; 0x320c <bresh_q3_steep_no_minor>

00003180 <bresh_q3_steep_minor>:

bresh_q3_steep_minor:
	; err = err + dy
	add		r15, r19
    3180:	f3 0e       	add	r15, r19
	; gx0--
	dec		r24
    3182:	8a 95       	dec	r24
	; SetPixelFastC(gx0, gy0)
	fast_line_XM_YM
    3184:	10 83       	st	Z, r17
    3186:	77 0f       	add	r23, r23
    3188:	e8 f4       	brcc	.+58     	; 0x31c4 <bresh_q3_steep_minor+0x44>
    318a:	77 1f       	adc	r23, r23
    318c:	6c 9f       	mul	r22, r28
    318e:	d0 01       	movw	r26, r0
    3190:	a0 7e       	andi	r26, 0xE0	; 224
    3192:	8d 9f       	mul	r24, r29
    3194:	a1 29       	or	r26, r1
    3196:	b4 5f       	subi	r27, 0xF4	; 244
    3198:	ec 91       	ld	r30, X
    319a:	e0 30       	cpi	r30, 0x00	; 0
    319c:	51 f4       	brne	.+20     	; 0x31b2 <bresh_q3_steep_minor+0x32>
    319e:	e0 91 10 01 	lds	r30, 0x0110
    31a2:	ef 3f       	cpi	r30, 0xFF	; 255
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <bresh_q3_steep_minor+0x28>
    31a6:	32 c2       	rjmp	.+1124   	; 0x360c <bresh_pixel>
    31a8:	ec 93       	st	X, r30
    31aa:	e3 95       	inc	r30
    31ac:	e0 93 10 01 	sts	0x0110, r30
    31b0:	ea 95       	dec	r30
    31b2:	e9 9f       	mul	r30, r25
    31b4:	e6 2f       	mov	r30, r22
    31b6:	e7 70       	andi	r30, 0x07	; 7
    31b8:	f1 2d       	mov	r31, r1
    31ba:	e0 29       	or	r30, r0
    31bc:	fc 5f       	subi	r31, 0xFC	; 252
    31be:	10 81       	ld	r17, Z
    31c0:	17 2b       	or	r17, r23
    31c2:	21 c0       	rjmp	.+66     	; 0x3206 <bresh_q3_steep_minor+0x86>
    31c4:	10 83       	st	Z, r17
    31c6:	0e 2f       	mov	r16, r30
    31c8:	07 70       	andi	r16, 0x07	; 7
    31ca:	d1 f4       	brne	.+52     	; 0x3200 <bresh_q3_steep_minor+0x80>
    31cc:	6c 9f       	mul	r22, r28
    31ce:	d0 01       	movw	r26, r0
    31d0:	a0 7e       	andi	r26, 0xE0	; 224
    31d2:	8d 9f       	mul	r24, r29
    31d4:	a1 29       	or	r26, r1
    31d6:	b4 5f       	subi	r27, 0xF4	; 244
    31d8:	ec 91       	ld	r30, X
    31da:	e0 30       	cpi	r30, 0x00	; 0
    31dc:	51 f4       	brne	.+20     	; 0x31f2 <bresh_q3_steep_minor+0x72>
    31de:	e0 91 10 01 	lds	r30, 0x0110
    31e2:	ef 3f       	cpi	r30, 0xFF	; 255
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <bresh_q3_steep_minor+0x68>
    31e6:	12 c2       	rjmp	.+1060   	; 0x360c <bresh_pixel>
    31e8:	ec 93       	st	X, r30
    31ea:	e3 95       	inc	r30
    31ec:	e0 93 10 01 	sts	0x0110, r30
    31f0:	ea 95       	dec	r30
    31f2:	e9 9f       	mul	r30, r25
    31f4:	e6 2f       	mov	r30, r22
    31f6:	e7 70       	andi	r30, 0x07	; 7
    31f8:	f1 2d       	mov	r31, r1
    31fa:	e0 29       	or	r30, r0
    31fc:	fc 5f       	subi	r31, 0xFC	; 252
    31fe:	01 c0       	rjmp	.+2      	; 0x3202 <bresh_q3_steep_minor+0x82>
    3200:	ea 95       	dec	r30
    3202:	10 81       	ld	r17, Z
    3204:	17 2b       	or	r17, r23
	; while (gy0 != gy1)
	cp		r22, r18
    3206:	62 17       	cp	r22, r18
	breq	bresh_q3_steep_exit
    3208:	29 f1       	breq	.+74     	; 0x3254 <bresh_q3_steep_exit>
	rjmp	bresh_q3_steep_loop	
    320a:	b6 cf       	rjmp	.-148    	; 0x3178 <bresh_q3_steep_loop>

0000320c <bresh_q3_steep_no_minor>:


bresh_q3_steep_no_minor:
	; SetPixelFastC(gx0, gy0)
	fast_line_Y_minus
    320c:	10 83       	st	Z, r17
    320e:	0e 2f       	mov	r16, r30
    3210:	07 70       	andi	r16, 0x07	; 7
    3212:	d1 f4       	brne	.+52     	; 0x3248 <bresh_q3_steep_no_minor+0x3c>
    3214:	6c 9f       	mul	r22, r28
    3216:	d0 01       	movw	r26, r0
    3218:	a0 7e       	andi	r26, 0xE0	; 224
    321a:	8d 9f       	mul	r24, r29
    321c:	a1 29       	or	r26, r1
    321e:	b4 5f       	subi	r27, 0xF4	; 244
    3220:	ec 91       	ld	r30, X
    3222:	e0 30       	cpi	r30, 0x00	; 0
    3224:	51 f4       	brne	.+20     	; 0x323a <bresh_q3_steep_no_minor+0x2e>
    3226:	e0 91 10 01 	lds	r30, 0x0110
    322a:	ef 3f       	cpi	r30, 0xFF	; 255
    322c:	09 f4       	brne	.+2      	; 0x3230 <bresh_q3_steep_no_minor+0x24>
    322e:	ee c1       	rjmp	.+988    	; 0x360c <bresh_pixel>
    3230:	ec 93       	st	X, r30
    3232:	e3 95       	inc	r30
    3234:	e0 93 10 01 	sts	0x0110, r30
    3238:	ea 95       	dec	r30
    323a:	e9 9f       	mul	r30, r25
    323c:	e6 2f       	mov	r30, r22
    323e:	e7 70       	andi	r30, 0x07	; 7
    3240:	f1 2d       	mov	r31, r1
    3242:	e0 29       	or	r30, r0
    3244:	fc 5f       	subi	r31, 0xFC	; 252
    3246:	01 c0       	rjmp	.+2      	; 0x324a <bresh_q3_steep_no_minor+0x3e>
    3248:	ea 95       	dec	r30
    324a:	10 81       	ld	r17, Z
    324c:	17 2b       	or	r17, r23
	; while (gy0 != gy1)
	cp		r22, r18
    324e:	62 17       	cp	r22, r18
	breq	bresh_q3_steep_exit
    3250:	09 f0       	breq	.+2      	; 0x3254 <bresh_q3_steep_exit>
	rjmp	bresh_q3_steep_loop	
    3252:	92 cf       	rjmp	.-220    	; 0x3178 <bresh_q3_steep_loop>

00003254 <bresh_q3_steep_exit>:
bresh_q3_steep_exit:
	fast_line_exit
    3254:	10 83       	st	Z, r17
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	11 24       	eor	r1, r1
	ret
    3262:	08 95       	ret

00003264 <bresh_q4_asm>:


bresh_q4_asm:
	; dx = gx1 - gx0
	mov		r21, r20				; Copy gx1 into dx
    3264:	54 2f       	mov	r21, r20
	sub		r21, r24				; subtract (without carry)  gx0 from dx (contains gx1)
    3266:	58 1b       	sub	r21, r24

	; dy = gy0 - gy1
	mov		r19, r22				; copy gy0 into dy
    3268:	36 2f       	mov	r19, r22
	sub		r19, r18				; subtract (without carry) gy1 from dy (contains gy0)
    326a:	32 1b       	sub	r19, r18

	; if (dx < dy)
	cp		r21, r19
    326c:	53 17       	cp	r21, r19
	brge	bresh_q4_shallow		; (not_true) -> ELSE
    326e:	0c f4       	brge	.+2      	; 0x3272 <bresh_q4_shallow>
	rjmp	bresh_q4_steep
    3270:	73 c0       	rjmp	.+230    	; 0x3358 <bresh_q4_steep>

00003272 <bresh_q4_shallow>:

bresh_q4_shallow:
	; err = dx >> 1
	mov		r15, r21				; copy dx into err
    3272:	f5 2e       	mov	r15, r21
	asr		r15						; dx >> 1
    3274:	f5 94       	asr	r15

00003276 <bresh_q4_shallow_loop>:

bresh_q4_shallow_loop:
	; err = err - dy
	sub		r15, r19
    3276:	f3 1a       	sub	r15, r19
	; gx0++
	inc		r24
    3278:	83 95       	inc	r24

	; if (err < 0)
	sbrs	r15, 7						; if bit7 is 1 the result is negative
    327a:	f7 fe       	sbrs	r15, 7
	rjmp	bresh_q4_shallow_no_minor	; (not_true) -> continue
    327c:	46 c0       	rjmp	.+140    	; 0x330a <bresh_q4_shallow_no_minor>

0000327e <bresh_q4_shallow_minor>:

bresh_q4_shallow_minor:
	; err = err + dx
	add		r15, r21
    327e:	f5 0e       	add	r15, r21
	; gy0--
	dec		r22
    3280:	6a 95       	dec	r22
	; SetPixelFastC(gx0, gy0)
	fast_line_XP_YM
    3282:	10 83       	st	Z, r17
    3284:	76 95       	lsr	r23
    3286:	e8 f4       	brcc	.+58     	; 0x32c2 <bresh_q4_shallow_minor+0x44>
    3288:	77 95       	ror	r23
    328a:	6c 9f       	mul	r22, r28
    328c:	d0 01       	movw	r26, r0
    328e:	a0 7e       	andi	r26, 0xE0	; 224
    3290:	8d 9f       	mul	r24, r29
    3292:	a1 29       	or	r26, r1
    3294:	b4 5f       	subi	r27, 0xF4	; 244
    3296:	ec 91       	ld	r30, X
    3298:	e0 30       	cpi	r30, 0x00	; 0
    329a:	51 f4       	brne	.+20     	; 0x32b0 <bresh_q4_shallow_minor+0x32>
    329c:	e0 91 10 01 	lds	r30, 0x0110
    32a0:	ef 3f       	cpi	r30, 0xFF	; 255
    32a2:	09 f4       	brne	.+2      	; 0x32a6 <bresh_q4_shallow_minor+0x28>
    32a4:	b3 c1       	rjmp	.+870    	; 0x360c <bresh_pixel>
    32a6:	ec 93       	st	X, r30
    32a8:	e3 95       	inc	r30
    32aa:	e0 93 10 01 	sts	0x0110, r30
    32ae:	ea 95       	dec	r30
    32b0:	e9 9f       	mul	r30, r25
    32b2:	e6 2f       	mov	r30, r22
    32b4:	e7 70       	andi	r30, 0x07	; 7
    32b6:	f1 2d       	mov	r31, r1
    32b8:	e0 29       	or	r30, r0
    32ba:	fc 5f       	subi	r31, 0xFC	; 252
    32bc:	10 81       	ld	r17, Z
    32be:	17 2b       	or	r17, r23
    32c0:	21 c0       	rjmp	.+66     	; 0x3304 <bresh_q4_shallow_minor+0x86>
    32c2:	10 83       	st	Z, r17
    32c4:	0e 2f       	mov	r16, r30
    32c6:	07 70       	andi	r16, 0x07	; 7
    32c8:	d1 f4       	brne	.+52     	; 0x32fe <bresh_q4_shallow_minor+0x80>
    32ca:	6c 9f       	mul	r22, r28
    32cc:	d0 01       	movw	r26, r0
    32ce:	a0 7e       	andi	r26, 0xE0	; 224
    32d0:	8d 9f       	mul	r24, r29
    32d2:	a1 29       	or	r26, r1
    32d4:	b4 5f       	subi	r27, 0xF4	; 244
    32d6:	ec 91       	ld	r30, X
    32d8:	e0 30       	cpi	r30, 0x00	; 0
    32da:	51 f4       	brne	.+20     	; 0x32f0 <bresh_q4_shallow_minor+0x72>
    32dc:	e0 91 10 01 	lds	r30, 0x0110
    32e0:	ef 3f       	cpi	r30, 0xFF	; 255
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <bresh_q4_shallow_minor+0x68>
    32e4:	93 c1       	rjmp	.+806    	; 0x360c <bresh_pixel>
    32e6:	ec 93       	st	X, r30
    32e8:	e3 95       	inc	r30
    32ea:	e0 93 10 01 	sts	0x0110, r30
    32ee:	ea 95       	dec	r30
    32f0:	e9 9f       	mul	r30, r25
    32f2:	e6 2f       	mov	r30, r22
    32f4:	e7 70       	andi	r30, 0x07	; 7
    32f6:	f1 2d       	mov	r31, r1
    32f8:	e0 29       	or	r30, r0
    32fa:	fc 5f       	subi	r31, 0xFC	; 252
    32fc:	01 c0       	rjmp	.+2      	; 0x3300 <bresh_q4_shallow_minor+0x82>
    32fe:	ea 95       	dec	r30
    3300:	10 81       	ld	r17, Z
    3302:	17 2b       	or	r17, r23
	; while (gx0 != gx1)
	cp		r24, r20
    3304:	84 17       	cp	r24, r20
	breq	bresh_q4_shallow_exit
    3306:	01 f1       	breq	.+64     	; 0x3348 <bresh_q4_shallow_exit>
	rjmp	bresh_q4_shallow_loop	
    3308:	b6 cf       	rjmp	.-148    	; 0x3276 <bresh_q4_shallow_loop>

0000330a <bresh_q4_shallow_no_minor>:

bresh_q4_shallow_no_minor:
	; SetPixelFastC(gx0, gy0)
	fast_line_X_plus
    330a:	76 95       	lsr	r23
    330c:	c8 f4       	brcc	.+50     	; 0x3340 <bresh_q4_shallow_no_minor+0x36>
    330e:	77 95       	ror	r23
    3310:	10 83       	st	Z, r17
    3312:	a0 7e       	andi	r26, 0xE0	; 224
    3314:	8d 9f       	mul	r24, r29
    3316:	a1 29       	or	r26, r1
    3318:	ec 91       	ld	r30, X
    331a:	e0 30       	cpi	r30, 0x00	; 0
    331c:	51 f4       	brne	.+20     	; 0x3332 <bresh_q4_shallow_no_minor+0x28>
    331e:	e0 91 10 01 	lds	r30, 0x0110
    3322:	ef 3f       	cpi	r30, 0xFF	; 255
    3324:	09 f4       	brne	.+2      	; 0x3328 <bresh_q4_shallow_no_minor+0x1e>
    3326:	72 c1       	rjmp	.+740    	; 0x360c <bresh_pixel>
    3328:	ec 93       	st	X, r30
    332a:	e3 95       	inc	r30
    332c:	e0 93 10 01 	sts	0x0110, r30
    3330:	ea 95       	dec	r30
    3332:	e9 9f       	mul	r30, r25
    3334:	e6 2f       	mov	r30, r22
    3336:	e7 70       	andi	r30, 0x07	; 7
    3338:	f1 2d       	mov	r31, r1
    333a:	e0 29       	or	r30, r0
    333c:	fc 5f       	subi	r31, 0xFC	; 252
    333e:	10 81       	ld	r17, Z
    3340:	17 2b       	or	r17, r23
	; while (gx0 != gx1)
	cp		r24, r20
    3342:	84 17       	cp	r24, r20
	breq	bresh_q4_shallow_exit
    3344:	09 f0       	breq	.+2      	; 0x3348 <bresh_q4_shallow_exit>
	rjmp	bresh_q4_shallow_loop	
    3346:	97 cf       	rjmp	.-210    	; 0x3276 <bresh_q4_shallow_loop>

00003348 <bresh_q4_shallow_exit>:
bresh_q4_shallow_exit:
	fast_line_exit
    3348:	10 83       	st	Z, r17
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	ff 90       	pop	r15
    3354:	11 24       	eor	r1, r1
	ret
    3356:	08 95       	ret

00003358 <bresh_q4_steep>:


bresh_q4_steep:
	; err = dy >> 1
	mov		r15, r19				; copy dy into err
    3358:	f3 2e       	mov	r15, r19
	asr		r15						; dy >> 1
    335a:	f5 94       	asr	r15

0000335c <bresh_q4_steep_loop>:

bresh_q4_steep_loop:
	; err = err - dx
	sub		r15, r21
    335c:	f5 1a       	sub	r15, r21
	; gy0--
	dec		r22
    335e:	6a 95       	dec	r22

	; if (err < 0)
	sbrs	r15, 7					; if bit7 is 1 the result is negative
    3360:	f7 fe       	sbrs	r15, 7
	rjmp	bresh_q4_steep_no_minor	; (not_true) -> continue
    3362:	46 c0       	rjmp	.+140    	; 0x33f0 <bresh_q4_steep_no_minor>

00003364 <bresh_q4_steep_minor>:

bresh_q4_steep_minor:
	; err = err + dy
	add		r15, r19
    3364:	f3 0e       	add	r15, r19
	; gx0++
	inc		r24
    3366:	83 95       	inc	r24
	; SetPixelFastC(gx0, gy0)
	fast_line_XP_YM
    3368:	10 83       	st	Z, r17
    336a:	76 95       	lsr	r23
    336c:	e8 f4       	brcc	.+58     	; 0x33a8 <bresh_q4_steep_minor+0x44>
    336e:	77 95       	ror	r23
    3370:	6c 9f       	mul	r22, r28
    3372:	d0 01       	movw	r26, r0
    3374:	a0 7e       	andi	r26, 0xE0	; 224
    3376:	8d 9f       	mul	r24, r29
    3378:	a1 29       	or	r26, r1
    337a:	b4 5f       	subi	r27, 0xF4	; 244
    337c:	ec 91       	ld	r30, X
    337e:	e0 30       	cpi	r30, 0x00	; 0
    3380:	51 f4       	brne	.+20     	; 0x3396 <bresh_q4_steep_minor+0x32>
    3382:	e0 91 10 01 	lds	r30, 0x0110
    3386:	ef 3f       	cpi	r30, 0xFF	; 255
    3388:	09 f4       	brne	.+2      	; 0x338c <bresh_q4_steep_minor+0x28>
    338a:	40 c1       	rjmp	.+640    	; 0x360c <bresh_pixel>
    338c:	ec 93       	st	X, r30
    338e:	e3 95       	inc	r30
    3390:	e0 93 10 01 	sts	0x0110, r30
    3394:	ea 95       	dec	r30
    3396:	e9 9f       	mul	r30, r25
    3398:	e6 2f       	mov	r30, r22
    339a:	e7 70       	andi	r30, 0x07	; 7
    339c:	f1 2d       	mov	r31, r1
    339e:	e0 29       	or	r30, r0
    33a0:	fc 5f       	subi	r31, 0xFC	; 252
    33a2:	10 81       	ld	r17, Z
    33a4:	17 2b       	or	r17, r23
    33a6:	21 c0       	rjmp	.+66     	; 0x33ea <bresh_q4_steep_minor+0x86>
    33a8:	10 83       	st	Z, r17
    33aa:	0e 2f       	mov	r16, r30
    33ac:	07 70       	andi	r16, 0x07	; 7
    33ae:	d1 f4       	brne	.+52     	; 0x33e4 <bresh_q4_steep_minor+0x80>
    33b0:	6c 9f       	mul	r22, r28
    33b2:	d0 01       	movw	r26, r0
    33b4:	a0 7e       	andi	r26, 0xE0	; 224
    33b6:	8d 9f       	mul	r24, r29
    33b8:	a1 29       	or	r26, r1
    33ba:	b4 5f       	subi	r27, 0xF4	; 244
    33bc:	ec 91       	ld	r30, X
    33be:	e0 30       	cpi	r30, 0x00	; 0
    33c0:	51 f4       	brne	.+20     	; 0x33d6 <bresh_q4_steep_minor+0x72>
    33c2:	e0 91 10 01 	lds	r30, 0x0110
    33c6:	ef 3f       	cpi	r30, 0xFF	; 255
    33c8:	09 f4       	brne	.+2      	; 0x33cc <bresh_q4_steep_minor+0x68>
    33ca:	20 c1       	rjmp	.+576    	; 0x360c <bresh_pixel>
    33cc:	ec 93       	st	X, r30
    33ce:	e3 95       	inc	r30
    33d0:	e0 93 10 01 	sts	0x0110, r30
    33d4:	ea 95       	dec	r30
    33d6:	e9 9f       	mul	r30, r25
    33d8:	e6 2f       	mov	r30, r22
    33da:	e7 70       	andi	r30, 0x07	; 7
    33dc:	f1 2d       	mov	r31, r1
    33de:	e0 29       	or	r30, r0
    33e0:	fc 5f       	subi	r31, 0xFC	; 252
    33e2:	01 c0       	rjmp	.+2      	; 0x33e6 <bresh_q4_steep_minor+0x82>
    33e4:	ea 95       	dec	r30
    33e6:	10 81       	ld	r17, Z
    33e8:	17 2b       	or	r17, r23
	; while (gy0 != gy1)
	cp		r22, r18
    33ea:	62 17       	cp	r22, r18
	breq	bresh_q4_steep_exit
    33ec:	29 f1       	breq	.+74     	; 0x3438 <bresh_q4_steep_exit>
	rjmp	bresh_q4_steep_loop	
    33ee:	b6 cf       	rjmp	.-148    	; 0x335c <bresh_q4_steep_loop>

000033f0 <bresh_q4_steep_no_minor>:


bresh_q4_steep_no_minor:
	; SetPixelFastC(gx0, gy0)
	fast_line_Y_minus
    33f0:	10 83       	st	Z, r17
    33f2:	0e 2f       	mov	r16, r30
    33f4:	07 70       	andi	r16, 0x07	; 7
    33f6:	d1 f4       	brne	.+52     	; 0x342c <bresh_q4_steep_no_minor+0x3c>
    33f8:	6c 9f       	mul	r22, r28
    33fa:	d0 01       	movw	r26, r0
    33fc:	a0 7e       	andi	r26, 0xE0	; 224
    33fe:	8d 9f       	mul	r24, r29
    3400:	a1 29       	or	r26, r1
    3402:	b4 5f       	subi	r27, 0xF4	; 244
    3404:	ec 91       	ld	r30, X
    3406:	e0 30       	cpi	r30, 0x00	; 0
    3408:	51 f4       	brne	.+20     	; 0x341e <bresh_q4_steep_no_minor+0x2e>
    340a:	e0 91 10 01 	lds	r30, 0x0110
    340e:	ef 3f       	cpi	r30, 0xFF	; 255
    3410:	09 f4       	brne	.+2      	; 0x3414 <bresh_q4_steep_no_minor+0x24>
    3412:	fc c0       	rjmp	.+504    	; 0x360c <bresh_pixel>
    3414:	ec 93       	st	X, r30
    3416:	e3 95       	inc	r30
    3418:	e0 93 10 01 	sts	0x0110, r30
    341c:	ea 95       	dec	r30
    341e:	e9 9f       	mul	r30, r25
    3420:	e6 2f       	mov	r30, r22
    3422:	e7 70       	andi	r30, 0x07	; 7
    3424:	f1 2d       	mov	r31, r1
    3426:	e0 29       	or	r30, r0
    3428:	fc 5f       	subi	r31, 0xFC	; 252
    342a:	01 c0       	rjmp	.+2      	; 0x342e <bresh_q4_steep_no_minor+0x3e>
    342c:	ea 95       	dec	r30
    342e:	10 81       	ld	r17, Z
    3430:	17 2b       	or	r17, r23
	; while (gy0 != gy1)
	cp		r22, r18
    3432:	62 17       	cp	r22, r18
	breq	bresh_q4_steep_exit
    3434:	09 f0       	breq	.+2      	; 0x3438 <bresh_q4_steep_exit>
	rjmp	bresh_q4_steep_loop	
    3436:	92 cf       	rjmp	.-220    	; 0x335c <bresh_q4_steep_loop>

00003438 <bresh_q4_steep_exit>:
bresh_q4_steep_exit:
	fast_line_exit
    3438:	10 83       	st	Z, r17
    343a:	df 91       	pop	r29
    343c:	cf 91       	pop	r28
    343e:	1f 91       	pop	r17
    3440:	0f 91       	pop	r16
    3442:	ff 90       	pop	r15
    3444:	11 24       	eor	r1, r1
	ret
    3446:	08 95       	ret

00003448 <bresh_line_hplus_asm_loop>:
;
; Four routines to cover the four special cases of lines with
; M = 0 or infinity

bresh_line_hplus_asm_loop:
	inc		r24
    3448:	83 95       	inc	r24
	fast_line_X_plus
    344a:	76 95       	lsr	r23
    344c:	c8 f4       	brcc	.+50     	; 0x3480 <bresh_line_hplus_asm_loop+0x38>
    344e:	77 95       	ror	r23
    3450:	10 83       	st	Z, r17
    3452:	a0 7e       	andi	r26, 0xE0	; 224
    3454:	8d 9f       	mul	r24, r29
    3456:	a1 29       	or	r26, r1
    3458:	ec 91       	ld	r30, X
    345a:	e0 30       	cpi	r30, 0x00	; 0
    345c:	51 f4       	brne	.+20     	; 0x3472 <bresh_line_hplus_asm_loop+0x2a>
    345e:	e0 91 10 01 	lds	r30, 0x0110
    3462:	ef 3f       	cpi	r30, 0xFF	; 255
    3464:	09 f4       	brne	.+2      	; 0x3468 <bresh_line_hplus_asm_loop+0x20>
    3466:	d2 c0       	rjmp	.+420    	; 0x360c <bresh_pixel>
    3468:	ec 93       	st	X, r30
    346a:	e3 95       	inc	r30
    346c:	e0 93 10 01 	sts	0x0110, r30
    3470:	ea 95       	dec	r30
    3472:	e9 9f       	mul	r30, r25
    3474:	e6 2f       	mov	r30, r22
    3476:	e7 70       	andi	r30, 0x07	; 7
    3478:	f1 2d       	mov	r31, r1
    347a:	e0 29       	or	r30, r0
    347c:	fc 5f       	subi	r31, 0xFC	; 252
    347e:	10 81       	ld	r17, Z
    3480:	17 2b       	or	r17, r23

00003482 <bresh_line_hplus_asm>:
bresh_line_hplus_asm:
	cp		r20, r24
    3482:	48 17       	cp	r20, r24
	brne	bresh_line_hplus_asm_loop
    3484:	09 f7       	brne	.-62     	; 0x3448 <bresh_line_hplus_asm_loop>
	fast_line_exit
    3486:	10 83       	st	Z, r17
    3488:	df 91       	pop	r29
    348a:	cf 91       	pop	r28
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	ff 90       	pop	r15
    3492:	11 24       	eor	r1, r1
	ret
    3494:	08 95       	ret

00003496 <bresh_line_hminus_asm_loop>:

bresh_line_hminus_asm_loop:
	dec		r24
    3496:	8a 95       	dec	r24
	fast_line_X_minus
    3498:	77 0f       	add	r23, r23
    349a:	c8 f4       	brcc	.+50     	; 0x34ce <bresh_line_hminus_asm_loop+0x38>
    349c:	77 1f       	adc	r23, r23
    349e:	10 83       	st	Z, r17
    34a0:	a0 7e       	andi	r26, 0xE0	; 224
    34a2:	8d 9f       	mul	r24, r29
    34a4:	a1 29       	or	r26, r1
    34a6:	ec 91       	ld	r30, X
    34a8:	e0 30       	cpi	r30, 0x00	; 0
    34aa:	51 f4       	brne	.+20     	; 0x34c0 <bresh_line_hminus_asm_loop+0x2a>
    34ac:	e0 91 10 01 	lds	r30, 0x0110
    34b0:	ef 3f       	cpi	r30, 0xFF	; 255
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <bresh_line_hminus_asm_loop+0x20>
    34b4:	ab c0       	rjmp	.+342    	; 0x360c <bresh_pixel>
    34b6:	ec 93       	st	X, r30
    34b8:	e3 95       	inc	r30
    34ba:	e0 93 10 01 	sts	0x0110, r30
    34be:	ea 95       	dec	r30
    34c0:	e9 9f       	mul	r30, r25
    34c2:	e6 2f       	mov	r30, r22
    34c4:	e7 70       	andi	r30, 0x07	; 7
    34c6:	f1 2d       	mov	r31, r1
    34c8:	e0 29       	or	r30, r0
    34ca:	fc 5f       	subi	r31, 0xFC	; 252
    34cc:	10 81       	ld	r17, Z
    34ce:	17 2b       	or	r17, r23

000034d0 <bresh_line_hminus_asm>:
bresh_line_hminus_asm:
	cp		r20, r24
    34d0:	48 17       	cp	r20, r24
	brne	bresh_line_hminus_asm_loop
    34d2:	09 f7       	brne	.-62     	; 0x3496 <bresh_line_hminus_asm_loop>
	fast_line_exit
    34d4:	10 83       	st	Z, r17
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ff 90       	pop	r15
    34e0:	11 24       	eor	r1, r1
	ret
    34e2:	08 95       	ret

000034e4 <bresh_line_vplus_asm_loop>:

bresh_line_vplus_asm_loop:
	inc		r22
    34e4:	63 95       	inc	r22
	fast_line_Y_plus
    34e6:	10 83       	st	Z, r17
    34e8:	e3 95       	inc	r30
    34ea:	0e 2f       	mov	r16, r30
    34ec:	07 70       	andi	r16, 0x07	; 7
    34ee:	c9 f4       	brne	.+50     	; 0x3522 <bresh_line_vplus_asm_loop+0x3e>
    34f0:	6c 9f       	mul	r22, r28
    34f2:	d0 01       	movw	r26, r0
    34f4:	a0 7e       	andi	r26, 0xE0	; 224
    34f6:	8d 9f       	mul	r24, r29
    34f8:	a1 29       	or	r26, r1
    34fa:	b4 5f       	subi	r27, 0xF4	; 244
    34fc:	ec 91       	ld	r30, X
    34fe:	e0 30       	cpi	r30, 0x00	; 0
    3500:	51 f4       	brne	.+20     	; 0x3516 <bresh_line_vplus_asm_loop+0x32>
    3502:	e0 91 10 01 	lds	r30, 0x0110
    3506:	ef 3f       	cpi	r30, 0xFF	; 255
    3508:	09 f4       	brne	.+2      	; 0x350c <bresh_line_vplus_asm_loop+0x28>
    350a:	80 c0       	rjmp	.+256    	; 0x360c <bresh_pixel>
    350c:	ec 93       	st	X, r30
    350e:	e3 95       	inc	r30
    3510:	e0 93 10 01 	sts	0x0110, r30
    3514:	ea 95       	dec	r30
    3516:	e9 9f       	mul	r30, r25
    3518:	e6 2f       	mov	r30, r22
    351a:	e7 70       	andi	r30, 0x07	; 7
    351c:	f1 2d       	mov	r31, r1
    351e:	e0 29       	or	r30, r0
    3520:	fc 5f       	subi	r31, 0xFC	; 252
    3522:	10 81       	ld	r17, Z
    3524:	17 2b       	or	r17, r23

00003526 <bresh_line_vplus_asm>:
bresh_line_vplus_asm:
	cp		r18, r22
    3526:	26 17       	cp	r18, r22
	brne	bresh_line_vplus_asm_loop
    3528:	e9 f6       	brne	.-70     	; 0x34e4 <bresh_line_vplus_asm_loop>
	fast_line_exit
    352a:	10 83       	st	Z, r17
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	1f 91       	pop	r17
    3532:	0f 91       	pop	r16
    3534:	ff 90       	pop	r15
    3536:	11 24       	eor	r1, r1
	ret
    3538:	08 95       	ret

0000353a <bresh_line_vminus_asm_loop>:

bresh_line_vminus_asm_loop:
	dec		r22
    353a:	6a 95       	dec	r22
	fast_line_Y_minus
    353c:	10 83       	st	Z, r17
    353e:	0e 2f       	mov	r16, r30
    3540:	07 70       	andi	r16, 0x07	; 7
    3542:	d1 f4       	brne	.+52     	; 0x3578 <bresh_line_vminus_asm_loop+0x3e>
    3544:	6c 9f       	mul	r22, r28
    3546:	d0 01       	movw	r26, r0
    3548:	a0 7e       	andi	r26, 0xE0	; 224
    354a:	8d 9f       	mul	r24, r29
    354c:	a1 29       	or	r26, r1
    354e:	b4 5f       	subi	r27, 0xF4	; 244
    3550:	ec 91       	ld	r30, X
    3552:	e0 30       	cpi	r30, 0x00	; 0
    3554:	51 f4       	brne	.+20     	; 0x356a <bresh_line_vminus_asm_loop+0x30>
    3556:	e0 91 10 01 	lds	r30, 0x0110
    355a:	ef 3f       	cpi	r30, 0xFF	; 255
    355c:	09 f4       	brne	.+2      	; 0x3560 <bresh_line_vminus_asm_loop+0x26>
    355e:	56 c0       	rjmp	.+172    	; 0x360c <bresh_pixel>
    3560:	ec 93       	st	X, r30
    3562:	e3 95       	inc	r30
    3564:	e0 93 10 01 	sts	0x0110, r30
    3568:	ea 95       	dec	r30
    356a:	e9 9f       	mul	r30, r25
    356c:	e6 2f       	mov	r30, r22
    356e:	e7 70       	andi	r30, 0x07	; 7
    3570:	f1 2d       	mov	r31, r1
    3572:	e0 29       	or	r30, r0
    3574:	fc 5f       	subi	r31, 0xFC	; 252
    3576:	01 c0       	rjmp	.+2      	; 0x357a <bresh_line_vminus_asm_loop+0x40>
    3578:	ea 95       	dec	r30
    357a:	10 81       	ld	r17, Z
    357c:	17 2b       	or	r17, r23

0000357e <bresh_line_vminus_asm>:
bresh_line_vminus_asm:
	cp		r18, r22
    357e:	26 17       	cp	r18, r22
	brne	bresh_line_vminus_asm_loop
    3580:	e1 f6       	brne	.-72     	; 0x353a <bresh_line_vminus_asm_loop>
	fast_line_exit
    3582:	10 83       	st	Z, r17
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	11 24       	eor	r1, r1
	ret
    3590:	08 95       	ret

00003592 <bresh_line_asm>:
;
; (# = Call saved and must not be saved/restored on exit)

bresh_line_asm:

	fast_line_entry
    3592:	ff 92       	push	r15
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	98 e0       	ldi	r25, 0x08	; 8
    359e:	c4 e0       	ldi	r28, 0x04	; 4
    35a0:	d0 e2       	ldi	r29, 0x20	; 32
	fast_line_convert_x0_y0_into_VRAM_address
    35a2:	6c 9f       	mul	r22, r28
    35a4:	d0 01       	movw	r26, r0
    35a6:	a0 7e       	andi	r26, 0xE0	; 224
    35a8:	8d 9f       	mul	r24, r29
    35aa:	a1 29       	or	r26, r1
    35ac:	b4 5f       	subi	r27, 0xF4	; 244
	fast_line_get_pixel_mask
    35ae:	e8 2f       	mov	r30, r24
    35b0:	e7 70       	andi	r30, 0x07	; 7
    35b2:	e8 60       	ori	r30, 0x08	; 8
    35b4:	f1 e0       	ldi	r31, 0x01	; 1
    35b6:	70 81       	ld	r23, Z
	fast_line_get_ramTileNo
    35b8:	ec 91       	ld	r30, X
    35ba:	e0 30       	cpi	r30, 0x00	; 0
    35bc:	51 f4       	brne	.+20     	; 0x35d2 <bresh_line_asm+0x40>
    35be:	e0 91 10 01 	lds	r30, 0x0110
    35c2:	ef 3f       	cpi	r30, 0xFF	; 255
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <bresh_line_asm+0x36>
    35c6:	22 c0       	rjmp	.+68     	; 0x360c <bresh_pixel>
    35c8:	ec 93       	st	X, r30
    35ca:	e3 95       	inc	r30
    35cc:	e0 93 10 01 	sts	0x0110, r30
    35d0:	ea 95       	dec	r30
	fast_line_convert_ramTileNo_into_ramTileByteAddress
    35d2:	e9 9f       	mul	r30, r25
    35d4:	e6 2f       	mov	r30, r22
    35d6:	e7 70       	andi	r30, 0x07	; 7
    35d8:	f1 2d       	mov	r31, r1
    35da:	e0 29       	or	r30, r0
    35dc:	fc 5f       	subi	r31, 0xFC	; 252
	fast_line_get_ramTilePixelByte
    35de:	10 81       	ld	r17, Z
	fast_line_OR_pixel_mask
    35e0:	17 2b       	or	r17, r23
	fast_line_write_ramTilePixelByte
    35e2:	10 83       	st	Z, r17

	cp		r18, r22				; compare Y1 and Y0
    35e4:	26 17       	cp	r18, r22
	breq	bresh_h_line			; if Y1 = Y0 are equal we can only be a hoizontal line
    35e6:	69 f0       	breq	.+26     	; 0x3602 <bresh_h_line>
	brlo	v_minus_q3_q4			; if Y1 < Y0 we can only be V-, Quadrant 3 or Quadrant 4
    35e8:	30 f0       	brcs	.+12     	; 0x35f6 <v_minus_q3_q4>

000035ea <v_plus_q1_q2>:
									; if Y1 > Y0 we can only be V+, Q1 or Q2
v_plus_q1_q2:
	cp		r20, r24				; comapre X1 and X0
    35ea:	48 17       	cp	r20, r24
	breq	v_plus					; If X1 = X0 (and Y1 > Y0 from previous) we must be a V+
    35ec:	19 f0       	breq	.+6      	; 0x35f4 <v_plus>
	brlo	q2						; if X1 < X0 (and Y1 > Y0 from previous) we must be Q2
    35ee:	08 f0       	brcs	.+2      	; 0x35f2 <q2>

000035f0 <q1>:
									; if X1 > X0 (and Y1 > Y0 from previous) we must be Q1
q1:
	rjmp	bresh_q1_asm
    35f0:	69 cb       	rjmp	.-2350   	; 0x2cc4 <bresh_q1_asm>

000035f2 <q2>:
q2:
	rjmp	bresh_q2_asm
    35f2:	57 cc       	rjmp	.-1874   	; 0x2ea2 <bresh_q2_asm>

000035f4 <v_plus>:
v_plus:
	rjmp	bresh_line_vplus_asm
    35f4:	98 cf       	rjmp	.-208    	; 0x3526 <bresh_line_vplus_asm>

000035f6 <v_minus_q3_q4>:


v_minus_q3_q4:
	cp		r20, r24				; comapre X1 and X0
    35f6:	48 17       	cp	r20, r24
	breq	v_minus					; If X1 = X0 (and Y1 < Y0 from previous) we must be a V-
    35f8:	19 f0       	breq	.+6      	; 0x3600 <v_minus>
	brlo	q3						; if X1 < X0 (and Y1 < Y0 from previous) we must be Q3
    35fa:	08 f0       	brcs	.+2      	; 0x35fe <q3>

000035fc <q4>:
									; if X1 > X0 (and Y1 < Y0 from previous) we must be Q4

q4:
	rjmp	bresh_q4_asm
    35fc:	33 ce       	rjmp	.-922    	; 0x3264 <bresh_q4_asm>

000035fe <q3>:
q3:
	rjmp	bresh_q3_asm
    35fe:	40 cd       	rjmp	.-1408   	; 0x3080 <bresh_q3_asm>

00003600 <v_minus>:
v_minus:
	rjmp	bresh_line_vminus_asm
    3600:	be cf       	rjmp	.-132    	; 0x357e <bresh_line_vminus_asm>

00003602 <bresh_h_line>:



bresh_h_line:
	cp		r20, r24				; comapre X1 and X0
    3602:	48 17       	cp	r20, r24
	breq	bresh_pixel				; If X1 = X0 (and Y1 = Y0 from previous) we must be a single pixel
    3604:	19 f0       	breq	.+6      	; 0x360c <bresh_pixel>
	brlo	h_minus					; if X1 < X0 (and Y1 = Y0 from previous) we must be H-
    3606:	08 f0       	brcs	.+2      	; 0x360a <h_minus>

00003608 <h_plus>:
									; if X1 > X0 (and Y1 = Y0 from previous) we must be H+

h_plus:
	rjmp	bresh_line_hplus_asm
    3608:	3c cf       	rjmp	.-392    	; 0x3482 <bresh_line_hplus_asm>

0000360a <h_minus>:
h_minus:
	rjmp	bresh_line_hminus_asm
    360a:	62 cf       	rjmp	.-316    	; 0x34d0 <bresh_line_hminus_asm>

0000360c <bresh_pixel>:

bresh_pixel_fail:		; Do not use the normal "fast_line"exit" routine
						; when failing as we dont want to write the local
						; pixel data to a random unknown location.
						
	pop		r29			; We only want to restore trashed registers
    360c:	df 91       	pop	r29
	pop		r28			; and leave the stack in the same state as
    360e:	cf 91       	pop	r28
	pop		r17			; on entry
    3610:	1f 91       	pop	r17
	pop		r16
    3612:	0f 91       	pop	r16
	pop		r15
    3614:	ff 90       	pop	r15
	clr		r1
    3616:	11 24       	eor	r1, r1

	ret
    3618:	08 95       	ret

0000361a <AddBCD>:
;		Packed 16 bit BCD Accumulator 	in r24:25

.global AddBCD
AddBCD:

	mov		r23, r22
    361a:	76 2f       	mov	r23, r22
	andi	r22, 0x0F
    361c:	6f 70       	andi	r22, 0x0F	; 15
	andi	r23, 0xF0
    361e:	70 7f       	andi	r23, 0xF0	; 240

	add		r24, r22
    3620:	86 0f       	add	r24, r22
	brhs	AddBCD_Nibble_1_Overflow
    3622:	25 f0       	brhs	.+8      	; 0x362c <AddBCD_Nibble_1_Overflow>
	mov		r21, r24
    3624:	58 2f       	mov	r21, r24
	andi	r21, 0x0F
    3626:	5f 70       	andi	r21, 0x0F	; 15
	cpi		r21, 0x0A
    3628:	5a 30       	cpi	r21, 0x0A	; 10
	brlo	AddBCD_No_Nibble_1_Overflow
    362a:	10 f0       	brcs	.+4      	; 0x3630 <AddBCD_No_Nibble_1_Overflow>

0000362c <AddBCD_Nibble_1_Overflow>:

AddBCD_Nibble_1_Overflow:

	subi	r24, 0x0A
    362c:	8a 50       	subi	r24, 0x0A	; 10
	subi	r23, (-(0x10))
    362e:	70 5f       	subi	r23, 0xF0	; 240

00003630 <AddBCD_No_Nibble_1_Overflow>:

AddBCD_No_Nibble_1_Overflow:	

	add		r24, r23
    3630:	87 0f       	add	r24, r23
	ldi		r23, 0x00
    3632:	70 e0       	ldi	r23, 0x00	; 0
	brcs	AddBCD_Nibble_2_Overflow
    3634:	20 f0       	brcs	.+8      	; 0x363e <AddBCD_Nibble_2_Overflow>
	mov		r21, r24
    3636:	58 2f       	mov	r21, r24
	andi	r21, 0xF0
    3638:	50 7f       	andi	r21, 0xF0	; 240
	cpi		r21, 0xA0
    363a:	50 3a       	cpi	r21, 0xA0	; 160
	brlo	AddBCD_No_Nibble_2_Overflow
    363c:	10 f0       	brcs	.+4      	; 0x3642 <AddBCD_No_Nibble_2_Overflow>

0000363e <AddBCD_Nibble_2_Overflow>:

AddBCD_Nibble_2_Overflow:

	subi	r24, 0xA0
    363e:	80 5a       	subi	r24, 0xA0	; 160
	ldi		r23, 0x01
    3640:	71 e0       	ldi	r23, 0x01	; 1

00003642 <AddBCD_No_Nibble_2_Overflow>:

AddBCD_No_Nibble_2_Overflow:	

	add		r25, r23
    3642:	97 0f       	add	r25, r23
	ldi		r23, 0x00
    3644:	70 e0       	ldi	r23, 0x00	; 0
	mov		r21, r25
    3646:	59 2f       	mov	r21, r25
	andi	r21, 0x0F
    3648:	5f 70       	andi	r21, 0x0F	; 15
	cpi		r21, 0x0A
    364a:	5a 30       	cpi	r21, 0x0A	; 10
	brlo	AddBCD_No_Nibble_3_Overflow
    364c:	48 f0       	brcs	.+18     	; 0x3660 <AddBCD_No_Nibble_3_Overflow>

0000364e <AddBCD_Nibble_3_Overflow>:

AddBCD_Nibble_3_Overflow:

	subi	r25, 0x0A
    364e:	9a 50       	subi	r25, 0x0A	; 10
	ldi		r23, 0x10
    3650:	70 e1       	ldi	r23, 0x10	; 16

	add		r25, r23
    3652:	97 0f       	add	r25, r23
	ldi		r23, 0x00
    3654:	70 e0       	ldi	r23, 0x00	; 0
	mov		r21, r25
    3656:	59 2f       	mov	r21, r25
	andi	r21, 0xF0
    3658:	50 7f       	andi	r21, 0xF0	; 240
	cpi		r21, 0xA0
    365a:	50 3a       	cpi	r21, 0xA0	; 160
	brlo	AddBCD_No_Nibble_4_Overflow
    365c:	08 f0       	brcs	.+2      	; 0x3660 <AddBCD_No_Nibble_3_Overflow>

0000365e <AddBCD_Nibble_4_Overflow>:

AddBCD_Nibble_4_Overflow:

	subi	r25, 0xA0
    365e:	90 5a       	subi	r25, 0xA0	; 160

00003660 <AddBCD_No_Nibble_3_Overflow>:

AddBCD_No_Nibble_3_Overflow:	
AddBCD_No_Nibble_4_Overflow:	

	ret
    3660:	08 95       	ret

00003662 <CosMulFastC>:
;		R26:27

.global CosMulFastC
CosMulFastC:

	subi	r24, (-(64))			; COS is 90 degrees out of phase with SIN
    3662:	80 5c       	subi	r24, 0xC0	; 192

00003664 <SinMulFastC>:

.global SinMulFastC
SinMulFastC:

	clr		r27						
    3664:	bb 27       	eor	r27, r27
	mov		r26, r24				; Get the offset in the SIN table
    3666:	a8 2f       	mov	r26, r24
	subi	r26, lo8(-(trigtable))	; Add the base address to the offset
    3668:	a0 58       	subi	r26, 0x80	; 128
    sbci 	r27, hi8(-(trigtable))
    366a:	b0 4f       	sbci	r27, 0xF0	; 240
	ld		r23, X					; Read value from table into r24
    366c:	7c 91       	ld	r23, X

	mulsu	r23, r22				; Multiply signed "sin(angle)" by unsigned "Distance*2"
    366e:	76 03       	mulsu	r23, r22
	mov		r24, r1					; move signed 8 bit result into r24
    3670:	81 2d       	mov	r24, r1

	clr		r1						; restore "R1:<ZERO>" for C
    3672:	11 24       	eor	r1, r1
	ret
    3674:	08 95       	ret

00003676 <CosFastC>:
;		R26:27

.global CosFastC
CosFastC:

	subi	r24, (-(64))			; COS is 90 degrees out of phase with SIN
    3676:	80 5c       	subi	r24, 0xC0	; 192

00003678 <SinFastC>:

.global SinFastC
SinFastC:

	clr		r27						
    3678:	bb 27       	eor	r27, r27
	mov		r26, r24				; Get the offset in the SIN table
    367a:	a8 2f       	mov	r26, r24
	subi	r26, lo8(-(trigtable))	; Add the base address to the offset
    367c:	a0 58       	subi	r26, 0x80	; 128
    sbci 	r27, hi8(-(trigtable))
    367e:	b0 4f       	sbci	r27, 0xF0	; 240
	ld		r24, X					; Read value from table into r24
    3680:	8c 91       	ld	r24, X
	ret
    3682:	08 95       	ret

00003684 <Mode7PutCharFastC>:
; 


.global Mode7PutCharFastC
Mode7PutCharFastC:
	push	r28					; Save register used by counter <i>
    3684:	cf 93       	push	r28
	push	r14					; 						TempX
    3686:	ef 92       	push	r14
	push	r13					; 						TempY
    3688:	df 92       	push	r13
	push	r12					; 						X_Backup
    368a:	cf 92       	push	r12
	push	r11					; 						Y_Backup
    368c:	bf 92       	push	r11
	push	r9					;						Z_Pointer_Backup_HI
    368e:	9f 92       	push	r9
	push	r8					;						Z_Pointer_Backup_LO
    3690:	8f 92       	push	r8

	mov		r12, r24			; Save X into X_Backup (r12) for later additions
    3692:	c8 2e       	mov	r12, r24
	mov		r11, r22			; Save Y into Y_Backup (r11) for later additions
    3694:	b6 2e       	mov	r11, r22

	ldi		r28, 0x20			; 32
    3696:	c0 e2       	ldi	r28, 0x20	; 32
	mul		r20, r28			; Multiply CharNum by 32
    3698:	4c 9f       	mul	r20, r28

	movw	r30, r0				; Move CharNo*32 into Z
    369a:	f0 01       	movw	r30, r0

	subi	r30, lo8(-(VectFont))	; Add the base address to the offset
    369c:	e4 53       	subi	r30, 0x34	; 52
    sbci 	r31, hi8(-(VectFont))
    369e:	ff 4e       	sbci	r31, 0xEF	; 239

	lpm		r24, Z+					; Get first X0 from flash
    36a0:	85 91       	lpm	r24, Z+
	lpm		r22, Z+					; Get first Y0 from flash
    36a2:	65 91       	lpm	r22, Z+

000036a4 <Mode7PutCharFastCLoop>:

Mode7PutCharFastCLoop:

	lpm		r20, Z+					; Get first X1 from flash
    36a4:	45 91       	lpm	r20, Z+
	
	cpi		r20, 0xFF				; See if we have reached end of list (0xFF)
    36a6:	4f 3f       	cpi	r20, 0xFF	; 255
	breq	Mode7PutCharFastCEnd
    36a8:	d9 f0       	breq	.+54     	; 0x36e0 <Mode7PutCharFastCEnd>

	cpi		r20, 0xFE							; See if we have non consecutive points (0xFE)
    36aa:	4e 3f       	cpi	r20, 0xFE	; 254
	brne	Mode7PutCharFastCDontSkipPoint
    36ac:	21 f4       	brne	.+8      	; 0x36b6 <Mode7PutCharFastCDontSkipPoint>

	adiw	r30, 1					; and read a whole set of (x0, y0, x1, y1)
    36ae:	31 96       	adiw	r30, 0x01	; 1
	lpm		r24, Z+
    36b0:	85 91       	lpm	r24, Z+
	lpm		r22, Z+
    36b2:	65 91       	lpm	r22, Z+
	lpm		r20, Z+
    36b4:	45 91       	lpm	r20, Z+

000036b6 <Mode7PutCharFastCDontSkipPoint>:

Mode7PutCharFastCDontSkipPoint:
	lpm		r18, Z+					; If we didn't have a broken line only need to read (y1)
    36b6:	25 91       	lpm	r18, Z+

	mov		r14, r20				; SAVE a copy of x1 and y1 so we don't need to read
    36b8:	e4 2e       	mov	r14, r20
	mov		r13, r18				; them from slow flash next loop
    36ba:	d2 2e       	mov	r13, r18

	add		r24, r12				; Add X_Backup and X0
    36bc:	8c 0d       	add	r24, r12
	brcs	M7PCFCDontDraw			; if there is an overflow then don't "DrawLine"
    36be:	68 f0       	brcs	.+26     	; 0x36da <M7PCFCDontDraw>
	add		r22, r11
    36c0:	6b 0d       	add	r22, r11
	brcs	M7PCFCDontDraw			; Ditto for Y0, X1 and Y1
    36c2:	58 f0       	brcs	.+22     	; 0x36da <M7PCFCDontDraw>
	add		r20, r12
    36c4:	4c 0d       	add	r20, r12
	brcs	M7PCFCDontDraw
    36c6:	48 f0       	brcs	.+18     	; 0x36da <M7PCFCDontDraw>
	add		r18, r11
    36c8:	2b 0d       	add	r18, r11
	brcs	M7PCFCDontDraw
    36ca:	38 f0       	brcs	.+14     	; 0x36da <M7PCFCDontDraw>

	cpi		r22, 224				; Make sure Y0 and Y1 are not out of range
    36cc:	60 3e       	cpi	r22, 0xE0	; 224
	brsh	M7PCFCDontDraw
    36ce:	28 f4       	brcc	.+10     	; 0x36da <M7PCFCDontDraw>
	cpi		r18, 224
    36d0:	20 3e       	cpi	r18, 0xE0	; 224
	brsh	M7PCFCDontDraw
    36d2:	18 f4       	brcc	.+6      	; 0x36da <M7PCFCDontDraw>

	movw	r8, r30					; Save Z (gets trashed by DrawLine)
    36d4:	4f 01       	movw	r8, r30
	rcall	LineMode7FastC			; Draw the line
    36d6:	39 da       	rcall	.-2958   	; 0x2b4a <LineMode7FastC>
	movw	r30, r8					; Restore Z
    36d8:	f4 01       	movw	r30, r8

000036da <M7PCFCDontDraw>:

M7PCFCDontDraw:

	mov		r24, r14				; Copy X_Temp into X0
    36da:	8e 2d       	mov	r24, r14
	mov		r22, r13				; Copy Y_Temp into Y0
    36dc:	6d 2d       	mov	r22, r13

	rjmp	Mode7PutCharFastCLoop
    36de:	e2 cf       	rjmp	.-60     	; 0x36a4 <Mode7PutCharFastCLoop>

000036e0 <Mode7PutCharFastCEnd>:


Mode7PutCharFastCEnd:
	pop		r8						; restore the trashed registers
    36e0:	8f 90       	pop	r8
	pop		r9
    36e2:	9f 90       	pop	r9
	pop		r11
    36e4:	bf 90       	pop	r11
	pop		r12
    36e6:	cf 90       	pop	r12
	pop		r13
    36e8:	df 90       	pop	r13
	pop		r14
    36ea:	ef 90       	pop	r14
	pop		r28
    36ec:	cf 91       	pop	r28
	clr		r1
    36ee:	11 24       	eor	r1, r1
	ret
    36f0:	08 95       	ret

000036f2 <DrawPolarObjectFastCEnd>:
;		r20 CharNo
;		r18 Theta
;		r16 Scale

DrawPolarObjectFastCEnd:
	pop		r8						; restore the trashed registers
    36f2:	8f 90       	pop	r8
	pop		r9
    36f4:	9f 90       	pop	r9
	pop		r11
    36f6:	bf 90       	pop	r11
	pop		r12
    36f8:	cf 90       	pop	r12
	pop		r13
    36fa:	df 90       	pop	r13
	pop		r14
    36fc:	ef 90       	pop	r14
	pop		r15
    36fe:	ff 90       	pop	r15
	pop		r17
    3700:	1f 91       	pop	r17
	pop		r28
    3702:	cf 91       	pop	r28
	clr		r1
    3704:	11 24       	eor	r1, r1
	ret
    3706:	08 95       	ret

00003708 <DrawPolarObjectFastC>:

.global DrawPolarObjectFastC
DrawPolarObjectFastC:
	push	r28					; Save register used by counter <i>
    3708:	cf 93       	push	r28
	push	r17
    370a:	1f 93       	push	r17
	push	r15
    370c:	ff 92       	push	r15
	push	r14					; 						TempX
    370e:	ef 92       	push	r14
	push	r13					; 						TempY
    3710:	df 92       	push	r13
	push	r12					; 						X_Backup
    3712:	cf 92       	push	r12
	push	r11					; 						Y_Backup
    3714:	bf 92       	push	r11
	push	r9					;						Z_Pointer_Backup_HI
    3716:	9f 92       	push	r9
	push	r8					;						Z_Pointer_Backup_LO
    3718:	8f 92       	push	r8

	mov		r12, r24			; Save X into X_Backup (r12) for later additions
    371a:	c8 2e       	mov	r12, r24
	mov		r11, r22			; Save Y into Y_Backup (r11) for later additions
    371c:	b6 2e       	mov	r11, r22
	mov		r15, r18			; Save Theta for later
    371e:	f2 2e       	mov	r15, r18

	ldi		r28, 0x20			; 32
    3720:	c0 e2       	ldi	r28, 0x20	; 32
	mul		r20, r28			; Multiply CharNum by 32
    3722:	4c 9f       	mul	r20, r28

	movw	r30, r0				; Move CharNo*32 into Z
    3724:	f0 01       	movw	r30, r0

	subi	r30, lo8(-(PolarObjects))	; Add the base address to the offset
    3726:	e4 5d       	subi	r30, 0xD4	; 212
    sbci 	r31, hi8(-(PolarObjects))
    3728:	f9 4e       	sbci	r31, 0xE9	; 233

	lpm		r23, Z+					; Get first X0 from flash
    372a:	75 91       	lpm	r23, Z+
	lpm		r25, Z+					; Get first Y0 from flash
    372c:	95 91       	lpm	r25, Z+
	add		r25, r15				; Add on theta
    372e:	9f 0d       	add	r25, r15

00003730 <DrawPolarObjectFastCLoop>:

DrawPolarObjectFastCLoop:

	lpm		r19, Z+					; Get first X1 from flash
    3730:	35 91       	lpm	r19, Z+
	
	cpi		r19, 0xFF				; See if we have reached end of list (0xFF)
    3732:	3f 3f       	cpi	r19, 0xFF	; 255
	breq	DrawPolarObjectFastCEnd
    3734:	f1 f2       	breq	.-68     	; 0x36f2 <DrawPolarObjectFastCEnd>

	cpi		r19, 0xFE							; See if we have non consecutive points (0xFE)
    3736:	3e 3f       	cpi	r19, 0xFE	; 254
	brne	DrawPolarObjectFastCDontSkipPoint
    3738:	29 f4       	brne	.+10     	; 0x3744 <DrawPolarObjectFastCDontSkipPoint>

	adiw	r30, 1					; and read a whole set of (x0, y0, x1, y1)
    373a:	31 96       	adiw	r30, 0x01	; 1
	lpm		r23, Z+
    373c:	75 91       	lpm	r23, Z+
	lpm		r25, Z+
    373e:	95 91       	lpm	r25, Z+
	add		r25, r15				; Add on theta
    3740:	9f 0d       	add	r25, r15
	lpm		r19, Z+
    3742:	35 91       	lpm	r19, Z+

00003744 <DrawPolarObjectFastCDontSkipPoint>:

DrawPolarObjectFastCDontSkipPoint:
	lpm		r21, Z+					; If we didn't have a broken line only need to read (y1)
    3744:	55 91       	lpm	r21, Z+
	add		r21, r15				; Add on theta
    3746:	5f 0d       	add	r21, r15

	mov		r14, r19				; SAVE a copy of x1 and y1 so we don't need to read
    3748:	e3 2e       	mov	r14, r19
	mov		r13, r21				; them from slow flash next loop
    374a:	d5 2e       	mov	r13, r21

	mul		r23, r16
    374c:	70 9f       	mul	r23, r16
	mov		r23, r1
    374e:	71 2d       	mov	r23, r1
	SinMulFast r25, r23, r24
    3750:	bb 27       	eor	r27, r27
    3752:	a9 2f       	mov	r26, r25
    3754:	a0 58       	subi	r26, 0x80	; 128
    3756:	b0 4f       	sbci	r27, 0xF0	; 240
    3758:	1c 91       	ld	r17, X
    375a:	17 03       	mulsu	r17, r23
    375c:	81 2d       	mov	r24, r1
	CosMulFast r25, r23, r22
    375e:	90 5c       	subi	r25, 0xC0	; 192
    3760:	bb 27       	eor	r27, r27
    3762:	a9 2f       	mov	r26, r25
    3764:	a0 58       	subi	r26, 0x80	; 128
    3766:	b0 4f       	sbci	r27, 0xF0	; 240
    3768:	1c 91       	ld	r17, X
    376a:	17 03       	mulsu	r17, r23
    376c:	61 2d       	mov	r22, r1

	mul		r19, r16
    376e:	30 9f       	mul	r19, r16
	mov		r19, r1
    3770:	31 2d       	mov	r19, r1
	SinMulFast r21, r19, r20
    3772:	bb 27       	eor	r27, r27
    3774:	a5 2f       	mov	r26, r21
    3776:	a0 58       	subi	r26, 0x80	; 128
    3778:	b0 4f       	sbci	r27, 0xF0	; 240
    377a:	1c 91       	ld	r17, X
    377c:	13 03       	mulsu	r17, r19
    377e:	41 2d       	mov	r20, r1
	CosMulFast r21, r19, r18
    3780:	50 5c       	subi	r21, 0xC0	; 192
    3782:	bb 27       	eor	r27, r27
    3784:	a5 2f       	mov	r26, r21
    3786:	a0 58       	subi	r26, 0x80	; 128
    3788:	b0 4f       	sbci	r27, 0xF0	; 240
    378a:	1c 91       	ld	r17, X
    378c:	13 03       	mulsu	r17, r19
    378e:	21 2d       	mov	r18, r1

	
	add		r24, r12				; Add X_Backup and X0
    3790:	8c 0d       	add	r24, r12
	add		r22, r11
    3792:	6b 0d       	add	r22, r11
	add		r20, r12
    3794:	4c 0d       	add	r20, r12
	add		r18, r11
    3796:	2b 0d       	add	r18, r11

	mov		r25, r24				; See if the ABS between X0 and X1 is greater than 150
    3798:	98 2f       	mov	r25, r24
	sub		r25, r20
    379a:	94 1b       	sub	r25, r20
	brcc	DPOFNoCarryABS
    379c:	08 f4       	brcc	.+2      	; 0x37a0 <DPOFNoCarryABS>
	neg		r25
    379e:	91 95       	neg	r25

000037a0 <DPOFNoCarryABS>:
DPOFNoCarryABS:
	cpi		r25, 150
    37a0:	96 39       	cpi	r25, 0x96	; 150
	brsh	DPOFCDontDraw
    37a2:	38 f4       	brcc	.+14     	; 0x37b2 <DPOFCDontDraw>

	cpi		r22, 224				; Make sure Y0 and Y1 are not out of range
    37a4:	60 3e       	cpi	r22, 0xE0	; 224
	brsh	DPOFCDontDraw
    37a6:	28 f4       	brcc	.+10     	; 0x37b2 <DPOFCDontDraw>
	cpi		r18, 224
    37a8:	20 3e       	cpi	r18, 0xE0	; 224
	brsh	DPOFCDontDraw
    37aa:	18 f4       	brcc	.+6      	; 0x37b2 <DPOFCDontDraw>

	movw	r8, r30					; Save Z (gets trashed by DrawLine)
    37ac:	4f 01       	movw	r8, r30
	rcall	bresh_line_asm			; Draw the line
    37ae:	f1 de       	rcall	.-542    	; 0x3592 <bresh_line_asm>
	movw	r30, r8					; Restore Z
    37b0:	f4 01       	movw	r30, r8

000037b2 <DPOFCDontDraw>:

DPOFCDontDraw:

	mov		r23, r14				; Copy X_Temp into X0
    37b2:	7e 2d       	mov	r23, r14
	mov		r25, r13				; Copy Y_Temp into Y0
    37b4:	9d 2d       	mov	r25, r13

	rjmp	DrawPolarObjectFastCLoop
    37b6:	bc cf       	rjmp	.-136    	; 0x3730 <DrawPolarObjectFastCLoop>

000037b8 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    37b8:	80 91 24 01 	lds	r24, 0x0124
	andi r24,SYNC_FLAG_VSYNC
    37bc:	81 70       	andi	r24, 0x01	; 1
	ret
    37be:	08 95       	ret

000037c0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    37c0:	20 91 24 01 	lds	r18, 0x0124
	andi r18,~SYNC_FLAG_VSYNC
    37c4:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    37c6:	20 93 24 01 	sts	0x0124, r18
	ret
    37ca:	08 95       	ret

000037cc <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    37cc:	88 23       	and	r24, r24
	brne rj_p2
    37ce:	29 f4       	brne	.+10     	; 0x37da <rj_p2>
		
	lds r24,joypad1_status_lo
    37d0:	80 91 2d 01 	lds	r24, 0x012D
	lds r25,joypad1_status_lo+1
    37d4:	90 91 2e 01 	lds	r25, 0x012E
	ret
    37d8:	08 95       	ret

000037da <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    37da:	80 91 31 01 	lds	r24, 0x0131
	lds r25,joypad2_status_lo+1	
    37de:	90 91 32 01 	lds	r25, 0x0132

	ret
    37e2:	08 95       	ret

000037e4 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    37e4:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    37e6:	fe cf       	rjmp	.-4      	; 0x37e4 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    37e8:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    37ea:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    37ec:	60 bd       	out	0x20, r22	; 32
   cli
    37ee:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    37f0:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    37f2:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    37f4:	78 94       	sei
   ret
    37f6:	08 95       	ret

000037f8 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    37f8:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    37fa:	fe cf       	rjmp	.-4      	; 0x37f8 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    37fc:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    37fe:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    3800:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    3802:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    3804:	80 b5       	in	r24, 0x20	; 32
   sei
    3806:	78 94       	sei
   ret
    3808:	08 95       	ret

0000380a <SetRenderingParameters>:
 * Dynamically sets the rasterizer parameters:
 * firstScanlineToRender = First scanline to render
 * scanlinesToRender     = Total number of vertical lines to render. 
 */
void SetRenderingParameters(u8 firstScanlineToRender, u8 scanlinesToRender){        
	render_lines_count_tmp=scanlinesToRender;
    380a:	60 93 2c 01 	sts	0x012C, r22
	first_render_line_tmp=firstScanlineToRender;
    380e:	80 93 2b 01 	sts	0x012B, r24
}
    3812:	08 95       	ret

00003814 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    3814:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    3816:	c8 95       	lpm
    3818:	c8 95       	lpm
		Wait200ns();
    381a:	c8 95       	lpm
    381c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    381e:	12 98       	cbi	0x02, 2	; 2
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	40 e0       	ldi	r20, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    382a:	36 95       	lsr	r19
    382c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    382e:	96 95       	lsr	r25
    3830:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    3832:	c8 95       	lpm
    3834:	c8 95       	lpm
			Wait200ns();
    3836:	c8 95       	lpm
    3838:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    383a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    383c:	00 9b       	sbis	0x00, 0	; 0
    383e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    3840:	01 9b       	sbis	0x00, 1	; 0
    3842:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    3844:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    3846:	c8 95       	lpm
    3848:	c8 95       	lpm
			Wait200ns();
    384a:	c8 95       	lpm
    384c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    384e:	4f 5f       	subi	r20, 0xFF	; 255
    3850:	40 31       	cpi	r20, 0x10	; 16
    3852:	59 f7       	brne	.-42     	; 0x382a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    3854:	30 93 2e 01 	sts	0x012E, r19
    3858:	20 93 2d 01 	sts	0x012D, r18
		joypad2_status_lo=p2ButtonsLo;
    385c:	90 93 32 01 	sts	0x0132, r25
    3860:	80 93 31 01 	sts	0x0131, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    3864:	80 91 2d 01 	lds	r24, 0x012D
    3868:	90 91 2e 01 	lds	r25, 0x012E
    386c:	0f 97       	sbiw	r24, 0x0f	; 15
    386e:	31 f0       	breq	.+12     	; 0x387c <ReadButtons+0x68>
    3870:	80 91 31 01 	lds	r24, 0x0131
    3874:	90 91 32 01 	lds	r25, 0x0132
    3878:	0f 97       	sbiw	r24, 0x0f	; 15
    387a:	61 f4       	brne	.+24     	; 0x3894 <ReadButtons+0x80>

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    387c:	28 e0       	ldi	r18, 0x08	; 8
    387e:	88 e1       	ldi	r24, 0x18	; 24
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	a8 95       	wdr
    3888:	80 93 60 00 	sts	0x0060, r24
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	20 93 60 00 	sts	0x0060, r18
    3892:	ff cf       	rjmp	.-2      	; 0x3892 <ReadButtons+0x7e>
    3894:	08 95       	ret

00003896 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    3896:	10 92 5f 01 	sts	0x015F, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    389a:	00 99       	sbic	0x00, 0	; 0
    389c:	03 c0       	rjmp	.+6      	; 0x38a4 <ReadControllers+0xe>
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	80 93 5f 01 	sts	0x015F, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    38a4:	01 99       	sbic	0x00, 1	; 0
    38a6:	05 c0       	rjmp	.+10     	; 0x38b2 <ReadControllers+0x1c>
    38a8:	80 91 5f 01 	lds	r24, 0x015F
    38ac:	82 60       	ori	r24, 0x02	; 2
    38ae:	80 93 5f 01 	sts	0x015F, r24
			
	//read the standard buttons
	ReadButtons();
    38b2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <ReadButtons>
}
    38b6:	08 95       	ret

000038b8 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	c0 e0       	ldi	r28, 0x00	; 0
    38be:	d0 e0       	ldi	r29, 0x00	; 0

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    38c0:	fe 01       	movw	r30, r28
    38c2:	e0 59       	subi	r30, 0x90	; 144
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	e4 91       	lpm	r30, Z+
    38c8:	ce 01       	movw	r24, r28
    38ca:	6e 2f       	mov	r22, r30
    38cc:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <WriteEeprom>
    38d0:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    38d2:	c0 32       	cpi	r28, 0x20	; 32
    38d4:	d1 05       	cpc	r29, r1
    38d6:	a1 f7       	brne	.-24     	; 0x38c0 <FormatEeprom+0x8>
    38d8:	c0 e2       	ldi	r28, 0x20	; 32
    38da:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    38dc:	ce 01       	movw	r24, r28
    38de:	6f ef       	ldi	r22, 0xFF	; 255
    38e0:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    38e4:	ce 01       	movw	r24, r28
    38e6:	01 96       	adiw	r24, 0x01	; 1
    38e8:	6f ef       	ldi	r22, 0xFF	; 255
    38ea:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    38ee:	a0 96       	adiw	r28, 0x20	; 32
    38f0:	88 e0       	ldi	r24, 0x08	; 8
    38f2:	c0 30       	cpi	r28, 0x00	; 0
    38f4:	d8 07       	cpc	r29, r24
    38f6:	91 f7       	brne	.-28     	; 0x38dc <FormatEeprom+0x24>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	08 95       	ret

000038fe <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    38fe:	1f 93       	push	r17
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <ReadEeprom>
    3908:	18 2f       	mov	r17, r24
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <ReadEeprom>
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	38 2f       	mov	r19, r24
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	21 0f       	add	r18, r17
    391a:	31 1d       	adc	r19, r1
    391c:	2a 55       	subi	r18, 0x5A	; 90
    391e:	35 45       	sbci	r19, 0x55	; 85
    3920:	09 f4       	brne	.+2      	; 0x3924 <isEepromFormatted+0x26>
    3922:	91 e0       	ldi	r25, 0x01	; 1
	return (id==EEPROM_SIGNATURE);
}
    3924:	89 2f       	mov	r24, r25
    3926:	1f 91       	pop	r17
    3928:	08 95       	ret

0000392a <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    392a:	fc 01       	movw	r30, r24
    392c:	45 87       	std	Z+13, r20	; 0x0d
}
    392e:	08 95       	ret

00003930 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	91 e0       	ldi	r25, 0x01	; 1
    3934:	90 93 4f 01 	sts	0x014F, r25
    3938:	80 93 4e 01 	sts	0x014E, r24
		mixer.channels.type.noise.params=param;
    393c:	40 93 4d 01 	sts	0x014D, r20
	#endif
}
    3940:	08 95       	ret

00003942 <PatchCommand02>:
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    3942:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    3944:	64 2f       	mov	r22, r20
    3946:	0e 94 bc 20 	call	0x4178	; 0x4178 <SetMixerWave>
}
    394a:	08 95       	ret

0000394c <PatchCommand03>:
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    394c:	fc 01       	movw	r30, r24
    394e:	86 2f       	mov	r24, r22
	track->note+=param;
    3950:	91 81       	ldd	r25, Z+1	; 0x01
    3952:	49 0f       	add	r20, r25
    3954:	41 83       	std	Z+1, r20	; 0x01
	SetMixerNote(trackNo,track->note);
    3956:	64 2f       	mov	r22, r20
    3958:	0e 94 a5 20 	call	0x414a	; 0x414a <SetMixerNote>
}
    395c:	08 95       	ret

0000395e <PatchCommand04>:
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    395e:	fc 01       	movw	r30, r24
    3960:	86 2f       	mov	r24, r22
	track->note-=param;
    3962:	61 81       	ldd	r22, Z+1	; 0x01
    3964:	64 1b       	sub	r22, r20
    3966:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    3968:	0e 94 a5 20 	call	0x414a	; 0x414a <SetMixerNote>
}
    396c:	08 95       	ret

0000396e <PatchCommand05>:
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    396e:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    3970:	80 81       	ld	r24, Z
    3972:	8f 75       	andi	r24, 0x5F	; 95
    3974:	80 83       	st	Z, r24
}
    3976:	08 95       	ret

00003978 <PatchCommand06>:

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    3978:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    397a:	80 81       	ld	r24, Z
    397c:	80 64       	ori	r24, 0x40	; 64
    397e:	80 83       	st	Z, r24
}
    3980:	08 95       	ret

00003982 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    3982:	fc 01       	movw	r30, r24
    3984:	44 87       	std	Z+12, r20	; 0x0c
}
    3986:	08 95       	ret

00003988 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    3988:	ff 92       	push	r15
    398a:	0f 93       	push	r16
    398c:	1f 93       	push	r17
    398e:	8c 01       	movw	r16, r24
    3990:	86 2f       	mov	r24, r22
    3992:	f4 2e       	mov	r15, r20
	SetMixerNote(trackNo,param);
    3994:	64 2f       	mov	r22, r20
    3996:	0e 94 a5 20 	call	0x414a	; 0x414a <SetMixerNote>
	track->note=param;
    399a:	f8 01       	movw	r30, r16
    399c:	f1 82       	std	Z+1, r15	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    399e:	80 81       	ld	r24, Z
    39a0:	87 7f       	andi	r24, 0xF7	; 247
    39a2:	80 83       	st	Z, r24
}
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	ff 90       	pop	r15
    39aa:	08 95       	ret

000039ac <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    39ac:	fc 01       	movw	r30, r24
    39ae:	47 83       	std	Z+7, r20	; 0x07
}
    39b0:	08 95       	ret

000039b2 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    39b2:	fc 01       	movw	r30, r24
    39b4:	40 87       	std	Z+8, r20	; 0x08
}
    39b6:	08 95       	ret

000039b8 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    39b8:	1f 93       	push	r17
    39ba:	cf 93       	push	r28
    39bc:	df 93       	push	r29
    39be:	ec 01       	movw	r28, r24
    39c0:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	fc 01       	movw	r30, r24
    39c8:	ee 0f       	add	r30, r30
    39ca:	ff 1f       	adc	r31, r31
    39cc:	e8 5f       	subi	r30, 0xF8	; 248
    39ce:	fd 4b       	sbci	r31, 0xBD	; 189
    39d0:	25 91       	lpm	r18, Z+
    39d2:	34 91       	lpm	r19, Z+
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    39d4:	e4 2f       	mov	r30, r20
    39d6:	ff 27       	eor	r31, r31
    39d8:	e7 fd       	sbrc	r30, 7
    39da:	f0 95       	com	r31
    39dc:	e8 0f       	add	r30, r24
    39de:	f9 1f       	adc	r31, r25
    39e0:	ee 0f       	add	r30, r30
    39e2:	ff 1f       	adc	r31, r31
    39e4:	e8 5f       	subi	r30, 0xF8	; 248
    39e6:	fd 4b       	sbci	r31, 0xBD	; 189
    39e8:	85 91       	lpm	r24, Z+
    39ea:	94 91       	lpm	r25, Z+
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    39ec:	60 91 67 01 	lds	r22, 0x0167
    39f0:	82 1b       	sub	r24, r18
    39f2:	93 0b       	sbc	r25, r19
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	0e 94 4d 31 	call	0x629a	; 0x629a <__divmodhi4>
    39fa:	9b 01       	movw	r18, r22
	if(delta==0)delta++;
    39fc:	61 15       	cp	r22, r1
    39fe:	71 05       	cpc	r23, r1
    3a00:	11 f4       	brne	.+4      	; 0x3a06 <PatchCommand11+0x4e>
    3a02:	21 e0       	ldi	r18, 0x01	; 1
    3a04:	30 e0       	ldi	r19, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    3a06:	81 2f       	mov	r24, r17
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	ee 0f       	add	r30, r30
    3a0e:	ff 1f       	adc	r31, r31
    3a10:	e8 0f       	add	r30, r24
    3a12:	f9 1f       	adc	r31, r25
    3a14:	ee 0f       	add	r30, r30
    3a16:	ff 1f       	adc	r31, r31
    3a18:	e6 5c       	subi	r30, 0xC6	; 198
    3a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1c:	81 81       	ldd	r24, Z+1	; 0x01
    3a1e:	92 81       	ldd	r25, Z+2	; 0x02
    3a20:	82 0f       	add	r24, r18
    3a22:	93 1f       	adc	r25, r19
    3a24:	92 83       	std	Z+2, r25	; 0x02
    3a26:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    3a28:	3b 83       	std	Y+3, r19	; 0x03
    3a2a:	2a 83       	std	Y+2, r18	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    3a2c:	88 81       	ld	r24, Y
    3a2e:	88 60       	ori	r24, 0x08	; 8
    3a30:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	84 0f       	add	r24, r20
    3a36:	8c 83       	std	Y+4, r24	; 0x04
}
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	1f 91       	pop	r17
    3a3e:	08 95       	ret

00003a40 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    3a40:	40 93 67 01 	sts	0x0167, r20
}
    3a44:	08 95       	ret

00003a46 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    3a46:	90 93 d3 01 	sts	0x01D3, r25
    3a4a:	80 93 d2 01 	sts	0x01D2, r24

	masterVolume=DEFAULT_MASTER_VOL;
    3a4e:	8f e6       	ldi	r24, 0x6F	; 111
    3a50:	80 93 d5 01 	sts	0x01D5, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    3a54:	10 92 38 01 	sts	0x0138, r1
    3a58:	e2 e6       	ldi	r30, 0x62	; 98
    3a5a:	f1 e0       	ldi	r31, 0x01	; 1

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    3a5c:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    3a5e:	8f ef       	ldi	r24, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    3a60:	28 e1       	ldi	r18, 0x18	; 24

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    3a62:	90 83       	st	Z, r25
		tracks[t].noteVol=0;
    3a64:	13 86       	std	Z+11, r1	; 0x0b
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    3a66:	81 87       	std	Z+9, r24	; 0x09
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    3a68:	82 87       	std	Z+10, r24	; 0x0a
		tracks[t].patchNo=DEFAULT_PATCH;
    3a6a:	16 86       	std	Z+14, r1	; 0x0e
		tracks[t].tremoloRate=24; //~6hz
    3a6c:	20 87       	std	Z+8, r18	; 0x08
		tracks[t].slideSpeed=0x10;
    3a6e:	95 83       	std	Z+5, r25	; 0x05
    3a70:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    3a72:	31 e0       	ldi	r19, 0x01	; 1
    3a74:	e0 3d       	cpi	r30, 0xD0	; 208
    3a76:	f3 07       	cpc	r31, r19
    3a78:	a1 f7       	brne	.-24     	; 0x3a62 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    3a7a:	08 95       	ret

00003a7c <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    3a7c:	af 92       	push	r10
    3a7e:	bf 92       	push	r11
    3a80:	df 92       	push	r13
    3a82:	ef 92       	push	r14
    3a84:	ff 92       	push	r15
    3a86:	0f 93       	push	r16
    3a88:	1f 93       	push	r17
    3a8a:	cf 93       	push	r28
    3a8c:	df 93       	push	r29
    3a8e:	a2 e6       	ldi	r26, 0x62	; 98
    3a90:	b1 e0       	ldi	r27, 0x01	; 1
    3a92:	cb e3       	ldi	r28, 0x3B	; 59
    3a94:	d1 e0       	ldi	r29, 0x01	; 1
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    3a96:	1d 96       	adiw	r26, 0x0d	; 13
    3a98:	8c 91       	ld	r24, X
    3a9a:	1d 97       	sbiw	r26, 0x0d	; 13
    3a9c:	88 23       	and	r24, r24
    3a9e:	b9 f0       	breq	.+46     	; 0x3ace <ProcessMusic+0x52>
			vol=track->envelopeVol+track->envelopeStep;		
    3aa0:	28 2f       	mov	r18, r24
    3aa2:	33 27       	eor	r19, r19
    3aa4:	27 fd       	sbrc	r18, 7
    3aa6:	30 95       	com	r19
    3aa8:	1c 96       	adiw	r26, 0x0c	; 12
    3aaa:	8c 91       	ld	r24, X
    3aac:	1c 97       	sbiw	r26, 0x0c	; 12
    3aae:	28 0f       	add	r18, r24
    3ab0:	31 1d       	adc	r19, r1
    3ab2:	2f 3f       	cpi	r18, 0xFF	; 255
    3ab4:	31 05       	cpc	r19, r1
    3ab6:	19 f0       	breq	.+6      	; 0x3abe <ProcessMusic+0x42>
    3ab8:	14 f0       	brlt	.+4      	; 0x3abe <ProcessMusic+0x42>
    3aba:	2f ef       	ldi	r18, 0xFF	; 255
    3abc:	30 e0       	ldi	r19, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    3abe:	c9 01       	movw	r24, r18
    3ac0:	37 ff       	sbrs	r19, 7
    3ac2:	02 c0       	rjmp	.+4      	; 0x3ac8 <ProcessMusic+0x4c>
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	1c 96       	adiw	r26, 0x0c	; 12
    3aca:	8c 93       	st	X, r24
    3acc:	1c 97       	sbiw	r26, 0x0c	; 12
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    3ace:	8c 91       	ld	r24, X
    3ad0:	83 ff       	sbrs	r24, 3
    3ad2:	26 c0       	rjmp	.+76     	; 0x3b20 <ProcessMusic+0xa4>

			mixer.channels.all[trackNo].step+=track->slideStep;
    3ad4:	12 96       	adiw	r26, 0x02	; 2
    3ad6:	4d 91       	ld	r20, X+
    3ad8:	5c 91       	ld	r21, X
    3ada:	13 97       	sbiw	r26, 0x03	; 3
    3adc:	28 81       	ld	r18, Y
    3ade:	39 81       	ldd	r19, Y+1	; 0x01
    3ae0:	24 0f       	add	r18, r20
    3ae2:	35 1f       	adc	r19, r21
    3ae4:	39 83       	std	Y+1, r19	; 0x01
    3ae6:	28 83       	st	Y, r18
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    3ae8:	14 96       	adiw	r26, 0x04	; 4
    3aea:	8c 91       	ld	r24, X
    3aec:	14 97       	sbiw	r26, 0x04	; 4
    3aee:	e8 2f       	mov	r30, r24
    3af0:	f0 e0       	ldi	r31, 0x00	; 0
    3af2:	ee 0f       	add	r30, r30
    3af4:	ff 1f       	adc	r31, r31
    3af6:	e8 5f       	subi	r30, 0xF8	; 248
    3af8:	fd 4b       	sbci	r31, 0xBD	; 189
    3afa:	85 91       	lpm	r24, Z+
    3afc:	94 91       	lpm	r25, Z+

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    3afe:	14 16       	cp	r1, r20
    3b00:	15 06       	cpc	r1, r21
    3b02:	24 f4       	brge	.+8      	; 0x3b0c <ProcessMusic+0x90>
    3b04:	28 17       	cp	r18, r24
    3b06:	39 07       	cpc	r19, r25
    3b08:	30 f4       	brcc	.+12     	; 0x3b16 <ProcessMusic+0x9a>
    3b0a:	0a c0       	rjmp	.+20     	; 0x3b20 <ProcessMusic+0xa4>
    3b0c:	45 2b       	or	r20, r21
    3b0e:	41 f0       	breq	.+16     	; 0x3b20 <ProcessMusic+0xa4>
    3b10:	82 17       	cp	r24, r18
    3b12:	93 07       	cpc	r25, r19
    3b14:	28 f0       	brcs	.+10     	; 0x3b20 <ProcessMusic+0xa4>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
			{					
				mixer.channels.all[trackNo].step = tStep;					
    3b16:	99 83       	std	Y+1, r25	; 0x01
    3b18:	88 83       	st	Y, r24
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    3b1a:	8c 91       	ld	r24, X
    3b1c:	87 7f       	andi	r24, 0xF7	; 247
    3b1e:	8c 93       	st	X, r24
    3b20:	56 96       	adiw	r26, 0x16	; 22
    3b22:	26 96       	adiw	r28, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    3b24:	41 e0       	ldi	r20, 0x01	; 1
    3b26:	a0 3d       	cpi	r26, 0xD0	; 208
    3b28:	b4 07       	cpc	r27, r20
    3b2a:	09 f0       	breq	.+2      	; 0x3b2e <ProcessMusic+0xb2>
    3b2c:	b4 cf       	rjmp	.-152    	; 0x3a96 <ProcessMusic+0x1a>
	}



	//Process song MIDI notes
	if(playSong){
    3b2e:	80 91 38 01 	lds	r24, 0x0138
    3b32:	88 23       	and	r24, r24
    3b34:	09 f0       	breq	.+2      	; 0x3b38 <ProcessMusic+0xbc>
    3b36:	de c0       	rjmp	.+444    	; 0x3cf4 <ProcessMusic+0x278>
    3b38:	f1 c0       	rjmp	.+482    	; 0x3d1c <ProcessMusic+0x2a0>
	
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){

			c1=pgm_read_byte(songPos++);
    3b3a:	e0 91 d9 01 	lds	r30, 0x01D9
    3b3e:	f0 91 da 01 	lds	r31, 0x01DA
    3b42:	cf 01       	movw	r24, r30
    3b44:	01 96       	adiw	r24, 0x01	; 1
    3b46:	90 93 da 01 	sts	0x01DA, r25
    3b4a:	80 93 d9 01 	sts	0x01D9, r24
    3b4e:	44 91       	lpm	r20, Z+
			
			if(c1==0xff){
    3b50:	4f 3f       	cpi	r20, 0xFF	; 255
    3b52:	69 f5       	brne	.+90     	; 0x3bae <ProcessMusic+0x132>
				//META data type event
				c1=pgm_read_byte(songPos++);
    3b54:	ac 01       	movw	r20, r24
    3b56:	4f 5f       	subi	r20, 0xFF	; 255
    3b58:	5f 4f       	sbci	r21, 0xFF	; 255
    3b5a:	50 93 da 01 	sts	0x01DA, r21
    3b5e:	40 93 d9 01 	sts	0x01D9, r20
    3b62:	fc 01       	movw	r30, r24
    3b64:	84 91       	lpm	r24, Z+

				
				if(c1==0x2f){ //end of song
    3b66:	8f 32       	cpi	r24, 0x2F	; 47
    3b68:	19 f4       	brne	.+6      	; 0x3b70 <ProcessMusic+0xf4>
					playSong=false;
    3b6a:	10 92 38 01 	sts	0x0138, r1
    3b6e:	d0 c0       	rjmp	.+416    	; 0x3d10 <ProcessMusic+0x294>
					break;	
				}else if(c1==0x6){ //marker
    3b70:	86 30       	cpi	r24, 0x06	; 6
    3b72:	09 f0       	breq	.+2      	; 0x3b76 <ProcessMusic+0xfa>
    3b74:	b2 c0       	rjmp	.+356    	; 0x3cda <ProcessMusic+0x25e>
					c1=pgm_read_byte(songPos++); //read len
    3b76:	fa 01       	movw	r30, r20
    3b78:	31 96       	adiw	r30, 0x01	; 1
					c2=pgm_read_byte(songPos++); //read data
    3b7a:	cf 01       	movw	r24, r30
    3b7c:	01 96       	adiw	r24, 0x01	; 1
    3b7e:	90 93 da 01 	sts	0x01DA, r25
    3b82:	80 93 d9 01 	sts	0x01D9, r24
    3b86:	e4 91       	lpm	r30, Z+
					if(c2=='S'){ //loop start
    3b88:	e3 35       	cpi	r30, 0x53	; 83
    3b8a:	29 f4       	brne	.+10     	; 0x3b96 <ProcessMusic+0x11a>
						loopStart=songPos;
    3b8c:	90 93 dc 01 	sts	0x01DC, r25
    3b90:	80 93 db 01 	sts	0x01DB, r24
    3b94:	a2 c0       	rjmp	.+324    	; 0x3cda <ProcessMusic+0x25e>
					}else if(c2=='E'){//loop end
    3b96:	e5 34       	cpi	r30, 0x45	; 69
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <ProcessMusic+0x120>
    3b9a:	9f c0       	rjmp	.+318    	; 0x3cda <ProcessMusic+0x25e>
						songPos=loopStart;
    3b9c:	80 91 db 01 	lds	r24, 0x01DB
    3ba0:	90 91 dc 01 	lds	r25, 0x01DC
    3ba4:	90 93 da 01 	sts	0x01DA, r25
    3ba8:	80 93 d9 01 	sts	0x01D9, r24
    3bac:	96 c0       	rjmp	.+300    	; 0x3cda <ProcessMusic+0x25e>
				}
				

			}else{

				if(c1&0x80) lastStatus=c1;					
    3bae:	47 ff       	sbrs	r20, 7
    3bb0:	02 c0       	rjmp	.+4      	; 0x3bb6 <ProcessMusic+0x13a>
    3bb2:	40 93 d4 01 	sts	0x01D4, r20
				channel=lastStatus&0x0f;
    3bb6:	20 91 d4 01 	lds	r18, 0x01D4
    3bba:	32 2f       	mov	r19, r18
    3bbc:	3f 70       	andi	r19, 0x0F	; 15
				
				//get next data byte
				//Note: maybe we should not advance the cursor
				//in case we receive an unsupported command				
				if(c1&0x80) c1=pgm_read_byte(songPos++); 
    3bbe:	47 ff       	sbrs	r20, 7
    3bc0:	08 c0       	rjmp	.+16     	; 0x3bd2 <ProcessMusic+0x156>
    3bc2:	01 96       	adiw	r24, 0x01	; 1
    3bc4:	90 93 da 01 	sts	0x01DA, r25
    3bc8:	80 93 d9 01 	sts	0x01D9, r24
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	fc 01       	movw	r30, r24
    3bd0:	44 91       	lpm	r20, Z+

				switch(lastStatus&0xf0){
    3bd2:	82 2f       	mov	r24, r18
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	80 7f       	andi	r24, 0xF0	; 240
    3bd8:	90 70       	andi	r25, 0x00	; 0
    3bda:	80 3b       	cpi	r24, 0xB0	; 176
    3bdc:	91 05       	cpc	r25, r1
    3bde:	31 f1       	breq	.+76     	; 0x3c2c <ProcessMusic+0x1b0>
    3be0:	80 3c       	cpi	r24, 0xC0	; 192
    3be2:	91 05       	cpc	r25, r1
    3be4:	09 f4       	brne	.+2      	; 0x3be8 <ProcessMusic+0x16c>
    3be6:	6d c0       	rjmp	.+218    	; 0x3cc2 <ProcessMusic+0x246>
    3be8:	80 39       	cpi	r24, 0x90	; 144
    3bea:	91 05       	cpc	r25, r1
    3bec:	09 f0       	breq	.+2      	; 0x3bf0 <ProcessMusic+0x174>
    3bee:	75 c0       	rjmp	.+234    	; 0x3cda <ProcessMusic+0x25e>

					//note-on
					case 0x90:
						//c1 = note						
						c2=pgm_read_byte(songPos++)<<1; //get volume
    3bf0:	e0 91 d9 01 	lds	r30, 0x01D9
    3bf4:	f0 91 da 01 	lds	r31, 0x01DA
    3bf8:	31 96       	adiw	r30, 0x01	; 1
    3bfa:	f0 93 da 01 	sts	0x01DA, r31
    3bfe:	e0 93 d9 01 	sts	0x01D9, r30
    3c02:	31 97       	sbiw	r30, 0x01	; 1
    3c04:	e4 91       	lpm	r30, Z+
						
						if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
							TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    3c06:	83 2f       	mov	r24, r19
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	8c 9f       	mul	r24, r28
    3c0c:	d0 01       	movw	r26, r0
    3c0e:	8d 9f       	mul	r24, r29
    3c10:	b0 0d       	add	r27, r0
    3c12:	9c 9f       	mul	r25, r28
    3c14:	b0 0d       	add	r27, r0
    3c16:	11 24       	eor	r1, r1
    3c18:	ae 59       	subi	r26, 0x9E	; 158
    3c1a:	be 4f       	sbci	r27, 0xFE	; 254
    3c1c:	ee 0f       	add	r30, r30
    3c1e:	83 2f       	mov	r24, r19
    3c20:	1e 96       	adiw	r26, 0x0e	; 14
    3c22:	6c 91       	ld	r22, X
    3c24:	2e 2f       	mov	r18, r30
    3c26:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <TriggerNote>
    3c2a:	57 c0       	rjmp	.+174    	; 0x3cda <ProcessMusic+0x25e>
						break;

					//controllers
					case 0xb0:
						///c1 = controller #
						c2=pgm_read_byte(songPos++); //get controller value
    3c2c:	e0 91 d9 01 	lds	r30, 0x01D9
    3c30:	f0 91 da 01 	lds	r31, 0x01DA
    3c34:	31 96       	adiw	r30, 0x01	; 1
    3c36:	f0 93 da 01 	sts	0x01DA, r31
    3c3a:	e0 93 d9 01 	sts	0x01D9, r30
    3c3e:	31 97       	sbiw	r30, 0x01	; 1
    3c40:	24 91       	lpm	r18, Z+
						
						if(c1==CONTROLER_VOL){
    3c42:	47 30       	cpi	r20, 0x07	; 7
    3c44:	71 f4       	brne	.+28     	; 0x3c62 <ProcessMusic+0x1e6>
							tracks[channel].trackVol=c2<<1;
    3c46:	83 2f       	mov	r24, r19
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	8c 9f       	mul	r24, r28
    3c4c:	f0 01       	movw	r30, r0
    3c4e:	8d 9f       	mul	r24, r29
    3c50:	f0 0d       	add	r31, r0
    3c52:	9c 9f       	mul	r25, r28
    3c54:	f0 0d       	add	r31, r0
    3c56:	11 24       	eor	r1, r1
    3c58:	ee 59       	subi	r30, 0x9E	; 158
    3c5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c5c:	22 0f       	add	r18, r18
    3c5e:	22 87       	std	Z+10, r18	; 0x0a
    3c60:	3c c0       	rjmp	.+120    	; 0x3cda <ProcessMusic+0x25e>
						}else if(c1==CONTROLER_EXPRESSION){
    3c62:	4b 30       	cpi	r20, 0x0B	; 11
    3c64:	71 f4       	brne	.+28     	; 0x3c82 <ProcessMusic+0x206>
							tracks[channel].expressionVol=c2<<1;
    3c66:	83 2f       	mov	r24, r19
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	8c 9f       	mul	r24, r28
    3c6c:	f0 01       	movw	r30, r0
    3c6e:	8d 9f       	mul	r24, r29
    3c70:	f0 0d       	add	r31, r0
    3c72:	9c 9f       	mul	r25, r28
    3c74:	f0 0d       	add	r31, r0
    3c76:	11 24       	eor	r1, r1
    3c78:	ee 59       	subi	r30, 0x9E	; 158
    3c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c7c:	22 0f       	add	r18, r18
    3c7e:	21 87       	std	Z+9, r18	; 0x09
    3c80:	2c c0       	rjmp	.+88     	; 0x3cda <ProcessMusic+0x25e>
						}else if(c1==CONTROLER_TREMOLO){
    3c82:	4c 35       	cpi	r20, 0x5C	; 92
    3c84:	71 f4       	brne	.+28     	; 0x3ca2 <ProcessMusic+0x226>
							tracks[channel].tremoloLevel=c2<<1;
    3c86:	83 2f       	mov	r24, r19
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	8c 9f       	mul	r24, r28
    3c8c:	f0 01       	movw	r30, r0
    3c8e:	8d 9f       	mul	r24, r29
    3c90:	f0 0d       	add	r31, r0
    3c92:	9c 9f       	mul	r25, r28
    3c94:	f0 0d       	add	r31, r0
    3c96:	11 24       	eor	r1, r1
    3c98:	ee 59       	subi	r30, 0x9E	; 158
    3c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9c:	22 0f       	add	r18, r18
    3c9e:	27 83       	std	Z+7, r18	; 0x07
    3ca0:	1c c0       	rjmp	.+56     	; 0x3cda <ProcessMusic+0x25e>
						}else if(c1==CONTROLER_TREMOLO_RATE){
    3ca2:	44 36       	cpi	r20, 0x64	; 100
    3ca4:	d1 f4       	brne	.+52     	; 0x3cda <ProcessMusic+0x25e>
							tracks[channel].tremoloRate=c2<<1;
    3ca6:	83 2f       	mov	r24, r19
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	8c 9f       	mul	r24, r28
    3cac:	f0 01       	movw	r30, r0
    3cae:	8d 9f       	mul	r24, r29
    3cb0:	f0 0d       	add	r31, r0
    3cb2:	9c 9f       	mul	r25, r28
    3cb4:	f0 0d       	add	r31, r0
    3cb6:	11 24       	eor	r1, r1
    3cb8:	ee 59       	subi	r30, 0x9E	; 158
    3cba:	fe 4f       	sbci	r31, 0xFE	; 254
    3cbc:	22 0f       	add	r18, r18
    3cbe:	20 87       	std	Z+8, r18	; 0x08
    3cc0:	0c c0       	rjmp	.+24     	; 0x3cda <ProcessMusic+0x25e>
						break;

					//program change
					case 0xc0:
						// c1 = patch #						
						tracks[channel].patchNo=c1;
    3cc2:	83 2f       	mov	r24, r19
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	8c 9f       	mul	r24, r28
    3cc8:	f0 01       	movw	r30, r0
    3cca:	8d 9f       	mul	r24, r29
    3ccc:	f0 0d       	add	r31, r0
    3cce:	9c 9f       	mul	r25, r28
    3cd0:	f0 0d       	add	r31, r0
    3cd2:	11 24       	eor	r1, r1
    3cd4:	ee 59       	subi	r30, 0x9E	; 158
    3cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd8:	46 87       	std	Z+14, r20	; 0x0e


			}//end if(c1==0xff)

			//read next delta time
			nextDeltaTime=ReadVarLen(&songPos);			
    3cda:	89 ed       	ldi	r24, 0xD9	; 217
    3cdc:	91 e0       	ldi	r25, 0x01	; 1
    3cde:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <ReadVarLen>
    3ce2:	90 93 d7 01 	sts	0x01D7, r25
    3ce6:	80 93 d6 01 	sts	0x01D6, r24
			currDeltaTime=0;
    3cea:	10 92 d1 01 	sts	0x01D1, r1
    3cee:	10 92 d0 01 	sts	0x01D0, r1
    3cf2:	02 c0       	rjmp	.+4      	; 0x3cf8 <ProcessMusic+0x27c>
						}else if(c1==CONTROLER_EXPRESSION){
							tracks[channel].expressionVol=c2<<1;
						}else if(c1==CONTROLER_TREMOLO){
							tracks[channel].tremoloLevel=c2<<1;
						}else if(c1==CONTROLER_TREMOLO_RATE){
							tracks[channel].tremoloRate=c2<<1;
    3cf4:	c6 e1       	ldi	r28, 0x16	; 22
    3cf6:	d0 e0       	ldi	r29, 0x00	; 0

	//Process song MIDI notes
	if(playSong){
	
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){
    3cf8:	20 91 d0 01 	lds	r18, 0x01D0
    3cfc:	30 91 d1 01 	lds	r19, 0x01D1
    3d00:	80 91 d6 01 	lds	r24, 0x01D6
    3d04:	90 91 d7 01 	lds	r25, 0x01D7
    3d08:	28 17       	cp	r18, r24
    3d0a:	39 07       	cpc	r19, r25
    3d0c:	09 f4       	brne	.+2      	; 0x3d10 <ProcessMusic+0x294>
    3d0e:	15 cf       	rjmp	.-470    	; 0x3b3a <ProcessMusic+0xbe>
				}
			#endif

		}//end while
		
		currDeltaTime++;
    3d10:	2f 5f       	subi	r18, 0xFF	; 255
    3d12:	3f 4f       	sbci	r19, 0xFF	; 255
    3d14:	30 93 d1 01 	sts	0x01D1, r19
    3d18:	20 93 d0 01 	sts	0x01D0, r18
    3d1c:	c2 e6       	ldi	r28, 0x62	; 98
    3d1e:	d1 e0       	ldi	r29, 0x01	; 1
    3d20:	0a e3       	ldi	r16, 0x3A	; 58
    3d22:	11 e0       	ldi	r17, 0x01	; 1
    3d24:	ff 24       	eor	r15, r15
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    3d26:	6f ef       	ldi	r22, 0xFF	; 255
    3d28:	a6 2e       	mov	r10, r22
    3d2a:	b1 2c       	mov	r11, r1
				}
			#endif

		}//end while
		
		currDeltaTime++;
    3d2c:	dc 2e       	mov	r13, r28
    3d2e:	ed 2e       	mov	r14, r29
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    3d30:	88 81       	ld	r24, Y
    3d32:	86 fd       	sbrc	r24, 6
    3d34:	3d c0       	rjmp	.+122    	; 0x3db0 <ProcessMusic+0x334>

			if(track->patchCommandStreamPos!=NULL && 
    3d36:	8c 89       	ldd	r24, Y+20	; 0x14
    3d38:	9d 89       	ldd	r25, Y+21	; 0x15
    3d3a:	89 2b       	or	r24, r25
    3d3c:	09 f4       	brne	.+2      	; 0x3d40 <ProcessMusic+0x2c4>
    3d3e:	35 c0       	rjmp	.+106    	; 0x3daa <ProcessMusic+0x32e>
    3d40:	9a 89       	ldd	r25, Y+18	; 0x12
    3d42:	89 89       	ldd	r24, Y+17	; 0x11
    3d44:	98 17       	cp	r25, r24
    3d46:	68 f5       	brcc	.+90     	; 0x3da2 <ProcessMusic+0x326>
    3d48:	30 c0       	rjmp	.+96     	; 0x3daa <ProcessMusic+0x32e>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    3d4a:	ec 89       	ldd	r30, Y+20	; 0x14
    3d4c:	fd 89       	ldd	r31, Y+21	; 0x15
    3d4e:	cf 01       	movw	r24, r30
    3d50:	01 96       	adiw	r24, 0x01	; 1
    3d52:	9d 8b       	std	Y+21, r25	; 0x15
    3d54:	8c 8b       	std	Y+20, r24	; 0x14
    3d56:	24 91       	lpm	r18, Z+
					if(c1==0xff){					
    3d58:	2f 3f       	cpi	r18, 0xFF	; 255
    3d5a:	31 f4       	brne	.+12     	; 0x3d68 <ProcessMusic+0x2ec>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    3d5c:	88 81       	ld	r24, Y
    3d5e:	8f 77       	andi	r24, 0x7F	; 127
    3d60:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    3d62:	1d 8a       	std	Y+21, r1	; 0x15
    3d64:	1c 8a       	std	Y+20, r1	; 0x14
    3d66:	21 c0       	rjmp	.+66     	; 0x3daa <ProcessMusic+0x32e>
						break;

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    3d68:	01 96       	adiw	r24, 0x01	; 1
    3d6a:	9d 8b       	std	Y+21, r25	; 0x15
    3d6c:	8c 8b       	std	Y+20, r24	; 0x14
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	fc 01       	movw	r30, r24
    3d72:	44 91       	lpm	r20, Z+
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    3d74:	82 2f       	mov	r24, r18
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	88 0f       	add	r24, r24
    3d7a:	99 1f       	adc	r25, r25
    3d7c:	82 54       	subi	r24, 0x42	; 66
    3d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d80:	fc 01       	movw	r30, r24
    3d82:	25 91       	lpm	r18, Z+
    3d84:	34 91       	lpm	r19, Z+
    3d86:	8d 2d       	mov	r24, r13
    3d88:	9e 2d       	mov	r25, r14
    3d8a:	6f 2d       	mov	r22, r15
    3d8c:	f9 01       	movw	r30, r18
    3d8e:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    3d90:	ec 89       	ldd	r30, Y+20	; 0x14
    3d92:	fd 89       	ldd	r31, Y+21	; 0x15
    3d94:	31 96       	adiw	r30, 0x01	; 1
    3d96:	fd 8b       	std	Y+21, r31	; 0x15
    3d98:	ec 8b       	std	Y+20, r30	; 0x14
    3d9a:	31 97       	sbiw	r30, 0x01	; 1
    3d9c:	e4 91       	lpm	r30, Z+
    3d9e:	e9 8b       	std	Y+17, r30	; 0x11
					
					track->patchCurrDeltaTime=0;	
    3da0:	1a 8a       	std	Y+18, r1	; 0x12

			if(track->patchCommandStreamPos!=NULL && 
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    3da2:	9a 89       	ldd	r25, Y+18	; 0x12
    3da4:	89 89       	ldd	r24, Y+17	; 0x11
    3da6:	98 17       	cp	r25, r24
    3da8:	81 f2       	breq	.-96     	; 0x3d4a <ProcessMusic+0x2ce>
					track->patchCurrDeltaTime=0;	

				}		
			}				
			
			track->patchCurrDeltaTime++;
    3daa:	8a 89       	ldd	r24, Y+18	; 0x12
    3dac:	8f 5f       	subi	r24, 0xFF	; 255
    3dae:	8a 8b       	std	Y+18, r24	; 0x12
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    3db0:	88 81       	ld	r24, Y
    3db2:	85 fd       	sbrc	r24, 5
    3db4:	03 c0       	rjmp	.+6      	; 0x3dbc <ProcessMusic+0x340>
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	70 c0       	rjmp	.+224    	; 0x3e9c <ProcessMusic+0x420>
		
			if(track->patchPlayingTime<0xff){
    3dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    3dbe:	8f 3f       	cpi	r24, 0xFF	; 255
    3dc0:	11 f0       	breq	.+4      	; 0x3dc6 <ProcessMusic+0x34a>
				track->patchPlayingTime++;
    3dc2:	8f 5f       	subi	r24, 0xFF	; 255
    3dc4:	8b 8b       	std	Y+19, r24	; 0x13
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    3dc6:	88 81       	ld	r24, Y
    3dc8:	87 ff       	sbrs	r24, 7
    3dca:	02 c0       	rjmp	.+4      	; 0x3dd0 <ProcessMusic+0x354>
    3dcc:	8f ef       	ldi	r24, 0xFF	; 255
    3dce:	01 c0       	rjmp	.+2      	; 0x3dd2 <ProcessMusic+0x356>
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    3dd0:	8a 85       	ldd	r24, Y+10	; 0x0a
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    3dd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dd4:	99 23       	and	r25, r25
    3dd6:	09 f4       	brne	.+2      	; 0x3dda <ProcessMusic+0x35e>
    3dd8:	5b c0       	rjmp	.+182    	; 0x3e90 <ProcessMusic+0x414>
    3dda:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ddc:	22 23       	and	r18, r18
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <ProcessMusic+0x366>
    3de0:	57 c0       	rjmp	.+174    	; 0x3e90 <ProcessMusic+0x414>
    3de2:	88 23       	and	r24, r24
    3de4:	09 f4       	brne	.+2      	; 0x3de8 <ProcessMusic+0x36c>
    3de6:	54 c0       	rjmp	.+168    	; 0x3e90 <ProcessMusic+0x414>
    3de8:	40 91 d5 01 	lds	r20, 0x01D5
    3dec:	44 23       	and	r20, r20
    3dee:	09 f4       	brne	.+2      	; 0x3df2 <ProcessMusic+0x376>
    3df0:	4f c0       	rjmp	.+158    	; 0x3e90 <ProcessMusic+0x414>

				uVol=(track->noteVol*trackVol)+0x100;
    3df2:	89 9f       	mul	r24, r25
    3df4:	c0 01       	movw	r24, r0
    3df6:	11 24       	eor	r1, r1
    3df8:	80 50       	subi	r24, 0x00	; 0
    3dfa:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->envelopeVol)+0x100;
    3dfc:	89 2f       	mov	r24, r25
    3dfe:	99 27       	eor	r25, r25
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	b9 01       	movw	r22, r18
    3e04:	86 9f       	mul	r24, r22
    3e06:	90 01       	movw	r18, r0
    3e08:	87 9f       	mul	r24, r23
    3e0a:	30 0d       	add	r19, r0
    3e0c:	96 9f       	mul	r25, r22
    3e0e:	30 0d       	add	r19, r0
    3e10:	11 24       	eor	r1, r1
    3e12:	20 50       	subi	r18, 0x00	; 0
    3e14:	3f 4f       	sbci	r19, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->expressionVol)+0x100;
    3e16:	23 2f       	mov	r18, r19
    3e18:	33 27       	eor	r19, r19
    3e1a:	89 85       	ldd	r24, Y+9	; 0x09
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	fc 01       	movw	r30, r24
    3e20:	2e 9f       	mul	r18, r30
    3e22:	c0 01       	movw	r24, r0
    3e24:	2f 9f       	mul	r18, r31
    3e26:	90 0d       	add	r25, r0
    3e28:	3e 9f       	mul	r19, r30
    3e2a:	90 0d       	add	r25, r0
    3e2c:	11 24       	eor	r1, r1
    3e2e:	80 50       	subi	r24, 0x00	; 0
    3e30:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*masterVolume)+0x100;
    3e32:	89 2f       	mov	r24, r25
    3e34:	99 27       	eor	r25, r25
    3e36:	24 2f       	mov	r18, r20
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	ac 01       	movw	r20, r24
    3e3c:	42 9f       	mul	r20, r18
    3e3e:	c0 01       	movw	r24, r0
    3e40:	43 9f       	mul	r20, r19
    3e42:	90 0d       	add	r25, r0
    3e44:	52 9f       	mul	r21, r18
    3e46:	90 0d       	add	r25, r0
    3e48:	11 24       	eor	r1, r1
    3e4a:	80 50       	subi	r24, 0x00	; 0
    3e4c:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    3e4e:	29 2f       	mov	r18, r25
    3e50:	33 27       	eor	r19, r19

				if(track->tremoloLevel>0){					
    3e52:	8f 81       	ldd	r24, Y+7	; 0x07
    3e54:	88 23       	and	r24, r24
    3e56:	f1 f0       	breq	.+60     	; 0x3e94 <ProcessMusic+0x418>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    3e58:	ee 81       	ldd	r30, Y+6	; 0x06
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	e0 50       	subi	r30, 0x00	; 0
    3e5e:	fc 4b       	sbci	r31, 0xBC	; 188
    3e60:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
    3e62:	e0 58       	subi	r30, 0x80	; 128
    3e64:	e8 9f       	mul	r30, r24
    3e66:	c0 01       	movw	r24, r0
    3e68:	11 24       	eor	r1, r1
    3e6a:	80 50       	subi	r24, 0x00	; 0
    3e6c:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    3e6e:	89 2f       	mov	r24, r25
    3e70:	99 27       	eor	r25, r25
    3e72:	b5 01       	movw	r22, r10
    3e74:	68 1b       	sub	r22, r24
    3e76:	79 0b       	sbc	r23, r25
    3e78:	62 9f       	mul	r22, r18
    3e7a:	c0 01       	movw	r24, r0
    3e7c:	63 9f       	mul	r22, r19
    3e7e:	90 0d       	add	r25, r0
    3e80:	72 9f       	mul	r23, r18
    3e82:	90 0d       	add	r25, r0
    3e84:	11 24       	eor	r1, r1
    3e86:	80 50       	subi	r24, 0x00	; 0
    3e88:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    3e8a:	29 2f       	mov	r18, r25
    3e8c:	33 27       	eor	r19, r19
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <ProcessMusic+0x418>
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
			
			}else{
				uVol=0;
			}	

			track->tremoloPos+=track->tremoloRate;	
    3e94:	8e 81       	ldd	r24, Y+6	; 0x06
    3e96:	98 85       	ldd	r25, Y+8	; 0x08
    3e98:	89 0f       	add	r24, r25
    3e9a:	8e 83       	std	Y+6, r24	; 0x06

		}else{
			uVol=0;
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    3e9c:	f8 01       	movw	r30, r16
    3e9e:	20 83       	st	Z, r18


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    3ea0:	f3 94       	inc	r15
    3ea2:	66 96       	adiw	r28, 0x16	; 22
    3ea4:	0a 5f       	subi	r16, 0xFA	; 250
    3ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea8:	f5 e0       	ldi	r31, 0x05	; 5
    3eaa:	ff 16       	cp	r15, r31
    3eac:	09 f0       	breq	.+2      	; 0x3eb0 <ProcessMusic+0x434>
    3eae:	3e cf       	rjmp	.-388    	; 0x3d2c <ProcessMusic+0x2b0>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	1f 91       	pop	r17
    3eb6:	0f 91       	pop	r16
    3eb8:	ff 90       	pop	r15
    3eba:	ef 90       	pop	r14
    3ebc:	df 90       	pop	r13
    3ebe:	bf 90       	pop	r11
    3ec0:	af 90       	pop	r10
    3ec2:	08 95       	ret

00003ec4 <ReadVarLen>:



unsigned int ReadVarLen(const char **songPos)
{
    3ec4:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    3ec6:	ed 91       	ld	r30, X+
    3ec8:	fc 91       	ld	r31, X
    3eca:	11 97       	sbiw	r26, 0x01	; 1
    3ecc:	af 01       	movw	r20, r30
    3ece:	4f 5f       	subi	r20, 0xFF	; 255
    3ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed2:	11 96       	adiw	r26, 0x01	; 1
    3ed4:	5c 93       	st	X, r21
    3ed6:	4e 93       	st	-X, r20
    3ed8:	e4 91       	lpm	r30, Z+
    3eda:	2e 2f       	mov	r18, r30
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	e7 ff       	sbrs	r30, 7
    3ee0:	13 c0       	rjmp	.+38     	; 0x3f08 <ReadVarLen+0x44>
    {
       value &= 0x7F;
    3ee2:	2f 77       	andi	r18, 0x7F	; 127
    3ee4:	30 70       	andi	r19, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    3ee6:	36 95       	lsr	r19
    3ee8:	32 2f       	mov	r19, r18
    3eea:	22 27       	eor	r18, r18
    3eec:	37 95       	ror	r19
    3eee:	27 95       	ror	r18
    3ef0:	fa 01       	movw	r30, r20
    3ef2:	4f 5f       	subi	r20, 0xFF	; 255
    3ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef6:	e4 91       	lpm	r30, Z+
    3ef8:	8e 2f       	mov	r24, r30
    3efa:	8f 77       	andi	r24, 0x7F	; 127
    3efc:	28 0f       	add	r18, r24
    3efe:	31 1d       	adc	r19, r1
       } while (c & 0x80);
    3f00:	e7 fd       	sbrc	r30, 7
    3f02:	f1 cf       	rjmp	.-30     	; 0x3ee6 <ReadVarLen+0x22>
    3f04:	4d 93       	st	X+, r20
    3f06:	5c 93       	st	X, r21
    }


    return value;
}
    3f08:	c9 01       	movw	r24, r18
    3f0a:	08 95       	ret

00003f0c <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    3f0c:	ef 92       	push	r14
    3f0e:	ff 92       	push	r15
    3f10:	0f 93       	push	r16
    3f12:	1f 93       	push	r17
    3f14:	cf 93       	push	r28
    3f16:	df 93       	push	r29
    3f18:	18 2f       	mov	r17, r24
    3f1a:	f6 2e       	mov	r15, r22
    3f1c:	02 2f       	mov	r16, r18
	struct TrackStruct* track=&tracks[channel];
    3f1e:	86 e1       	ldi	r24, 0x16	; 22
    3f20:	18 9f       	mul	r17, r24
    3f22:	e0 01       	movw	r28, r0
    3f24:	11 24       	eor	r1, r1
    3f26:	ce 59       	subi	r28, 0x9E	; 158
    3f28:	de 4f       	sbci	r29, 0xFE	; 254
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    3f2a:	ee 24       	eor	r14, r14
    3f2c:	88 81       	ld	r24, Y
    3f2e:	87 ff       	sbrs	r24, 7
    3f30:	02 c0       	rjmp	.+4      	; 0x3f36 <TriggerCommon+0x2a>
    3f32:	ee 24       	eor	r14, r14
    3f34:	e3 94       	inc	r14

	track->patchCurrDeltaTime=0;
    3f36:	1a 8a       	std	Y+18, r1	; 0x12
	track->envelopeStep=0; 
    3f38:	1d 86       	std	Y+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    3f3a:	9f ef       	ldi	r25, 0xFF	; 255
    3f3c:	9c 87       	std	Y+12, r25	; 0x0c
	track->noteVol=volume;
    3f3e:	4b 87       	std	Y+11, r20	; 0x0b
	track->patchPlayingTime=0;
    3f40:	1b 8a       	std	Y+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    3f42:	88 81       	ld	r24, Y
    3f44:	80 62       	ori	r24, 0x20	; 32
    3f46:	87 7b       	andi	r24, 0xB7	; 183
    3f48:	88 83       	st	Y, r24
	track->tremoloLevel=0;
    3f4a:	1f 82       	std	Y+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    3f4c:	99 87       	std	Y+9, r25	; 0x09
	track->note=note;
    3f4e:	09 83       	std	Y+1, r16	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    3f50:	13 30       	cpi	r17, 0x03	; 3
    3f52:	69 f4       	brne	.+26     	; 0x3f6e <TriggerCommon+0x62>
			//noise channel		
			if(!isFx) patch=note;			
    3f54:	ee 20       	and	r14, r14
    3f56:	09 f4       	brne	.+2      	; 0x3f5a <TriggerCommon+0x4e>
    3f58:	f0 2e       	mov	r15, r16
			mixer.channels.type.noise.barrel=0x0101;				
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	91 e0       	ldi	r25, 0x01	; 1
    3f5e:	90 93 4f 01 	sts	0x014F, r25
    3f62:	80 93 4e 01 	sts	0x014E, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	80 93 4d 01 	sts	0x014D, r24
    3f6c:	34 c0       	rjmp	.+104    	; 0x3fd6 <TriggerCommon+0xca>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    3f6e:	14 30       	cpi	r17, 0x04	; 4
    3f70:	51 f5       	brne	.+84     	; 0x3fc6 <TriggerCommon+0xba>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    3f72:	10 92 55 01 	sts	0x0155, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    3f76:	89 e0       	ldi	r24, 0x09	; 9
    3f78:	f8 9e       	mul	r15, r24
    3f7a:	c0 01       	movw	r24, r0
    3f7c:	11 24       	eor	r1, r1
    3f7e:	20 91 d2 01 	lds	r18, 0x01D2
    3f82:	30 91 d3 01 	lds	r19, 0x01D3
    3f86:	28 0f       	add	r18, r24
    3f88:	39 1f       	adc	r19, r25
    3f8a:	f9 01       	movw	r30, r18
    3f8c:	31 96       	adiw	r30, 0x01	; 1
    3f8e:	45 91       	lpm	r20, Z+
    3f90:	54 91       	lpm	r21, Z+
				mixer.channels.type.pcm.position=pos;
    3f92:	50 93 57 01 	sts	0x0157, r21
    3f96:	40 93 56 01 	sts	0x0156, r20
				mixer.pcmLoopStart=pos+pgm_read_word(&(patchPointers[patch].loopStart));
    3f9a:	f9 01       	movw	r30, r18
    3f9c:	35 96       	adiw	r30, 0x05	; 5
    3f9e:	85 91       	lpm	r24, Z+
    3fa0:	94 91       	lpm	r25, Z+
    3fa2:	84 0f       	add	r24, r20
    3fa4:	95 1f       	adc	r25, r21
    3fa6:	90 93 59 01 	sts	0x0159, r25
    3faa:	80 93 58 01 	sts	0x0158, r24
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    3fae:	f9 01       	movw	r30, r18
    3fb0:	37 96       	adiw	r30, 0x07	; 7
    3fb2:	85 91       	lpm	r24, Z+
    3fb4:	94 91       	lpm	r25, Z+
    3fb6:	48 0f       	add	r20, r24
    3fb8:	59 1f       	adc	r21, r25
    3fba:	50 93 5b 01 	sts	0x015B, r21
    3fbe:	40 93 5a 01 	sts	0x015A, r20
				SetMixerNote(channel,note);
    3fc2:	84 e0       	ldi	r24, 0x04	; 4
    3fc4:	05 c0       	rjmp	.+10     	; 0x3fd0 <TriggerCommon+0xc4>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    3fc6:	81 2f       	mov	r24, r17
    3fc8:	60 e0       	ldi	r22, 0x00	; 0
    3fca:	0e 94 bc 20 	call	0x4178	; 0x4178 <SetMixerWave>
			SetMixerNote(channel,note);
    3fce:	81 2f       	mov	r24, r17
    3fd0:	60 2f       	mov	r22, r16
    3fd2:	0e 94 a5 20 	call	0x414a	; 0x414a <SetMixerNote>

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    3fd6:	ee 20       	and	r14, r14
    3fd8:	11 f0       	breq	.+4      	; 0x3fde <TriggerCommon+0xd2>
		track->fxPatchNo=patch;
    3fda:	ff 86       	std	Y+15, r15	; 0x0f
    3fdc:	01 c0       	rjmp	.+2      	; 0x3fe0 <TriggerCommon+0xd4>
	}else{
		track->patchNo=patch;	
    3fde:	fe 86       	std	Y+14, r15	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    3fe0:	89 e0       	ldi	r24, 0x09	; 9
    3fe2:	f8 9e       	mul	r15, r24
    3fe4:	c0 01       	movw	r24, r0
    3fe6:	11 24       	eor	r1, r1
    3fe8:	e0 91 d2 01 	lds	r30, 0x01D2
    3fec:	f0 91 d3 01 	lds	r31, 0x01D3
    3ff0:	e8 0f       	add	r30, r24
    3ff2:	f9 1f       	adc	r31, r25
    3ff4:	33 96       	adiw	r30, 0x03	; 3
    3ff6:	25 91       	lpm	r18, Z+
    3ff8:	34 91       	lpm	r19, Z+
	if(pos==NULL){
    3ffa:	21 15       	cp	r18, r1
    3ffc:	31 05       	cpc	r19, r1
    3ffe:	19 f4       	brne	.+6      	; 0x4006 <TriggerCommon+0xfa>
		track->patchCommandStreamPos=NULL;
    4000:	1d 8a       	std	Y+21, r1	; 0x15
    4002:	1c 8a       	std	Y+20, r1	; 0x14
    4004:	07 c0       	rjmp	.+14     	; 0x4014 <TriggerCommon+0x108>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    4006:	f9 01       	movw	r30, r18
    4008:	84 91       	lpm	r24, Z+
    400a:	89 8b       	std	Y+17, r24	; 0x11
		track->patchCommandStreamPos=pos;
    400c:	2f 5f       	subi	r18, 0xFF	; 255
    400e:	3f 4f       	sbci	r19, 0xFF	; 255
    4010:	3d 8b       	std	Y+21, r19	; 0x15
    4012:	2c 8b       	std	Y+20, r18	; 0x14
	}

}
    4014:	df 91       	pop	r29
    4016:	cf 91       	pop	r28
    4018:	1f 91       	pop	r17
    401a:	0f 91       	pop	r16
    401c:	ff 90       	pop	r15
    401e:	ef 90       	pop	r14
    4020:	08 95       	ret

00004022 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    4022:	58 2f       	mov	r21, r24
    4024:	76 2f       	mov	r23, r22
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    4026:	89 e0       	ldi	r24, 0x09	; 9
    4028:	58 9f       	mul	r21, r24
    402a:	c0 01       	movw	r24, r0
    402c:	11 24       	eor	r1, r1
    402e:	e0 91 d2 01 	lds	r30, 0x01D2
    4032:	f0 91 d3 01 	lds	r31, 0x01D3
    4036:	e8 0f       	add	r30, r24
    4038:	f9 1f       	adc	r31, r25
    403a:	84 91       	lpm	r24, Z+

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    403c:	81 30       	cpi	r24, 0x01	; 1
    403e:	11 f4       	brne	.+4      	; 0x4044 <TriggerFx+0x22>
    4040:	43 e0       	ldi	r20, 0x03	; 3
    4042:	21 c0       	rjmp	.+66     	; 0x4086 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    4044:	82 30       	cpi	r24, 0x02	; 2
    4046:	11 f4       	brne	.+4      	; 0x404c <TriggerFx+0x2a>
    4048:	44 e0       	ldi	r20, 0x04	; 4
    404a:	1d c0       	rjmp	.+58     	; 0x4086 <TriggerFx+0x64>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    404c:	80 91 78 01 	lds	r24, 0x0178
    4050:	87 ff       	sbrs	r24, 7
    4052:	16 c0       	rjmp	.+44     	; 0x4080 <TriggerFx+0x5e>
    4054:	80 91 87 01 	lds	r24, 0x0187
    4058:	85 17       	cp	r24, r21
    405a:	11 f4       	brne	.+4      	; 0x4060 <TriggerFx+0x3e>
    405c:	44 23       	and	r20, r20
    405e:	81 f4       	brne	.+32     	; 0x4080 <TriggerFx+0x5e>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    4060:	80 91 8e 01 	lds	r24, 0x018E
    4064:	87 ff       	sbrs	r24, 7
    4066:	0e c0       	rjmp	.+28     	; 0x4084 <TriggerFx+0x62>
    4068:	80 91 9d 01 	lds	r24, 0x019D
    406c:	85 17       	cp	r24, r21
    406e:	11 f4       	brne	.+4      	; 0x4074 <TriggerFx+0x52>
    4070:	44 23       	and	r20, r20
    4072:	41 f4       	brne	.+16     	; 0x4084 <TriggerFx+0x62>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    4074:	90 91 8b 01 	lds	r25, 0x018B
    4078:	80 91 a1 01 	lds	r24, 0x01A1
    407c:	89 17       	cp	r24, r25
    407e:	10 f4       	brcc	.+4      	; 0x4084 <TriggerFx+0x62>
    4080:	41 e0       	ldi	r20, 0x01	; 1
    4082:	01 c0       	rjmp	.+2      	; 0x4086 <TriggerFx+0x64>
    4084:	42 e0       	ldi	r20, 0x02	; 2
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    4086:	24 2f       	mov	r18, r20
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	86 e1       	ldi	r24, 0x16	; 22
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	28 9f       	mul	r18, r24
    4090:	f0 01       	movw	r30, r0
    4092:	29 9f       	mul	r18, r25
    4094:	f0 0d       	add	r31, r0
    4096:	38 9f       	mul	r19, r24
    4098:	f0 0d       	add	r31, r0
    409a:	11 24       	eor	r1, r1
    409c:	ee 59       	subi	r30, 0x9E	; 158
    409e:	fe 4f       	sbci	r31, 0xFE	; 254
    40a0:	80 81       	ld	r24, Z
    40a2:	80 68       	ori	r24, 0x80	; 128
    40a4:	80 83       	st	Z, r24
	TriggerCommon(channel,patch,volume,80);
    40a6:	84 2f       	mov	r24, r20
    40a8:	65 2f       	mov	r22, r21
    40aa:	47 2f       	mov	r20, r23
    40ac:	20 e5       	ldi	r18, 0x50	; 80
    40ae:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <TriggerCommon>
}
    40b2:	08 95       	ret

000040b4 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    40b4:	1f 93       	push	r17
    40b6:	78 2f       	mov	r23, r24
    40b8:	14 2f       	mov	r17, r20

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    40ba:	a8 2f       	mov	r26, r24
    40bc:	b0 e0       	ldi	r27, 0x00	; 0
    40be:	86 e1       	ldi	r24, 0x16	; 22
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	a8 9f       	mul	r26, r24
    40c4:	f0 01       	movw	r30, r0
    40c6:	a9 9f       	mul	r26, r25
    40c8:	f0 0d       	add	r31, r0
    40ca:	b8 9f       	mul	r27, r24
    40cc:	f0 0d       	add	r31, r0
    40ce:	11 24       	eor	r1, r1
    40d0:	ee 59       	subi	r30, 0x9E	; 158
    40d2:	fe 4f       	sbci	r31, 0xFE	; 254
    40d4:	30 81       	ld	r19, Z
    40d6:	53 2f       	mov	r21, r19
    40d8:	35 ff       	sbrs	r19, 5
    40da:	02 c0       	rjmp	.+4      	; 0x40e0 <TriggerNote+0x2c>
    40dc:	37 fd       	sbrc	r19, 7
    40de:	33 c0       	rjmp	.+102    	; 0x4146 <TriggerNote+0x92>
			
		if(volume==0){ //note-off received
    40e0:	22 23       	and	r18, r18
    40e2:	f9 f4       	brne	.+62     	; 0x4122 <TriggerNote+0x6e>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    40e4:	86 e1       	ldi	r24, 0x16	; 22
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	a8 9f       	mul	r26, r24
    40ea:	f0 01       	movw	r30, r0
    40ec:	a9 9f       	mul	r26, r25
    40ee:	f0 0d       	add	r31, r0
    40f0:	b8 9f       	mul	r27, r24
    40f2:	f0 0d       	add	r31, r0
    40f4:	11 24       	eor	r1, r1
    40f6:	ee 59       	subi	r30, 0x9E	; 158
    40f8:	fe 4f       	sbci	r31, 0xFE	; 254
    40fa:	85 85       	ldd	r24, Z+13	; 0x0d
    40fc:	88 23       	and	r24, r24
    40fe:	11 f4       	brne	.+4      	; 0x4104 <TriggerNote+0x50>
    4100:	56 ff       	sbrs	r21, 6
				tracks[channel].noteVol=0;	
    4102:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    4104:	86 e1       	ldi	r24, 0x16	; 22
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	a8 9f       	mul	r26, r24
    410a:	f0 01       	movw	r30, r0
    410c:	a9 9f       	mul	r26, r25
    410e:	f0 0d       	add	r31, r0
    4110:	b8 9f       	mul	r27, r24
    4112:	f0 0d       	add	r31, r0
    4114:	11 24       	eor	r1, r1
    4116:	ee 59       	subi	r30, 0x9E	; 158
    4118:	fe 4f       	sbci	r31, 0xFE	; 254
    411a:	80 81       	ld	r24, Z
    411c:	8f 7b       	andi	r24, 0xBF	; 191
    411e:	80 83       	st	Z, r24
    4120:	12 c0       	rjmp	.+36     	; 0x4146 <TriggerNote+0x92>
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    4122:	86 e1       	ldi	r24, 0x16	; 22
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	a8 9f       	mul	r26, r24
    4128:	f0 01       	movw	r30, r0
    412a:	a9 9f       	mul	r26, r25
    412c:	f0 0d       	add	r31, r0
    412e:	b8 9f       	mul	r27, r24
    4130:	f0 0d       	add	r31, r0
    4132:	11 24       	eor	r1, r1
    4134:	ee 59       	subi	r30, 0x9E	; 158
    4136:	fe 4f       	sbci	r31, 0xFE	; 254
    4138:	3f 77       	andi	r19, 0x7F	; 127
    413a:	30 83       	st	Z, r19
			TriggerCommon(channel,patch,volume,note);
    413c:	87 2f       	mov	r24, r23
    413e:	42 2f       	mov	r20, r18
    4140:	21 2f       	mov	r18, r17
    4142:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <TriggerCommon>
		}

	}
}
    4146:	1f 91       	pop	r17
    4148:	08 95       	ret

0000414a <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    414a:	99 27       	eor	r25, r25
	clr r23
    414c:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    414e:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    4150:	09 f4       	brne	.+2      	; 0x4154 <set_note_waves>
		ret
    4152:	08 95       	ret

00004154 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    4154:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    4156:	f2 e4       	ldi	r31, 0x42	; 66
	lsl r22
    4158:	66 0f       	add	r22, r22
	rol r23
    415a:	77 1f       	adc	r23, r23
	add ZL,r22
    415c:	e6 0f       	add	r30, r22
	adc ZH,r23	
    415e:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    4160:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    4162:	b4 91       	lpm	r27, Z+

	ldi ZL,lo8(mixerStruct)
    4164:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(mixerStruct)
    4166:	f1 e0       	ldi	r31, 0x01	; 1
	ldi r18,CHANNEL_STRUCT_SIZE
    4168:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    416a:	28 9f       	mul	r18, r24
	add ZL,r0
    416c:	e0 0d       	add	r30, r0
	adc ZH,r1
    416e:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    4170:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    4172:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    4174:	11 24       	eor	r1, r1
	

	ret
    4176:	08 95       	ret

00004178 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    4178:	99 27       	eor	r25, r25
	clr r23
    417a:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    417c:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(mixerStruct)
    417e:	f1 e0       	ldi	r31, 0x01	; 1
	ldi r18,CHANNEL_STRUCT_SIZE
    4180:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    4182:	28 9f       	mul	r18, r24
	add ZL,r0
    4184:	e0 0d       	add	r30, r0
	adc ZH,r1
    4186:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    4188:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    418a:	31 f4       	brne	.+12     	; 0x4198 <smw1>
	lds r22,tr4_params
    418c:	60 91 4d 01 	lds	r22, 0x014D
	andi r22,0xfe;
    4190:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    4192:	60 93 4d 01 	sts	0x014D, r22
	rjmp esmw	
    4196:	0b c0       	rjmp	.+22     	; 0x41ae <esmw>

00004198 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    4198:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    419a:	31 f4       	brne	.+12     	; 0x41a8 <smw2>
	lds r22,tr4_params
    419c:	60 91 4d 01 	lds	r22, 0x014D
	ori r22,0xfe;
    41a0:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    41a2:	60 93 4d 01 	sts	0x014D, r22
	rjmp esmw
    41a6:	03 c0       	rjmp	.+6      	; 0x41ae <esmw>

000041a8 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    41a8:	74 e4       	ldi	r23, 0x44	; 68
	add r23,r22
    41aa:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    41ac:	75 83       	std	Z+5, r23	; 0x05

000041ae <esmw>:

esmw:
	clr r1	
    41ae:	11 24       	eor	r1, r1
	ret
    41b0:	08 95       	ret
	...

00004200 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    4200:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    4202:	80 93 39 01 	sts	0x0139, r24
	ret
    4206:	08 95       	ret

00004208 <steptable>:
    4208:	22 00       	.word	0x0022	; ????
    420a:	24 00       	.word	0x0024	; ????
    420c:	26 00       	.word	0x0026	; ????
    420e:	28 00       	.word	0x0028	; ????
    4210:	2b 00       	.word	0x002b	; ????
    4212:	2d 00       	.word	0x002d	; ????
    4214:	30 00       	.word	0x0030	; ????
    4216:	33 00       	.word	0x0033	; ????
    4218:	36 00       	.word	0x0036	; ????
    421a:	39 00       	.word	0x0039	; ????
    421c:	3d 00       	.word	0x003d	; ????
    421e:	40 00       	.word	0x0040	; ????
    4220:	44 00       	.word	0x0044	; ????
    4222:	48 00       	.word	0x0048	; ????
    4224:	4c 00       	.word	0x004c	; ????
    4226:	51 00       	.word	0x0051	; ????
    4228:	56 00       	.word	0x0056	; ????
    422a:	5b 00       	.word	0x005b	; ????
    422c:	60 00       	.word	0x0060	; ????
    422e:	66 00       	.word	0x0066	; ????
    4230:	6c 00       	.word	0x006c	; ????
    4232:	73 00       	.word	0x0073	; ????
    4234:	79 00       	.word	0x0079	; ????
    4236:	81 00       	.word	0x0081	; ????
    4238:	88 00       	.word	0x0088	; ????
    423a:	90 00       	.word	0x0090	; ????
    423c:	99 00       	.word	0x0099	; ????
    423e:	a2 00       	.word	0x00a2	; ????
    4240:	ac 00       	.word	0x00ac	; ????
    4242:	b6 00       	.word	0x00b6	; ????
    4244:	c1 00       	.word	0x00c1	; ????
    4246:	cc 00       	.word	0x00cc	; ????
    4248:	d8 00       	.word	0x00d8	; ????
    424a:	e5 00       	.word	0x00e5	; ????
    424c:	f3 00       	.word	0x00f3	; ????
    424e:	01 01       	movw	r0, r2
    4250:	10 01       	movw	r2, r0
    4252:	21 01       	movw	r4, r2
    4254:	32 01       	movw	r6, r4
    4256:	44 01       	movw	r8, r8
    4258:	57 01       	movw	r10, r14
    425a:	6c 01       	movw	r12, r24
    425c:	81 01       	movw	r16, r2
    425e:	98 01       	movw	r18, r16
    4260:	b0 01       	movw	r22, r0
    4262:	ca 01       	movw	r24, r20
    4264:	e5 01       	movw	r28, r10
    4266:	02 02       	muls	r16, r18
    4268:	21 02       	muls	r18, r17
    426a:	41 02       	muls	r20, r17
    426c:	64 02       	muls	r22, r20
    426e:	88 02       	muls	r24, r24
    4270:	ae 02       	muls	r26, r30
    4272:	d7 02       	muls	r29, r23
    4274:	03 03       	mulsu	r16, r19
    4276:	30 03       	mulsu	r19, r16
    4278:	61 03       	mulsu	r22, r17
    427a:	94 03       	fmuls	r17, r20
    427c:	cb 03       	fmulsu	r20, r19
    427e:	05 04       	cpc	r0, r5
    4280:	42 04       	cpc	r4, r2
    4282:	83 04       	cpc	r8, r3
    4284:	c7 04       	cpc	r12, r7
    4286:	10 05       	cpc	r17, r0
    4288:	5d 05       	cpc	r21, r13
    428a:	af 05       	cpc	r26, r15
    428c:	05 06       	cpc	r0, r21
    428e:	61 06       	cpc	r6, r17
    4290:	c2 06       	cpc	r12, r18
    4292:	29 07       	cpc	r18, r25
    4294:	96 07       	cpc	r25, r22
    4296:	09 08       	sbc	r0, r9
    4298:	83 08       	sbc	r8, r3
    429a:	05 09       	sbc	r16, r5
    429c:	8e 09       	sbc	r24, r14
    429e:	20 0a       	sbc	r2, r16
    42a0:	ba 0a       	sbc	r11, r26
    42a2:	5d 0b       	sbc	r21, r29
    42a4:	0a 0c       	add	r0, r10
    42a6:	c1 0c       	add	r12, r1
    42a8:	84 0d       	add	r24, r4
    42aa:	51 0e       	add	r5, r17
    42ac:	2b 0f       	add	r18, r27
    42ae:	12 10       	cpse	r1, r2
    42b0:	07 11       	cpse	r16, r7
    42b2:	0a 12       	cpse	r0, r26
    42b4:	1d 13       	cpse	r17, r29
    42b6:	40 14       	cp	r4, r0
    42b8:	74 15       	cp	r23, r4
    42ba:	ba 16       	cp	r11, r26
    42bc:	14 18       	sub	r1, r4
    42be:	83 19       	sub	r24, r3
    42c0:	07 1b       	sub	r16, r23
    42c2:	a3 1c       	adc	r10, r3
    42c4:	57 1e       	adc	r5, r23
    42c6:	24 20       	and	r2, r4
    42c8:	0e 22       	and	r0, r30
    42ca:	14 24       	eor	r1, r4
    42cc:	39 26       	eor	r3, r25
    42ce:	7f 28       	or	r7, r15
    42d0:	e8 2a       	or	r14, r24
    42d2:	75 2d       	mov	r23, r5
    42d4:	29 30       	cpi	r18, 0x09	; 9
    42d6:	06 33       	cpi	r16, 0x36	; 54
    42d8:	0f 36       	cpi	r16, 0x6F	; 111
    42da:	45 39       	cpi	r20, 0x95	; 149
    42dc:	ad 3c       	cpi	r26, 0xCD	; 205
    42de:	49 40       	sbci	r20, 0x09	; 9
    42e0:	1b 44       	sbci	r17, 0x4B	; 75
    42e2:	28 48       	sbci	r18, 0x88	; 136
    42e4:	73 4c       	sbci	r23, 0xC3	; 195
    42e6:	fe 50       	subi	r31, 0x0E	; 14
    42e8:	cf 55       	subi	r28, 0x5F	; 95
    42ea:	ea 5a       	subi	r30, 0xAA	; 170
    42ec:	51 60       	ori	r21, 0x01	; 1
    42ee:	0c 66       	ori	r16, 0x6C	; 108
    42f0:	1d 6c       	ori	r17, 0xCD	; 205
    42f2:	8b 72       	andi	r24, 0x2B	; 43
    42f4:	5a 79       	andi	r21, 0x9A	; 154
    42f6:	92 80       	ldd	r9, Z+2	; 0x02
    42f8:	37 88       	ldd	r3, Z+23	; 0x17
    42fa:	50 90 e5 98 	lds	r5, 0x98E5
    42fe:	fd a1       	ldd	r31, Y+37	; 0x25
    4300:	9f ab       	std	Y+55, r25	; 0x37
    4302:	d3 b5       	in	r29, 0x23	; 35
    4304:	a3 c0       	rjmp	.+326    	; 0x444c <waves+0x4c>
	...

00004400 <waves>:
    4400:	00 03       	mulsu	r16, r16
    4402:	06 09       	sbc	r16, r6
    4404:	0c 10       	cpse	r0, r12
    4406:	13 16       	cp	r1, r19
    4408:	19 1c       	adc	r1, r9
    440a:	1f 22       	and	r1, r31
    440c:	25 28       	or	r2, r5
    440e:	2b 2e       	mov	r2, r27
    4410:	31 33       	cpi	r19, 0x31	; 49
    4412:	36 39       	cpi	r19, 0x96	; 150
    4414:	3c 3f       	cpi	r19, 0xFC	; 252
    4416:	41 44       	sbci	r20, 0x41	; 65
    4418:	47 49       	sbci	r20, 0x97	; 151
    441a:	4c 4e       	sbci	r20, 0xEC	; 236
    441c:	51 53       	subi	r21, 0x31	; 49
    441e:	55 58       	subi	r21, 0x85	; 133
    4420:	5a 5c       	subi	r21, 0xCA	; 202
    4422:	5e 60       	ori	r21, 0x0E	; 14
    4424:	62 64       	ori	r22, 0x42	; 66
    4426:	66 68       	ori	r22, 0x86	; 134
    4428:	6a 6b       	ori	r22, 0xBA	; 186
    442a:	6d 6f       	ori	r22, 0xFD	; 253
    442c:	70 71       	andi	r23, 0x10	; 16
    442e:	73 74       	andi	r23, 0x43	; 67
    4430:	75 76       	andi	r23, 0x65	; 101
    4432:	78 79       	andi	r23, 0x98	; 152
    4434:	7a 7a       	andi	r23, 0xAA	; 170
    4436:	7b 7c       	andi	r23, 0xCB	; 203
    4438:	7d 7d       	andi	r23, 0xDD	; 221
    443a:	7e 7e       	andi	r23, 0xEE	; 238
    443c:	7e 7f       	andi	r23, 0xFE	; 254
    443e:	7f 7f       	andi	r23, 0xFF	; 255
    4440:	7f 7f       	andi	r23, 0xFF	; 255
    4442:	7f 7f       	andi	r23, 0xFF	; 255
    4444:	7e 7e       	andi	r23, 0xEE	; 238
    4446:	7e 7d       	andi	r23, 0xDE	; 222
    4448:	7d 7c       	andi	r23, 0xCD	; 205
    444a:	7b 7a       	andi	r23, 0xAB	; 171
    444c:	7a 79       	andi	r23, 0x9A	; 154
    444e:	78 76       	andi	r23, 0x68	; 104
    4450:	75 74       	andi	r23, 0x45	; 69
    4452:	73 71       	andi	r23, 0x13	; 19
    4454:	70 6f       	ori	r23, 0xF0	; 240
    4456:	6d 6b       	ori	r22, 0xBD	; 189
    4458:	6a 68       	ori	r22, 0x8A	; 138
    445a:	66 64       	ori	r22, 0x46	; 70
    445c:	62 60       	ori	r22, 0x02	; 2
    445e:	5e 5c       	subi	r21, 0xCE	; 206
    4460:	5a 58       	subi	r21, 0x8A	; 138
    4462:	55 53       	subi	r21, 0x35	; 53
    4464:	51 4e       	sbci	r21, 0xE1	; 225
    4466:	4c 49       	sbci	r20, 0x9C	; 156
    4468:	47 44       	sbci	r20, 0x47	; 71
    446a:	41 3f       	cpi	r20, 0xF1	; 241
    446c:	3c 39       	cpi	r19, 0x9C	; 156
    446e:	36 33       	cpi	r19, 0x36	; 54
    4470:	31 2e       	mov	r3, r17
    4472:	2b 28       	or	r2, r11
    4474:	25 22       	and	r2, r21
    4476:	1f 1c       	adc	r1, r15
    4478:	19 16       	cp	r1, r25
    447a:	13 10       	cpse	r1, r3
    447c:	0c 09       	sbc	r16, r12
    447e:	06 03       	mulsu	r16, r22
    4480:	00 fd       	sbrc	r16, 0
    4482:	fa f7       	brpl	.-2      	; 0x4482 <waves+0x82>
    4484:	f4 f0       	brlt	.+60     	; 0x44c2 <waves+0xc2>
    4486:	ed ea       	ldi	r30, 0xAD	; 173
    4488:	e7 e4       	ldi	r30, 0x47	; 71
    448a:	e1 de       	rcall	.-574    	; 0x424e <steptable+0x46>
    448c:	db d8       	rcall	.-3658   	; 0x3644 <AddBCD_No_Nibble_2_Overflow+0x2>
    448e:	d5 d2       	rcall	.+1450   	; 0x4a3a <waves+0x63a>
    4490:	cf cd       	rjmp	.-1122   	; 0x4030 <TriggerFx+0xe>
    4492:	ca c7       	rjmp	.+3988   	; 0x5428 <playGameOverMessage+0x22>
    4494:	c4 c1       	rjmp	.+904    	; 0x481e <waves+0x41e>
    4496:	bf bc       	out	0x2f, r11	; 47
    4498:	b9 b7       	in	r27, 0x39	; 57
    449a:	b4 b2       	in	r11, 0x14	; 20
    449c:	af ad       	ldd	r26, Y+63	; 0x3f
    449e:	ab a8       	ldd	r10, Y+51	; 0x33
    44a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    44a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    44a4:	9e 9c       	mul	r9, r14
    44a6:	9a 98       	cbi	0x13, 2	; 19
    44a8:	96 95       	lsr	r25
    44aa:	93 91       	.word	0x9193	; ????
    44ac:	90 8f       	std	Z+24, r25	; 0x18
    44ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    44b0:	8b 8a       	std	Y+19, r8	; 0x13
    44b2:	88 87       	std	Y+8, r24	; 0x08
    44b4:	86 86       	std	Z+14, r8	; 0x0e
    44b6:	85 84       	ldd	r8, Z+13	; 0x0d
    44b8:	83 83       	std	Z+3, r24	; 0x03
    44ba:	82 82       	std	Z+2, r8	; 0x02
    44bc:	82 81       	ldd	r24, Z+2	; 0x02
    44be:	81 81       	ldd	r24, Z+1	; 0x01
    44c0:	81 81       	ldd	r24, Z+1	; 0x01
    44c2:	81 81       	ldd	r24, Z+1	; 0x01
    44c4:	82 82       	std	Z+2, r8	; 0x02
    44c6:	82 83       	std	Z+2, r24	; 0x02
    44c8:	83 84       	ldd	r8, Z+11	; 0x0b
    44ca:	85 86       	std	Z+13, r8	; 0x0d
    44cc:	86 87       	std	Z+14, r24	; 0x0e
    44ce:	88 8a       	std	Y+16, r8	; 0x10
    44d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    44d2:	8d 8f       	std	Y+29, r24	; 0x1d
    44d4:	90 91 93 95 	lds	r25, 0x9593
    44d8:	96 98       	cbi	0x12, 6	; 18
    44da:	9a 9c       	mul	r9, r10
    44dc:	9e a0       	ldd	r9, Y+38	; 0x26
    44de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    44e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    44e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    44e4:	af b2       	in	r10, 0x1f	; 31
    44e6:	b4 b7       	in	r27, 0x34	; 52
    44e8:	b9 bc       	out	0x29, r11	; 41
    44ea:	bf c1       	rjmp	.+894    	; 0x486a <waves+0x46a>
    44ec:	c4 c7       	rjmp	.+3976   	; 0x5476 <playGameOverMessage+0x70>
    44ee:	ca cd       	rjmp	.-1132   	; 0x4084 <TriggerFx+0x62>
    44f0:	cf d2       	rcall	.+1438   	; 0x4a90 <waves+0x690>
    44f2:	d5 d8       	rcall	.-3670   	; 0x369e <Mode7PutCharFastC+0x1a>
    44f4:	db de       	rcall	.-586    	; 0x42ac <steptable+0xa4>
    44f6:	e1 e4       	ldi	r30, 0x41	; 65
    44f8:	e7 ea       	ldi	r30, 0xA7	; 167
    44fa:	ed f0       	brhs	.+58     	; 0x4536 <waves+0x136>
    44fc:	f4 f7       	brge	.-4      	; 0x44fa <waves+0xfa>
    44fe:	fa fd       	.word	0xfdfa	; ????
    4500:	80 81       	ld	r24, Z
    4502:	82 83       	std	Z+2, r24	; 0x02
    4504:	84 85       	ldd	r24, Z+12	; 0x0c
    4506:	86 87       	std	Z+14, r24	; 0x0e
    4508:	88 89       	ldd	r24, Y+16	; 0x10
    450a:	8a 8b       	std	Y+18, r24	; 0x12
    450c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    450e:	8e 8f       	std	Y+30, r24	; 0x1e
    4510:	90 91 92 93 	lds	r25, 0x9392
    4514:	94 95       	.word	0x9594	; ????
    4516:	96 97       	sbiw	r26, 0x26	; 38
    4518:	98 99       	sbic	0x13, 0	; 19
    451a:	9a 9b       	sbis	0x13, 2	; 19
    451c:	9c 9d       	mul	r25, r12
    451e:	9e 9f       	mul	r25, r30
    4520:	a0 a1       	ldd	r26, Z+32	; 0x20
    4522:	a2 a3       	std	Z+34, r26	; 0x22
    4524:	a4 a5       	ldd	r26, Z+44	; 0x2c
    4526:	a6 a7       	std	Z+46, r26	; 0x2e
    4528:	a8 a9       	ldd	r26, Y+48	; 0x30
    452a:	aa ab       	std	Y+50, r26	; 0x32
    452c:	ac ad       	ldd	r26, Y+60	; 0x3c
    452e:	ae af       	std	Y+62, r26	; 0x3e
    4530:	b0 b1       	in	r27, 0x00	; 0
    4532:	b2 b3       	in	r27, 0x12	; 18
    4534:	b4 b5       	in	r27, 0x24	; 36
    4536:	b6 b7       	in	r27, 0x36	; 54
    4538:	b8 b9       	out	0x08, r27	; 8
    453a:	ba bb       	out	0x1a, r27	; 26
    453c:	bc bd       	out	0x2c, r27	; 44
    453e:	be bf       	out	0x3e, r27	; 62
    4540:	c0 c1       	rjmp	.+896    	; 0x48c2 <waves+0x4c2>
    4542:	c2 c3       	rjmp	.+1924   	; 0x4cc8 <waves+0x8c8>
    4544:	c4 c5       	rjmp	.+2952   	; 0x50ce <DrawPlayField+0x40>
    4546:	c6 c7       	rjmp	.+3980   	; 0x54d4 <playGameOverMessage+0xce>
    4548:	c8 c9       	rjmp	.-3184   	; 0x38da <FormatEeprom+0x22>
    454a:	ca cb       	rjmp	.-2156   	; 0x3ce0 <ProcessMusic+0x264>
    454c:	cc cd       	rjmp	.-1128   	; 0x40e6 <TriggerNote+0x32>
    454e:	ce cf       	rjmp	.-100    	; 0x44ec <waves+0xec>
    4550:	d0 d1       	rcall	.+928    	; 0x48f2 <waves+0x4f2>
    4552:	d2 d3       	rcall	.+1956   	; 0x4cf8 <waves+0x8f8>
    4554:	d4 d5       	rcall	.+2984   	; 0x50fe <DrawPlayField+0x70>
    4556:	d6 d7       	rcall	.+4012   	; 0x5504 <playGameOverMessage+0xfe>
    4558:	d8 d9       	rcall	.-3152   	; 0x390a <isEepromFormatted+0xc>
    455a:	da db       	rcall	.-2124   	; 0x3d10 <ProcessMusic+0x294>
    455c:	dc dd       	rcall	.-1096   	; 0x4116 <TriggerNote+0x62>
    455e:	de df       	rcall	.-68     	; 0x451c <waves+0x11c>
    4560:	e0 e1       	ldi	r30, 0x10	; 16
    4562:	e2 e3       	ldi	r30, 0x32	; 50
    4564:	e4 e5       	ldi	r30, 0x54	; 84
    4566:	e6 e7       	ldi	r30, 0x76	; 118
    4568:	e8 e9       	ldi	r30, 0x98	; 152
    456a:	ea eb       	ldi	r30, 0xBA	; 186
    456c:	ec ed       	ldi	r30, 0xDC	; 220
    456e:	ee ef       	ldi	r30, 0xFE	; 254
    4570:	f0 f1       	brcs	.+124    	; 0x45ee <waves+0x1ee>
    4572:	f2 f3       	brmi	.-4      	; 0x4570 <waves+0x170>
    4574:	f4 f5       	brge	.+124    	; 0x45f2 <waves+0x1f2>
    4576:	f6 f7       	brtc	.-4      	; 0x4574 <waves+0x174>
    4578:	f8 f9       	.word	0xf9f8	; ????
    457a:	fa fb       	.word	0xfbfa	; ????
    457c:	fc fd       	.word	0xfdfc	; ????
    457e:	fe ff       	.word	0xfffe	; ????
    4580:	00 01       	movw	r0, r0
    4582:	02 03       	mulsu	r16, r18
    4584:	04 05       	cpc	r16, r4
    4586:	06 07       	cpc	r16, r22
    4588:	08 09       	sbc	r16, r8
    458a:	0a 0b       	sbc	r16, r26
    458c:	0c 0d       	add	r16, r12
    458e:	0e 0f       	add	r16, r30
    4590:	10 11       	cpse	r17, r0
    4592:	12 13       	cpse	r17, r18
    4594:	14 15       	cp	r17, r4
    4596:	16 17       	cp	r17, r22
    4598:	18 19       	sub	r17, r8
    459a:	1a 1b       	sub	r17, r26
    459c:	1c 1d       	adc	r17, r12
    459e:	1e 1f       	adc	r17, r30
    45a0:	20 21       	and	r18, r0
    45a2:	22 23       	and	r18, r18
    45a4:	24 25       	eor	r18, r4
    45a6:	26 27       	eor	r18, r22
    45a8:	28 29       	or	r18, r8
    45aa:	2a 2b       	or	r18, r26
    45ac:	2c 2d       	mov	r18, r12
    45ae:	2e 2f       	mov	r18, r30
    45b0:	30 31       	cpi	r19, 0x10	; 16
    45b2:	32 33       	cpi	r19, 0x32	; 50
    45b4:	34 35       	cpi	r19, 0x54	; 84
    45b6:	36 37       	cpi	r19, 0x76	; 118
    45b8:	38 39       	cpi	r19, 0x98	; 152
    45ba:	3a 3b       	cpi	r19, 0xBA	; 186
    45bc:	3c 3d       	cpi	r19, 0xDC	; 220
    45be:	3e 3f       	cpi	r19, 0xFE	; 254
    45c0:	40 41       	sbci	r20, 0x10	; 16
    45c2:	42 43       	sbci	r20, 0x32	; 50
    45c4:	44 45       	sbci	r20, 0x54	; 84
    45c6:	46 47       	sbci	r20, 0x76	; 118
    45c8:	48 49       	sbci	r20, 0x98	; 152
    45ca:	4a 4b       	sbci	r20, 0xBA	; 186
    45cc:	4c 4d       	sbci	r20, 0xDC	; 220
    45ce:	4e 4f       	sbci	r20, 0xFE	; 254
    45d0:	50 51       	subi	r21, 0x10	; 16
    45d2:	52 53       	subi	r21, 0x32	; 50
    45d4:	54 55       	subi	r21, 0x54	; 84
    45d6:	56 57       	subi	r21, 0x76	; 118
    45d8:	58 59       	subi	r21, 0x98	; 152
    45da:	5a 5b       	subi	r21, 0xBA	; 186
    45dc:	5c 5d       	subi	r21, 0xDC	; 220
    45de:	5e 5f       	subi	r21, 0xFE	; 254
    45e0:	60 61       	ori	r22, 0x10	; 16
    45e2:	62 63       	ori	r22, 0x32	; 50
    45e4:	64 65       	ori	r22, 0x54	; 84
    45e6:	66 67       	ori	r22, 0x76	; 118
    45e8:	68 69       	ori	r22, 0x98	; 152
    45ea:	6a 6b       	ori	r22, 0xBA	; 186
    45ec:	6c 6d       	ori	r22, 0xDC	; 220
    45ee:	6e 6f       	ori	r22, 0xFE	; 254
    45f0:	70 71       	andi	r23, 0x10	; 16
    45f2:	72 73       	andi	r23, 0x32	; 50
    45f4:	74 75       	andi	r23, 0x54	; 84
    45f6:	76 77       	andi	r23, 0x76	; 118
    45f8:	78 79       	andi	r23, 0x98	; 152
    45fa:	7a 7b       	andi	r23, 0xBA	; 186
    45fc:	7c 7d       	andi	r23, 0xDC	; 220
    45fe:	7e 7f       	andi	r23, 0xFE	; 254
    4600:	00 02       	muls	r16, r16
    4602:	04 06       	cpc	r0, r20
    4604:	08 0a       	sbc	r0, r24
    4606:	0c 0e       	add	r0, r28
    4608:	10 12       	cpse	r1, r16
    460a:	14 16       	cp	r1, r20
    460c:	18 1a       	sub	r1, r24
    460e:	1c 1e       	adc	r1, r28
    4610:	20 22       	and	r2, r16
    4612:	24 26       	eor	r2, r20
    4614:	28 2a       	or	r2, r24
    4616:	2c 2e       	mov	r2, r28
    4618:	30 32       	cpi	r19, 0x20	; 32
    461a:	34 36       	cpi	r19, 0x64	; 100
    461c:	38 3a       	cpi	r19, 0xA8	; 168
    461e:	3c 3e       	cpi	r19, 0xEC	; 236
    4620:	40 42       	sbci	r20, 0x20	; 32
    4622:	44 46       	sbci	r20, 0x64	; 100
    4624:	48 4a       	sbci	r20, 0xA8	; 168
    4626:	4c 4e       	sbci	r20, 0xEC	; 236
    4628:	50 52       	subi	r21, 0x20	; 32
    462a:	54 56       	subi	r21, 0x64	; 100
    462c:	58 5a       	subi	r21, 0xA8	; 168
    462e:	5c 5e       	subi	r21, 0xEC	; 236
    4630:	60 62       	ori	r22, 0x20	; 32
    4632:	64 66       	ori	r22, 0x64	; 100
    4634:	68 6a       	ori	r22, 0xA8	; 168
    4636:	6c 6e       	ori	r22, 0xEC	; 236
    4638:	70 72       	andi	r23, 0x20	; 32
    463a:	74 76       	andi	r23, 0x64	; 100
    463c:	78 7a       	andi	r23, 0xA8	; 168
    463e:	7c 7e       	andi	r23, 0xEC	; 236
    4640:	7f 7d       	andi	r23, 0xDF	; 223
    4642:	7b 79       	andi	r23, 0x9B	; 155
    4644:	77 75       	andi	r23, 0x57	; 87
    4646:	73 71       	andi	r23, 0x13	; 19
    4648:	6f 6d       	ori	r22, 0xDF	; 223
    464a:	6b 69       	ori	r22, 0x9B	; 155
    464c:	67 65       	ori	r22, 0x57	; 87
    464e:	63 61       	ori	r22, 0x13	; 19
    4650:	5f 5d       	subi	r21, 0xDF	; 223
    4652:	5b 59       	subi	r21, 0x9B	; 155
    4654:	57 55       	subi	r21, 0x57	; 87
    4656:	53 51       	subi	r21, 0x13	; 19
    4658:	4f 4d       	sbci	r20, 0xDF	; 223
    465a:	4b 49       	sbci	r20, 0x9B	; 155
    465c:	47 45       	sbci	r20, 0x57	; 87
    465e:	43 41       	sbci	r20, 0x13	; 19
    4660:	3f 3d       	cpi	r19, 0xDF	; 223
    4662:	3b 39       	cpi	r19, 0x9B	; 155
    4664:	37 35       	cpi	r19, 0x57	; 87
    4666:	33 31       	cpi	r19, 0x13	; 19
    4668:	2f 2d       	mov	r18, r15
    466a:	2b 29       	or	r18, r11
    466c:	27 25       	eor	r18, r7
    466e:	23 21       	and	r18, r3
    4670:	1f 1d       	adc	r17, r15
    4672:	1b 19       	sub	r17, r11
    4674:	17 15       	cp	r17, r7
    4676:	13 11       	cpse	r17, r3
    4678:	0f 0d       	add	r16, r15
    467a:	0b 09       	sbc	r16, r11
    467c:	07 05       	cpc	r16, r7
    467e:	03 01       	movw	r0, r6
    4680:	ff fd       	.word	0xfdff	; ????
    4682:	fb f9       	.word	0xf9fb	; ????
    4684:	f7 f5       	brid	.+124    	; 0x4702 <waves+0x302>
    4686:	f3 f1       	brvs	.+124    	; 0x4704 <waves+0x304>
    4688:	ef ed       	ldi	r30, 0xDF	; 223
    468a:	eb e9       	ldi	r30, 0x9B	; 155
    468c:	e7 e5       	ldi	r30, 0x57	; 87
    468e:	e3 e1       	ldi	r30, 0x13	; 19
    4690:	df dd       	rcall	.-1090   	; 0x4250 <steptable+0x48>
    4692:	db d9       	rcall	.-3146   	; 0x3a4a <InitMusicPlayer+0x4>
    4694:	d7 d5       	rcall	.+2990   	; 0x5244 <playRoundEndMessage+0xa>
    4696:	d3 d1       	rcall	.+934    	; 0x4a3e <waves+0x63e>
    4698:	cf cd       	rjmp	.-1122   	; 0x4238 <steptable+0x30>
    469a:	cb c9       	rjmp	.-3178   	; 0x3a32 <PatchCommand11+0x7a>
    469c:	c7 c5       	rjmp	.+2958   	; 0x522c <GetNumberObject+0x5c>
    469e:	c3 c1       	rjmp	.+902    	; 0x4a26 <waves+0x626>
    46a0:	bf bd       	out	0x2f, r27	; 47
    46a2:	bb b9       	out	0x0b, r27	; 11
    46a4:	b7 b5       	in	r27, 0x27	; 39
    46a6:	b3 b1       	in	r27, 0x03	; 3
    46a8:	af ad       	ldd	r26, Y+63	; 0x3f
    46aa:	ab a9       	ldd	r26, Y+51	; 0x33
    46ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    46ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    46b0:	9f 9d       	mul	r25, r15
    46b2:	9b 99       	sbic	0x13, 3	; 19
    46b4:	97 95       	ror	r25
    46b6:	93 91       	.word	0x9193	; ????
    46b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46ba:	8b 89       	ldd	r24, Y+19	; 0x13
    46bc:	87 85       	ldd	r24, Z+15	; 0x0f
    46be:	83 81       	ldd	r24, Z+3	; 0x03
    46c0:	80 82       	st	Z, r8
    46c2:	84 86       	std	Z+12, r8	; 0x0c
    46c4:	88 8a       	std	Y+16, r8	; 0x10
    46c6:	8c 8e       	std	Y+28, r8	; 0x1c
    46c8:	90 92 94 96 	sts	0x9694, r9
    46cc:	98 9a       	sbi	0x13, 0	; 19
    46ce:	9c 9e       	mul	r9, r28
    46d0:	a0 a2       	std	Z+32, r10	; 0x20
    46d2:	a4 a6       	std	Z+44, r10	; 0x2c
    46d4:	a8 aa       	std	Y+48, r10	; 0x30
    46d6:	ac ae       	std	Y+60, r10	; 0x3c
    46d8:	b0 b2       	in	r11, 0x10	; 16
    46da:	b4 b6       	in	r11, 0x34	; 52
    46dc:	b8 ba       	out	0x18, r11	; 24
    46de:	bc be       	out	0x3c, r11	; 60
    46e0:	c0 c2       	rjmp	.+1408   	; 0x4c62 <waves+0x862>
    46e2:	c4 c6       	rjmp	.+3464   	; 0x546c <playGameOverMessage+0x66>
    46e4:	c8 ca       	rjmp	.-2672   	; 0x3c76 <ProcessMusic+0x1fa>
    46e6:	cc ce       	rjmp	.-616    	; 0x4480 <waves+0x80>
    46e8:	d0 d2       	rcall	.+1440   	; 0x4c8a <waves+0x88a>
    46ea:	d4 d6       	rcall	.+3496   	; 0x5494 <playGameOverMessage+0x8e>
    46ec:	d8 da       	rcall	.-2640   	; 0x3c9e <ProcessMusic+0x222>
    46ee:	dc de       	rcall	.-584    	; 0x44a8 <waves+0xa8>
    46f0:	e0 e2       	ldi	r30, 0x20	; 32
    46f2:	e4 e6       	ldi	r30, 0x64	; 100
    46f4:	e8 ea       	ldi	r30, 0xA8	; 168
    46f6:	ec ee       	ldi	r30, 0xEC	; 236
    46f8:	f0 f2       	brcs	.-68     	; 0x46b6 <waves+0x2b6>
    46fa:	f4 f6       	brge	.-68     	; 0x46b8 <waves+0x2b8>
    46fc:	f8 fa       	.word	0xfaf8	; ????
    46fe:	fc fe       	.word	0xfefc	; ????
    4700:	7f 7f       	andi	r23, 0xFF	; 255
    4702:	7f 7f       	andi	r23, 0xFF	; 255
    4704:	7f 7f       	andi	r23, 0xFF	; 255
    4706:	7f 7f       	andi	r23, 0xFF	; 255
    4708:	7f 7f       	andi	r23, 0xFF	; 255
    470a:	7f 7f       	andi	r23, 0xFF	; 255
    470c:	7f 7f       	andi	r23, 0xFF	; 255
    470e:	7f 7f       	andi	r23, 0xFF	; 255
    4710:	7f 7f       	andi	r23, 0xFF	; 255
    4712:	7f 7f       	andi	r23, 0xFF	; 255
    4714:	7f 7f       	andi	r23, 0xFF	; 255
    4716:	7f 7f       	andi	r23, 0xFF	; 255
    4718:	7f 7f       	andi	r23, 0xFF	; 255
    471a:	7f 7f       	andi	r23, 0xFF	; 255
    471c:	7f 7f       	andi	r23, 0xFF	; 255
    471e:	7f 7f       	andi	r23, 0xFF	; 255
    4720:	7f 7f       	andi	r23, 0xFF	; 255
    4722:	7f 7f       	andi	r23, 0xFF	; 255
    4724:	7f 7f       	andi	r23, 0xFF	; 255
    4726:	7f 7f       	andi	r23, 0xFF	; 255
    4728:	7f 7f       	andi	r23, 0xFF	; 255
    472a:	7f 7f       	andi	r23, 0xFF	; 255
    472c:	7f 7f       	andi	r23, 0xFF	; 255
    472e:	7f 7f       	andi	r23, 0xFF	; 255
    4730:	7f 7f       	andi	r23, 0xFF	; 255
    4732:	7f 7f       	andi	r23, 0xFF	; 255
    4734:	7f 7f       	andi	r23, 0xFF	; 255
    4736:	7f 7f       	andi	r23, 0xFF	; 255
    4738:	7f 7f       	andi	r23, 0xFF	; 255
    473a:	7f 7f       	andi	r23, 0xFF	; 255
    473c:	7f 7f       	andi	r23, 0xFF	; 255
    473e:	7f 7f       	andi	r23, 0xFF	; 255
    4740:	80 80       	ld	r8, Z
    4742:	80 80       	ld	r8, Z
    4744:	80 80       	ld	r8, Z
    4746:	80 80       	ld	r8, Z
    4748:	80 80       	ld	r8, Z
    474a:	80 80       	ld	r8, Z
    474c:	80 80       	ld	r8, Z
    474e:	80 80       	ld	r8, Z
    4750:	80 80       	ld	r8, Z
    4752:	80 80       	ld	r8, Z
    4754:	80 80       	ld	r8, Z
    4756:	80 80       	ld	r8, Z
    4758:	80 80       	ld	r8, Z
    475a:	80 80       	ld	r8, Z
    475c:	80 80       	ld	r8, Z
    475e:	80 80       	ld	r8, Z
    4760:	80 80       	ld	r8, Z
    4762:	80 80       	ld	r8, Z
    4764:	80 80       	ld	r8, Z
    4766:	80 80       	ld	r8, Z
    4768:	80 80       	ld	r8, Z
    476a:	80 80       	ld	r8, Z
    476c:	80 80       	ld	r8, Z
    476e:	80 80       	ld	r8, Z
    4770:	80 80       	ld	r8, Z
    4772:	80 80       	ld	r8, Z
    4774:	80 80       	ld	r8, Z
    4776:	80 80       	ld	r8, Z
    4778:	80 80       	ld	r8, Z
    477a:	80 80       	ld	r8, Z
    477c:	80 80       	ld	r8, Z
    477e:	80 80       	ld	r8, Z
    4780:	80 80       	ld	r8, Z
    4782:	80 80       	ld	r8, Z
    4784:	80 80       	ld	r8, Z
    4786:	80 80       	ld	r8, Z
    4788:	80 80       	ld	r8, Z
    478a:	80 80       	ld	r8, Z
    478c:	80 80       	ld	r8, Z
    478e:	80 80       	ld	r8, Z
    4790:	80 80       	ld	r8, Z
    4792:	80 80       	ld	r8, Z
    4794:	80 80       	ld	r8, Z
    4796:	80 80       	ld	r8, Z
    4798:	80 80       	ld	r8, Z
    479a:	80 80       	ld	r8, Z
    479c:	80 80       	ld	r8, Z
    479e:	80 80       	ld	r8, Z
    47a0:	80 80       	ld	r8, Z
    47a2:	80 80       	ld	r8, Z
    47a4:	80 80       	ld	r8, Z
    47a6:	80 80       	ld	r8, Z
    47a8:	80 80       	ld	r8, Z
    47aa:	80 80       	ld	r8, Z
    47ac:	80 80       	ld	r8, Z
    47ae:	80 80       	ld	r8, Z
    47b0:	80 80       	ld	r8, Z
    47b2:	80 80       	ld	r8, Z
    47b4:	80 80       	ld	r8, Z
    47b6:	80 80       	ld	r8, Z
    47b8:	80 80       	ld	r8, Z
    47ba:	80 80       	ld	r8, Z
    47bc:	80 80       	ld	r8, Z
    47be:	80 80       	ld	r8, Z
    47c0:	80 80       	ld	r8, Z
    47c2:	80 80       	ld	r8, Z
    47c4:	80 80       	ld	r8, Z
    47c6:	80 80       	ld	r8, Z
    47c8:	80 80       	ld	r8, Z
    47ca:	80 80       	ld	r8, Z
    47cc:	80 80       	ld	r8, Z
    47ce:	80 80       	ld	r8, Z
    47d0:	80 80       	ld	r8, Z
    47d2:	80 80       	ld	r8, Z
    47d4:	80 80       	ld	r8, Z
    47d6:	80 80       	ld	r8, Z
    47d8:	80 80       	ld	r8, Z
    47da:	80 80       	ld	r8, Z
    47dc:	80 80       	ld	r8, Z
    47de:	80 80       	ld	r8, Z
    47e0:	80 80       	ld	r8, Z
    47e2:	80 80       	ld	r8, Z
    47e4:	80 80       	ld	r8, Z
    47e6:	80 80       	ld	r8, Z
    47e8:	80 80       	ld	r8, Z
    47ea:	80 80       	ld	r8, Z
    47ec:	80 80       	ld	r8, Z
    47ee:	80 80       	ld	r8, Z
    47f0:	80 80       	ld	r8, Z
    47f2:	80 80       	ld	r8, Z
    47f4:	80 80       	ld	r8, Z
    47f6:	80 80       	ld	r8, Z
    47f8:	80 80       	ld	r8, Z
    47fa:	80 80       	ld	r8, Z
    47fc:	80 80       	ld	r8, Z
    47fe:	80 80       	ld	r8, Z
    4800:	7f 7f       	andi	r23, 0xFF	; 255
    4802:	7f 7f       	andi	r23, 0xFF	; 255
    4804:	7f 7f       	andi	r23, 0xFF	; 255
    4806:	7f 7f       	andi	r23, 0xFF	; 255
    4808:	7f 7f       	andi	r23, 0xFF	; 255
    480a:	7f 7f       	andi	r23, 0xFF	; 255
    480c:	7f 7f       	andi	r23, 0xFF	; 255
    480e:	7f 7f       	andi	r23, 0xFF	; 255
    4810:	7f 7f       	andi	r23, 0xFF	; 255
    4812:	7f 7f       	andi	r23, 0xFF	; 255
    4814:	7f 7f       	andi	r23, 0xFF	; 255
    4816:	7f 7f       	andi	r23, 0xFF	; 255
    4818:	7f 7f       	andi	r23, 0xFF	; 255
    481a:	7f 7f       	andi	r23, 0xFF	; 255
    481c:	7f 7f       	andi	r23, 0xFF	; 255
    481e:	7f 7f       	andi	r23, 0xFF	; 255
    4820:	7f 7f       	andi	r23, 0xFF	; 255
    4822:	7f 7f       	andi	r23, 0xFF	; 255
    4824:	7f 7f       	andi	r23, 0xFF	; 255
    4826:	7f 7f       	andi	r23, 0xFF	; 255
    4828:	7f 7f       	andi	r23, 0xFF	; 255
    482a:	7f 7f       	andi	r23, 0xFF	; 255
    482c:	7f 7f       	andi	r23, 0xFF	; 255
    482e:	7f 7f       	andi	r23, 0xFF	; 255
    4830:	7f 7f       	andi	r23, 0xFF	; 255
    4832:	7f 7f       	andi	r23, 0xFF	; 255
    4834:	7f 7f       	andi	r23, 0xFF	; 255
    4836:	7f 7f       	andi	r23, 0xFF	; 255
    4838:	7f 7f       	andi	r23, 0xFF	; 255
    483a:	7f 7f       	andi	r23, 0xFF	; 255
    483c:	7f 7f       	andi	r23, 0xFF	; 255
    483e:	7f 7f       	andi	r23, 0xFF	; 255
    4840:	7f 7f       	andi	r23, 0xFF	; 255
    4842:	7f 7f       	andi	r23, 0xFF	; 255
    4844:	7f 7f       	andi	r23, 0xFF	; 255
    4846:	7f 7f       	andi	r23, 0xFF	; 255
    4848:	7f 7f       	andi	r23, 0xFF	; 255
    484a:	7f 7f       	andi	r23, 0xFF	; 255
    484c:	7f 7f       	andi	r23, 0xFF	; 255
    484e:	7f 7f       	andi	r23, 0xFF	; 255
    4850:	7f 7f       	andi	r23, 0xFF	; 255
    4852:	7f 7f       	andi	r23, 0xFF	; 255
    4854:	7f 7f       	andi	r23, 0xFF	; 255
    4856:	7f 7f       	andi	r23, 0xFF	; 255
    4858:	7f 7f       	andi	r23, 0xFF	; 255
    485a:	7f 7f       	andi	r23, 0xFF	; 255
    485c:	7f 7f       	andi	r23, 0xFF	; 255
    485e:	7f 7f       	andi	r23, 0xFF	; 255
    4860:	7f 7f       	andi	r23, 0xFF	; 255
    4862:	7f 7f       	andi	r23, 0xFF	; 255
    4864:	7f 7f       	andi	r23, 0xFF	; 255
    4866:	7f 7f       	andi	r23, 0xFF	; 255
    4868:	7f 7f       	andi	r23, 0xFF	; 255
    486a:	7f 7f       	andi	r23, 0xFF	; 255
    486c:	7f 7f       	andi	r23, 0xFF	; 255
    486e:	7f 7f       	andi	r23, 0xFF	; 255
    4870:	7f 7f       	andi	r23, 0xFF	; 255
    4872:	7f 7f       	andi	r23, 0xFF	; 255
    4874:	7f 7f       	andi	r23, 0xFF	; 255
    4876:	7f 7f       	andi	r23, 0xFF	; 255
    4878:	7f 7f       	andi	r23, 0xFF	; 255
    487a:	7f 7f       	andi	r23, 0xFF	; 255
    487c:	7f 7f       	andi	r23, 0xFF	; 255
    487e:	7f 7f       	andi	r23, 0xFF	; 255
    4880:	80 80       	ld	r8, Z
    4882:	80 80       	ld	r8, Z
    4884:	80 80       	ld	r8, Z
    4886:	80 80       	ld	r8, Z
    4888:	80 80       	ld	r8, Z
    488a:	80 80       	ld	r8, Z
    488c:	80 80       	ld	r8, Z
    488e:	80 80       	ld	r8, Z
    4890:	80 80       	ld	r8, Z
    4892:	80 80       	ld	r8, Z
    4894:	80 80       	ld	r8, Z
    4896:	80 80       	ld	r8, Z
    4898:	80 80       	ld	r8, Z
    489a:	80 80       	ld	r8, Z
    489c:	80 80       	ld	r8, Z
    489e:	80 80       	ld	r8, Z
    48a0:	80 80       	ld	r8, Z
    48a2:	80 80       	ld	r8, Z
    48a4:	80 80       	ld	r8, Z
    48a6:	80 80       	ld	r8, Z
    48a8:	80 80       	ld	r8, Z
    48aa:	80 80       	ld	r8, Z
    48ac:	80 80       	ld	r8, Z
    48ae:	80 80       	ld	r8, Z
    48b0:	80 80       	ld	r8, Z
    48b2:	80 80       	ld	r8, Z
    48b4:	80 80       	ld	r8, Z
    48b6:	80 80       	ld	r8, Z
    48b8:	80 80       	ld	r8, Z
    48ba:	80 80       	ld	r8, Z
    48bc:	80 80       	ld	r8, Z
    48be:	80 80       	ld	r8, Z
    48c0:	80 80       	ld	r8, Z
    48c2:	80 80       	ld	r8, Z
    48c4:	80 80       	ld	r8, Z
    48c6:	80 80       	ld	r8, Z
    48c8:	80 80       	ld	r8, Z
    48ca:	80 80       	ld	r8, Z
    48cc:	80 80       	ld	r8, Z
    48ce:	80 80       	ld	r8, Z
    48d0:	80 80       	ld	r8, Z
    48d2:	80 80       	ld	r8, Z
    48d4:	80 80       	ld	r8, Z
    48d6:	80 80       	ld	r8, Z
    48d8:	80 80       	ld	r8, Z
    48da:	80 80       	ld	r8, Z
    48dc:	80 80       	ld	r8, Z
    48de:	80 80       	ld	r8, Z
    48e0:	80 80       	ld	r8, Z
    48e2:	80 80       	ld	r8, Z
    48e4:	80 80       	ld	r8, Z
    48e6:	80 80       	ld	r8, Z
    48e8:	80 80       	ld	r8, Z
    48ea:	80 80       	ld	r8, Z
    48ec:	80 80       	ld	r8, Z
    48ee:	80 80       	ld	r8, Z
    48f0:	80 80       	ld	r8, Z
    48f2:	80 80       	ld	r8, Z
    48f4:	80 80       	ld	r8, Z
    48f6:	80 80       	ld	r8, Z
    48f8:	80 80       	ld	r8, Z
    48fa:	80 80       	ld	r8, Z
    48fc:	80 80       	ld	r8, Z
    48fe:	80 80       	ld	r8, Z
    4900:	7f 7f       	andi	r23, 0xFF	; 255
    4902:	7f 7f       	andi	r23, 0xFF	; 255
    4904:	7f 7f       	andi	r23, 0xFF	; 255
    4906:	7f 7f       	andi	r23, 0xFF	; 255
    4908:	7f 7f       	andi	r23, 0xFF	; 255
    490a:	7f 7f       	andi	r23, 0xFF	; 255
    490c:	7f 7f       	andi	r23, 0xFF	; 255
    490e:	7f 7f       	andi	r23, 0xFF	; 255
    4910:	7f 7f       	andi	r23, 0xFF	; 255
    4912:	7f 7f       	andi	r23, 0xFF	; 255
    4914:	7f 7f       	andi	r23, 0xFF	; 255
    4916:	7f 7f       	andi	r23, 0xFF	; 255
    4918:	7f 7f       	andi	r23, 0xFF	; 255
    491a:	7f 7f       	andi	r23, 0xFF	; 255
    491c:	7f 7f       	andi	r23, 0xFF	; 255
    491e:	7f 7f       	andi	r23, 0xFF	; 255
    4920:	7f 7f       	andi	r23, 0xFF	; 255
    4922:	7f 7f       	andi	r23, 0xFF	; 255
    4924:	7f 7f       	andi	r23, 0xFF	; 255
    4926:	7f 7f       	andi	r23, 0xFF	; 255
    4928:	7f 7f       	andi	r23, 0xFF	; 255
    492a:	7f 7f       	andi	r23, 0xFF	; 255
    492c:	7f 7f       	andi	r23, 0xFF	; 255
    492e:	7f 7f       	andi	r23, 0xFF	; 255
    4930:	7f 7f       	andi	r23, 0xFF	; 255
    4932:	7f 7f       	andi	r23, 0xFF	; 255
    4934:	7f 7f       	andi	r23, 0xFF	; 255
    4936:	7f 7f       	andi	r23, 0xFF	; 255
    4938:	7f 7f       	andi	r23, 0xFF	; 255
    493a:	7f 7f       	andi	r23, 0xFF	; 255
    493c:	7f 7f       	andi	r23, 0xFF	; 255
    493e:	7f 7f       	andi	r23, 0xFF	; 255
    4940:	7f 7f       	andi	r23, 0xFF	; 255
    4942:	7f 7f       	andi	r23, 0xFF	; 255
    4944:	7f 7f       	andi	r23, 0xFF	; 255
    4946:	7f 7f       	andi	r23, 0xFF	; 255
    4948:	7f 7f       	andi	r23, 0xFF	; 255
    494a:	7f 7f       	andi	r23, 0xFF	; 255
    494c:	7f 7f       	andi	r23, 0xFF	; 255
    494e:	7f 7f       	andi	r23, 0xFF	; 255
    4950:	7f 7f       	andi	r23, 0xFF	; 255
    4952:	7f 7f       	andi	r23, 0xFF	; 255
    4954:	7f 7f       	andi	r23, 0xFF	; 255
    4956:	7f 7f       	andi	r23, 0xFF	; 255
    4958:	7f 7f       	andi	r23, 0xFF	; 255
    495a:	7f 7f       	andi	r23, 0xFF	; 255
    495c:	7f 7f       	andi	r23, 0xFF	; 255
    495e:	7f 7f       	andi	r23, 0xFF	; 255
    4960:	7f 7f       	andi	r23, 0xFF	; 255
    4962:	7f 7f       	andi	r23, 0xFF	; 255
    4964:	7f 7f       	andi	r23, 0xFF	; 255
    4966:	7f 7f       	andi	r23, 0xFF	; 255
    4968:	7f 7f       	andi	r23, 0xFF	; 255
    496a:	7f 7f       	andi	r23, 0xFF	; 255
    496c:	7f 7f       	andi	r23, 0xFF	; 255
    496e:	7f 7f       	andi	r23, 0xFF	; 255
    4970:	7f 7f       	andi	r23, 0xFF	; 255
    4972:	7f 7f       	andi	r23, 0xFF	; 255
    4974:	7f 7f       	andi	r23, 0xFF	; 255
    4976:	7f 7f       	andi	r23, 0xFF	; 255
    4978:	7f 7f       	andi	r23, 0xFF	; 255
    497a:	7f 7f       	andi	r23, 0xFF	; 255
    497c:	7f 7f       	andi	r23, 0xFF	; 255
    497e:	7f 7f       	andi	r23, 0xFF	; 255
    4980:	7f 7f       	andi	r23, 0xFF	; 255
    4982:	7f 7f       	andi	r23, 0xFF	; 255
    4984:	7f 7f       	andi	r23, 0xFF	; 255
    4986:	7f 7f       	andi	r23, 0xFF	; 255
    4988:	7f 7f       	andi	r23, 0xFF	; 255
    498a:	7f 7f       	andi	r23, 0xFF	; 255
    498c:	7f 7f       	andi	r23, 0xFF	; 255
    498e:	7f 7f       	andi	r23, 0xFF	; 255
    4990:	7f 7f       	andi	r23, 0xFF	; 255
    4992:	7f 7f       	andi	r23, 0xFF	; 255
    4994:	7f 7f       	andi	r23, 0xFF	; 255
    4996:	7f 7f       	andi	r23, 0xFF	; 255
    4998:	7f 7f       	andi	r23, 0xFF	; 255
    499a:	7f 7f       	andi	r23, 0xFF	; 255
    499c:	7f 7f       	andi	r23, 0xFF	; 255
    499e:	7f 7f       	andi	r23, 0xFF	; 255
    49a0:	7f 7f       	andi	r23, 0xFF	; 255
    49a2:	7f 7f       	andi	r23, 0xFF	; 255
    49a4:	7f 7f       	andi	r23, 0xFF	; 255
    49a6:	7f 7f       	andi	r23, 0xFF	; 255
    49a8:	7f 7f       	andi	r23, 0xFF	; 255
    49aa:	7f 7f       	andi	r23, 0xFF	; 255
    49ac:	7f 7f       	andi	r23, 0xFF	; 255
    49ae:	7f 7f       	andi	r23, 0xFF	; 255
    49b0:	7f 7f       	andi	r23, 0xFF	; 255
    49b2:	7f 7f       	andi	r23, 0xFF	; 255
    49b4:	7f 7f       	andi	r23, 0xFF	; 255
    49b6:	7f 7f       	andi	r23, 0xFF	; 255
    49b8:	7f 7f       	andi	r23, 0xFF	; 255
    49ba:	7f 7f       	andi	r23, 0xFF	; 255
    49bc:	7f 7f       	andi	r23, 0xFF	; 255
    49be:	7f 7f       	andi	r23, 0xFF	; 255
    49c0:	80 80       	ld	r8, Z
    49c2:	80 80       	ld	r8, Z
    49c4:	80 80       	ld	r8, Z
    49c6:	80 80       	ld	r8, Z
    49c8:	80 80       	ld	r8, Z
    49ca:	80 80       	ld	r8, Z
    49cc:	80 80       	ld	r8, Z
    49ce:	80 80       	ld	r8, Z
    49d0:	80 80       	ld	r8, Z
    49d2:	80 80       	ld	r8, Z
    49d4:	80 80       	ld	r8, Z
    49d6:	80 80       	ld	r8, Z
    49d8:	80 80       	ld	r8, Z
    49da:	80 80       	ld	r8, Z
    49dc:	80 80       	ld	r8, Z
    49de:	80 80       	ld	r8, Z
    49e0:	80 80       	ld	r8, Z
    49e2:	80 80       	ld	r8, Z
    49e4:	80 80       	ld	r8, Z
    49e6:	80 80       	ld	r8, Z
    49e8:	80 80       	ld	r8, Z
    49ea:	80 80       	ld	r8, Z
    49ec:	80 80       	ld	r8, Z
    49ee:	80 80       	ld	r8, Z
    49f0:	80 80       	ld	r8, Z
    49f2:	80 80       	ld	r8, Z
    49f4:	80 80       	ld	r8, Z
    49f6:	80 80       	ld	r8, Z
    49f8:	80 80       	ld	r8, Z
    49fa:	80 80       	ld	r8, Z
    49fc:	80 80       	ld	r8, Z
    49fe:	80 80       	ld	r8, Z
    4a00:	03 09       	sbc	r16, r3
    4a02:	13 1e       	adc	r1, r19
    4a04:	28 31       	cpi	r18, 0x18	; 24
    4a06:	3a 40       	sbci	r19, 0x0A	; 10
    4a08:	46 4c       	sbci	r20, 0xC6	; 198
    4a0a:	50 54       	subi	r21, 0x40	; 64
    4a0c:	58 5b       	subi	r21, 0xB8	; 184
    4a0e:	5e 61       	ori	r21, 0x1E	; 30
    4a10:	63 65       	ori	r22, 0x53	; 83
    4a12:	67 69       	ori	r22, 0x97	; 151
    4a14:	6b 6c       	ori	r22, 0xCB	; 203
    4a16:	6e 6f       	ori	r22, 0xFE	; 254
    4a18:	70 71       	andi	r23, 0x10	; 16
    4a1a:	72 73       	andi	r23, 0x32	; 50
    4a1c:	74 75       	andi	r23, 0x54	; 84
    4a1e:	76 77       	andi	r23, 0x76	; 118
    4a20:	77 78       	andi	r23, 0x87	; 135
    4a22:	79 79       	andi	r23, 0x99	; 153
    4a24:	7a 7a       	andi	r23, 0xAA	; 170
    4a26:	7b 7b       	andi	r23, 0xBB	; 187
    4a28:	7c 7c       	andi	r23, 0xCC	; 204
    4a2a:	7c 7d       	andi	r23, 0xDC	; 220
    4a2c:	7d 7d       	andi	r23, 0xDD	; 221
    4a2e:	7e 7e       	andi	r23, 0xEE	; 238
    4a30:	7e 7e       	andi	r23, 0xEE	; 238
    4a32:	7f 7f       	andi	r23, 0xFF	; 255
    4a34:	7f 7f       	andi	r23, 0xFF	; 255
    4a36:	7f 7f       	andi	r23, 0xFF	; 255
    4a38:	7f 7f       	andi	r23, 0xFF	; 255
    4a3a:	7f 7f       	andi	r23, 0xFF	; 255
    4a3c:	7f 7f       	andi	r23, 0xFF	; 255
    4a3e:	7f 7f       	andi	r23, 0xFF	; 255
    4a40:	7f 7f       	andi	r23, 0xFF	; 255
    4a42:	7f 7f       	andi	r23, 0xFF	; 255
    4a44:	7f 7f       	andi	r23, 0xFF	; 255
    4a46:	7f 7f       	andi	r23, 0xFF	; 255
    4a48:	7f 7f       	andi	r23, 0xFF	; 255
    4a4a:	7f 7f       	andi	r23, 0xFF	; 255
    4a4c:	7f 7e       	andi	r23, 0xEF	; 239
    4a4e:	7e 7e       	andi	r23, 0xEE	; 238
    4a50:	7e 7d       	andi	r23, 0xDE	; 222
    4a52:	7d 7d       	andi	r23, 0xDD	; 221
    4a54:	7c 7c       	andi	r23, 0xCC	; 204
    4a56:	7c 7b       	andi	r23, 0xBC	; 188
    4a58:	7b 7a       	andi	r23, 0xAB	; 171
    4a5a:	7a 79       	andi	r23, 0x9A	; 154
    4a5c:	79 78       	andi	r23, 0x89	; 137
    4a5e:	77 77       	andi	r23, 0x77	; 119
    4a60:	76 75       	andi	r23, 0x56	; 86
    4a62:	74 73       	andi	r23, 0x34	; 52
    4a64:	72 71       	andi	r23, 0x12	; 18
    4a66:	70 6f       	ori	r23, 0xF0	; 240
    4a68:	6e 6c       	ori	r22, 0xCE	; 206
    4a6a:	6b 69       	ori	r22, 0x9B	; 155
    4a6c:	67 65       	ori	r22, 0x57	; 87
    4a6e:	63 61       	ori	r22, 0x13	; 19
    4a70:	5e 5b       	subi	r21, 0xBE	; 190
    4a72:	58 54       	subi	r21, 0x48	; 72
    4a74:	50 4c       	sbci	r21, 0xC0	; 192
    4a76:	46 40       	sbci	r20, 0x06	; 6
    4a78:	3a 31       	cpi	r19, 0x1A	; 26
    4a7a:	28 1e       	adc	r2, r24
    4a7c:	13 09       	sbc	r17, r3
    4a7e:	03 00       	.word	0x0003	; ????
    4a80:	c6 cc       	rjmp	.-1652   	; 0x440e <waves+0xe>
    4a82:	d5 db       	rcall	.-2134   	; 0x422e <steptable+0x26>
    4a84:	df e3       	ldi	r29, 0x3F	; 63
    4a86:	e5 e7       	ldi	r30, 0x75	; 117
    4a88:	e9 ea       	ldi	r30, 0xA9	; 169
    4a8a:	eb ec       	ldi	r30, 0xCB	; 203
    4a8c:	ed ee       	ldi	r30, 0xED	; 237
    4a8e:	ef ef       	ldi	r30, 0xFF	; 255
    4a90:	f0 f0       	brcs	.+60     	; 0x4ace <waves+0x6ce>
    4a92:	f0 f1       	brcs	.+124    	; 0x4b10 <waves+0x710>
    4a94:	f1 f1       	breq	.+124    	; 0x4b12 <waves+0x712>
    4a96:	f1 f2       	breq	.-68     	; 0x4a54 <waves+0x654>
    4a98:	f2 f2       	brmi	.-68     	; 0x4a56 <waves+0x656>
    4a9a:	f2 f2       	brmi	.-68     	; 0x4a58 <waves+0x658>
    4a9c:	f2 f2       	brmi	.-68     	; 0x4a5a <waves+0x65a>
    4a9e:	f2 f3       	brmi	.-4      	; 0x4a9c <waves+0x69c>
    4aa0:	f3 f3       	brvs	.-4      	; 0x4a9e <waves+0x69e>
    4aa2:	f3 f3       	brvs	.-4      	; 0x4aa0 <waves+0x6a0>
    4aa4:	f3 f3       	brvs	.-4      	; 0x4aa2 <waves+0x6a2>
    4aa6:	f3 f3       	brvs	.-4      	; 0x4aa4 <waves+0x6a4>
    4aa8:	f3 f3       	brvs	.-4      	; 0x4aa6 <waves+0x6a6>
    4aaa:	f3 f3       	brvs	.-4      	; 0x4aa8 <waves+0x6a8>
    4aac:	f3 f3       	brvs	.-4      	; 0x4aaa <waves+0x6aa>
    4aae:	f3 f3       	brvs	.-4      	; 0x4aac <waves+0x6ac>
    4ab0:	f3 f3       	brvs	.-4      	; 0x4aae <waves+0x6ae>
    4ab2:	f3 f3       	brvs	.-4      	; 0x4ab0 <waves+0x6b0>
    4ab4:	f3 f3       	brvs	.-4      	; 0x4ab2 <waves+0x6b2>
    4ab6:	f3 f3       	brvs	.-4      	; 0x4ab4 <waves+0x6b4>
    4ab8:	f3 f3       	brvs	.-4      	; 0x4ab6 <waves+0x6b6>
    4aba:	f3 f3       	brvs	.-4      	; 0x4ab8 <waves+0x6b8>
    4abc:	f3 f3       	brvs	.-4      	; 0x4aba <waves+0x6ba>
    4abe:	f3 f3       	brvs	.-4      	; 0x4abc <waves+0x6bc>
    4ac0:	f3 f3       	brvs	.-4      	; 0x4abe <waves+0x6be>
    4ac2:	f3 f3       	brvs	.-4      	; 0x4ac0 <waves+0x6c0>
    4ac4:	f3 f3       	brvs	.-4      	; 0x4ac2 <waves+0x6c2>
    4ac6:	f3 f3       	brvs	.-4      	; 0x4ac4 <waves+0x6c4>
    4ac8:	f3 f3       	brvs	.-4      	; 0x4ac6 <waves+0x6c6>
    4aca:	f3 f3       	brvs	.-4      	; 0x4ac8 <waves+0x6c8>
    4acc:	f3 f3       	brvs	.-4      	; 0x4aca <waves+0x6ca>
    4ace:	f3 f3       	brvs	.-4      	; 0x4acc <waves+0x6cc>
    4ad0:	f3 f3       	brvs	.-4      	; 0x4ace <waves+0x6ce>
    4ad2:	f3 f3       	brvs	.-4      	; 0x4ad0 <waves+0x6d0>
    4ad4:	f3 f3       	brvs	.-4      	; 0x4ad2 <waves+0x6d2>
    4ad6:	f3 f3       	brvs	.-4      	; 0x4ad4 <waves+0x6d4>
    4ad8:	f3 f3       	brvs	.-4      	; 0x4ad6 <waves+0x6d6>
    4ada:	f3 f3       	brvs	.-4      	; 0x4ad8 <waves+0x6d8>
    4adc:	f3 f3       	brvs	.-4      	; 0x4ada <waves+0x6da>
    4ade:	f3 f3       	brvs	.-4      	; 0x4adc <waves+0x6dc>
    4ae0:	f2 f2       	brmi	.-68     	; 0x4a9e <waves+0x69e>
    4ae2:	f2 f2       	brmi	.-68     	; 0x4aa0 <waves+0x6a0>
    4ae4:	f2 f2       	brmi	.-68     	; 0x4aa2 <waves+0x6a2>
    4ae6:	f2 f2       	brmi	.-68     	; 0x4aa4 <waves+0x6a4>
    4ae8:	f1 f1       	breq	.+124    	; 0x4b66 <waves+0x766>
    4aea:	f1 f1       	breq	.+124    	; 0x4b68 <waves+0x768>
    4aec:	f0 f0       	brcs	.+60     	; 0x4b2a <waves+0x72a>
    4aee:	f0 ef       	ldi	r31, 0xF0	; 240
    4af0:	ef ee       	ldi	r30, 0xEF	; 239
    4af2:	ed ec       	ldi	r30, 0xCD	; 205
    4af4:	eb ea       	ldi	r30, 0xAB	; 171
    4af6:	e9 e7       	ldi	r30, 0x79	; 121
    4af8:	e5 e3       	ldi	r30, 0x35	; 53
    4afa:	df db       	rcall	.-2114   	; 0x42ba <steptable+0xb2>
    4afc:	d5 cc       	rjmp	.-1622   	; 0x44a8 <waves+0xa8>
    4afe:	c6 00       	.word	0x00c6	; ????
    4b00:	00 28       	or	r0, r0
    4b02:	3d 42       	sbci	r19, 0x2D	; 45
    4b04:	30 2d       	mov	r19, r0
    4b06:	2c 2b       	or	r18, r28
    4b08:	2c 2d       	mov	r18, r12
    4b0a:	2e 2f       	mov	r18, r30
    4b0c:	30 32       	cpi	r19, 0x20	; 32
    4b0e:	33 35       	cpi	r19, 0x53	; 83
    4b10:	37 39       	cpi	r19, 0x97	; 151
    4b12:	3b 3d       	cpi	r19, 0xDB	; 219
    4b14:	3f 41       	sbci	r19, 0x1F	; 31
    4b16:	43 45       	sbci	r20, 0x53	; 83
    4b18:	48 4a       	sbci	r20, 0xA8	; 168
    4b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    4b1c:	50 53       	subi	r21, 0x30	; 48
    4b1e:	55 57       	subi	r21, 0x75	; 117
    4b20:	59 5b       	subi	r21, 0xB9	; 185
    4b22:	5d 5f       	subi	r21, 0xFD	; 253
    4b24:	61 63       	ori	r22, 0x31	; 49
    4b26:	65 67       	ori	r22, 0x75	; 117
    4b28:	69 6b       	ori	r22, 0xB9	; 185
    4b2a:	6c 6e       	ori	r22, 0xEC	; 236
    4b2c:	70 71       	andi	r23, 0x10	; 16
    4b2e:	73 74       	andi	r23, 0x43	; 67
    4b30:	75 77       	andi	r23, 0x75	; 117
    4b32:	78 79       	andi	r23, 0x98	; 152
    4b34:	7a 7b       	andi	r23, 0xBA	; 186
    4b36:	7c 7d       	andi	r23, 0xDC	; 220
    4b38:	7d 7e       	andi	r23, 0xED	; 237
    4b3a:	7e 7f       	andi	r23, 0xFE	; 254
    4b3c:	7f 7f       	andi	r23, 0xFF	; 255
    4b3e:	7f 7f       	andi	r23, 0xFF	; 255
    4b40:	7f 7f       	andi	r23, 0xFF	; 255
    4b42:	7f 7f       	andi	r23, 0xFF	; 255
    4b44:	7f 7f       	andi	r23, 0xFF	; 255
    4b46:	7e 7e       	andi	r23, 0xEE	; 238
    4b48:	7d 7d       	andi	r23, 0xDD	; 221
    4b4a:	7c 7b       	andi	r23, 0xBC	; 188
    4b4c:	7a 79       	andi	r23, 0x9A	; 154
    4b4e:	78 77       	andi	r23, 0x78	; 120
    4b50:	75 74       	andi	r23, 0x45	; 69
    4b52:	73 71       	andi	r23, 0x13	; 19
    4b54:	70 6e       	ori	r23, 0xE0	; 224
    4b56:	6c 6b       	ori	r22, 0xBC	; 188
    4b58:	69 67       	ori	r22, 0x79	; 121
    4b5a:	65 63       	ori	r22, 0x35	; 53
    4b5c:	61 5f       	subi	r22, 0xF1	; 241
    4b5e:	5d 5b       	subi	r21, 0xBD	; 189
    4b60:	59 57       	subi	r21, 0x79	; 121
    4b62:	55 53       	subi	r21, 0x35	; 53
    4b64:	50 4e       	sbci	r21, 0xE0	; 224
    4b66:	4c 4a       	sbci	r20, 0xAC	; 172
    4b68:	48 45       	sbci	r20, 0x58	; 88
    4b6a:	43 41       	sbci	r20, 0x13	; 19
    4b6c:	3f 3d       	cpi	r19, 0xDF	; 223
    4b6e:	3b 39       	cpi	r19, 0x9B	; 155
    4b70:	37 35       	cpi	r19, 0x57	; 87
    4b72:	33 32       	cpi	r19, 0x23	; 35
    4b74:	30 2f       	mov	r19, r16
    4b76:	2e 2d       	mov	r18, r14
    4b78:	2c 2b       	or	r18, r28
    4b7a:	2c 2d       	mov	r18, r12
    4b7c:	30 42       	sbci	r19, 0x20	; 32
    4b7e:	3d 28       	or	r3, r13
    4b80:	00 e9       	ldi	r16, 0x90	; 144
    4b82:	e5 fe       	sbrs	r14, 5
    4b84:	d4 d7       	rcall	.+4008   	; 0x5b2e <ProcessInput+0x1a>
    4b86:	d7 d7       	rcall	.+4014   	; 0x5b36 <ProcessInput+0x22>
    4b88:	d6 d4       	rcall	.+2476   	; 0x5536 <playGameOverMessage+0x130>
    4b8a:	d2 d0       	rcall	.+420    	; 0x4d30 <waves+0x930>
    4b8c:	ce cc       	rjmp	.-1636   	; 0x452a <waves+0x12a>
    4b8e:	ca c8       	rjmp	.-3692   	; 0x3d24 <ProcessMusic+0x2a8>
    4b90:	c6 c3       	rjmp	.+1932   	; 0x531e <playRoundEndMessage+0xe4>
    4b92:	c1 bf       	out	0x31, r28	; 49
    4b94:	bd ba       	out	0x1d, r11	; 29
    4b96:	b8 b6       	in	r11, 0x38	; 56
    4b98:	b4 b1       	in	r27, 0x04	; 4
    4b9a:	af ad       	ldd	r26, Y+63	; 0x3f
    4b9c:	ab a9       	ldd	r26, Y+51	; 0x33
    4b9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    4ba0:	a3 a1       	ldd	r26, Z+35	; 0x23
    4ba2:	9f 9e       	mul	r9, r31
    4ba4:	9c 9a       	sbi	0x13, 4	; 19
    4ba6:	99 97       	sbiw	r26, 0x29	; 41
    4ba8:	95 94       	asr	r9
    4baa:	93 91       	.word	0x9193	; ????
    4bac:	90 8f       	std	Z+24, r25	; 0x18
    4bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    4bb0:	8b 8a       	std	Y+19, r8	; 0x13
    4bb2:	89 88       	ldd	r8, Y+17	; 0x11
    4bb4:	88 87       	std	Y+8, r24	; 0x08
    4bb6:	86 85       	ldd	r24, Z+14	; 0x0e
    4bb8:	85 84       	ldd	r8, Z+13	; 0x0d
    4bba:	84 84       	ldd	r8, Z+12	; 0x0c
    4bbc:	83 83       	std	Z+3, r24	; 0x03
    4bbe:	83 83       	std	Z+3, r24	; 0x03
    4bc0:	83 83       	std	Z+3, r24	; 0x03
    4bc2:	83 83       	std	Z+3, r24	; 0x03
    4bc4:	83 84       	ldd	r8, Z+11	; 0x0b
    4bc6:	84 84       	ldd	r8, Z+12	; 0x0c
    4bc8:	85 85       	ldd	r24, Z+13	; 0x0d
    4bca:	86 87       	std	Z+14, r24	; 0x0e
    4bcc:	88 88       	ldd	r8, Y+16	; 0x10
    4bce:	89 8a       	std	Y+17, r8	; 0x11
    4bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    4bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    4bd4:	90 91 93 94 	lds	r25, 0x9493
    4bd8:	95 97       	sbiw	r26, 0x25	; 37
    4bda:	99 9a       	sbi	0x13, 1	; 19
    4bdc:	9c 9e       	mul	r9, r28
    4bde:	9f a1       	ldd	r25, Y+39	; 0x27
    4be0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    4be2:	a7 a9       	ldd	r26, Z+55	; 0x37
    4be4:	ab ad       	ldd	r26, Y+59	; 0x3b
    4be6:	af b1       	in	r26, 0x0f	; 15
    4be8:	b4 b6       	in	r11, 0x34	; 52
    4bea:	b8 ba       	out	0x18, r11	; 24
    4bec:	bd bf       	out	0x3d, r27	; 61
    4bee:	c1 c3       	rjmp	.+1922   	; 0x5372 <playRoundEndMessage+0x138>
    4bf0:	c6 c8       	rjmp	.-3700   	; 0x3d7e <ProcessMusic+0x302>
    4bf2:	ca cc       	rjmp	.-1644   	; 0x4588 <waves+0x188>
    4bf4:	ce d0       	rcall	.+412    	; 0x4d92 <waves+0x992>
    4bf6:	d2 d4       	rcall	.+2468   	; 0x559c <ChoosePlayerShips+0x28>
    4bf8:	d6 d7       	rcall	.+4012   	; 0x5ba6 <ProcessInput+0x92>
    4bfa:	d7 d7       	rcall	.+4014   	; 0x5baa <ProcessInput+0x96>
    4bfc:	d4 fe       	sbrs	r13, 4
    4bfe:	e5 e9       	ldi	r30, 0x95	; 149
    4c00:	f9 f8       	.word	0xf8f9	; ????
    4c02:	f9 f5       	brne	.+126    	; 0x4c82 <waves+0x882>
    4c04:	eb e1       	ldi	r30, 0x1B	; 27
    4c06:	dd de       	rcall	.-582    	; 0x49c2 <waves+0x5c2>
    4c08:	e0 e2       	ldi	r30, 0x20	; 32
    4c0a:	e4 e5       	ldi	r30, 0x54	; 84
    4c0c:	e6 e5       	ldi	r30, 0x56	; 86
    4c0e:	e4 e2       	ldi	r30, 0x24	; 36
    4c10:	de d9       	rcall	.-3140   	; 0x3fce <TriggerCommon+0xc2>
    4c12:	d2 ca       	rjmp	.-2652   	; 0x41b8 <esmw+0xa>
    4c14:	c1 b7       	in	r28, 0x31	; 49
    4c16:	ac a2       	std	Y+36, r10	; 0x24
    4c18:	99 91       	ld	r25, Y+
    4c1a:	8a 86       	std	Y+10, r8	; 0x0a
    4c1c:	83 81       	ldd	r24, Z+3	; 0x03
    4c1e:	80 80       	ld	r8, Z
    4c20:	81 82       	std	Z+1, r8	; 0x01
    4c22:	83 85       	ldd	r24, Z+11	; 0x0b
    4c24:	86 88       	ldd	r8, Z+22	; 0x16
    4c26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    4c28:	8d 8f       	std	Y+29, r24	; 0x1d
    4c2a:	90 92 93 95 	sts	0x9593, r9
    4c2e:	96 97       	sbiw	r26, 0x26	; 38
    4c30:	98 99       	sbic	0x13, 0	; 19
    4c32:	9a 9b       	sbis	0x13, 2	; 19
    4c34:	9b 9c       	mul	r9, r11
    4c36:	9d 9d       	mul	r25, r13
    4c38:	9d 9e       	mul	r9, r29
    4c3a:	9e 9e       	mul	r9, r30
    4c3c:	9f 9f       	mul	r25, r31
    4c3e:	9f 9f       	mul	r25, r31
    4c40:	9f 9f       	mul	r25, r31
    4c42:	9f 9e       	mul	r9, r31
    4c44:	9e 9e       	mul	r9, r30
    4c46:	9d 9d       	mul	r25, r13
    4c48:	9d 9c       	mul	r9, r13
    4c4a:	9b 9b       	sbis	0x13, 3	; 19
    4c4c:	9a 99       	sbic	0x13, 2	; 19
    4c4e:	98 97       	sbiw	r26, 0x28	; 40
    4c50:	96 95       	lsr	r25
    4c52:	93 92       	.word	0x9293	; ????
    4c54:	90 8f       	std	Z+24, r25	; 0x18
    4c56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    4c58:	8a 88       	ldd	r8, Y+18	; 0x12
    4c5a:	86 85       	ldd	r24, Z+14	; 0x0e
    4c5c:	83 82       	std	Z+3, r8	; 0x03
    4c5e:	81 80       	ldd	r8, Z+1	; 0x01
    4c60:	80 81       	ld	r24, Z
    4c62:	83 86       	std	Z+11, r8	; 0x0b
    4c64:	8a 91       	ld	r24, -Y
    4c66:	99 a2       	std	Y+33, r9	; 0x21
    4c68:	ac b7       	in	r26, 0x3c	; 60
    4c6a:	c1 ca       	rjmp	.-2686   	; 0x41ee <esmw+0x40>
    4c6c:	d2 d9       	rcall	.-3164   	; 0x4012 <TriggerCommon+0x106>
    4c6e:	de e2       	ldi	r29, 0x2E	; 46
    4c70:	e4 e5       	ldi	r30, 0x54	; 84
    4c72:	e6 e5       	ldi	r30, 0x56	; 86
    4c74:	e4 e2       	ldi	r30, 0x24	; 36
    4c76:	e0 de       	rcall	.-576    	; 0x4a38 <waves+0x638>
    4c78:	dd e1       	ldi	r29, 0x1D	; 29
    4c7a:	eb f5       	brvc	.+122    	; 0x4cf6 <waves+0x8f6>
    4c7c:	f9 f8       	.word	0xf8f9	; ????
    4c7e:	f9 00       	.word	0x00f9	; ????
    4c80:	07 08       	sbc	r0, r7
    4c82:	07 0b       	sbc	r16, r23
    4c84:	15 1f       	adc	r17, r21
    4c86:	23 22       	and	r2, r19
    4c88:	20 1e       	adc	r2, r16
    4c8a:	1c 1b       	sub	r17, r28
    4c8c:	1a 1b       	sub	r17, r26
    4c8e:	1c 1e       	adc	r1, r28
    4c90:	22 27       	eor	r18, r18
    4c92:	2e 36       	cpi	r18, 0x6E	; 110
    4c94:	3f 49       	sbci	r19, 0x9F	; 159
    4c96:	54 5e       	subi	r21, 0xE4	; 228
    4c98:	67 6f       	ori	r22, 0xF7	; 247
    4c9a:	76 7a       	andi	r23, 0xA6	; 166
    4c9c:	7e 7f       	andi	r23, 0xFE	; 254
    4c9e:	7f 7f       	andi	r23, 0xFF	; 255
    4ca0:	7f 7e       	andi	r23, 0xEF	; 239
    4ca2:	7d 7b       	andi	r23, 0xBD	; 189
    4ca4:	7a 78       	andi	r23, 0x8A	; 138
    4ca6:	76 74       	andi	r23, 0x46	; 70
    4ca8:	73 71       	andi	r23, 0x13	; 19
    4caa:	70 6e       	ori	r23, 0xE0	; 224
    4cac:	6d 6b       	ori	r22, 0xBD	; 189
    4cae:	6a 69       	ori	r22, 0x9A	; 154
    4cb0:	68 67       	ori	r22, 0x78	; 120
    4cb2:	66 65       	ori	r22, 0x56	; 86
    4cb4:	65 64       	ori	r22, 0x45	; 69
    4cb6:	64 63       	ori	r22, 0x34	; 52
    4cb8:	63 62       	ori	r22, 0x23	; 35
    4cba:	62 62       	ori	r22, 0x22	; 34
    4cbc:	61 61       	ori	r22, 0x11	; 17
    4cbe:	61 61       	ori	r22, 0x11	; 17
    4cc0:	61 61       	ori	r22, 0x11	; 17
    4cc2:	61 62       	ori	r22, 0x21	; 33
    4cc4:	62 62       	ori	r22, 0x22	; 34
    4cc6:	63 63       	ori	r22, 0x33	; 51
    4cc8:	63 64       	ori	r22, 0x43	; 67
    4cca:	65 65       	ori	r22, 0x55	; 85
    4ccc:	66 67       	ori	r22, 0x76	; 118
    4cce:	68 69       	ori	r22, 0x98	; 152
    4cd0:	6a 6b       	ori	r22, 0xBA	; 186
    4cd2:	6d 6e       	ori	r22, 0xED	; 237
    4cd4:	70 71       	andi	r23, 0x10	; 16
    4cd6:	73 74       	andi	r23, 0x43	; 67
    4cd8:	76 78       	andi	r23, 0x86	; 134
    4cda:	7a 7b       	andi	r23, 0xBA	; 186
    4cdc:	7d 7e       	andi	r23, 0xED	; 237
    4cde:	7f 7f       	andi	r23, 0xFF	; 255
    4ce0:	7f 7f       	andi	r23, 0xFF	; 255
    4ce2:	7e 7a       	andi	r23, 0xAE	; 174
    4ce4:	76 6f       	ori	r23, 0xF6	; 246
    4ce6:	67 5e       	subi	r22, 0xE7	; 231
    4ce8:	54 49       	sbci	r21, 0x94	; 148
    4cea:	3f 36       	cpi	r19, 0x6F	; 111
    4cec:	2e 27       	eor	r18, r30
    4cee:	22 1e       	adc	r2, r18
    4cf0:	1c 1b       	sub	r17, r28
    4cf2:	1a 1b       	sub	r17, r26
    4cf4:	1c 1e       	adc	r1, r28
    4cf6:	20 22       	and	r2, r16
    4cf8:	23 1f       	adc	r18, r19
    4cfa:	15 0b       	sbc	r17, r21
    4cfc:	07 08       	sbc	r0, r7
    4cfe:	07 00       	.word	0x0007	; ????
    4d00:	1f 31       	cpi	r17, 0x1F	; 31
    4d02:	3d 44       	sbci	r19, 0x4D	; 77
    4d04:	4e 53       	subi	r20, 0x3E	; 62
    4d06:	54 56       	subi	r21, 0x64	; 100
    4d08:	5a 5f       	subi	r21, 0xFA	; 250
    4d0a:	64 69       	ori	r22, 0x94	; 148
    4d0c:	6e 74       	andi	r22, 0x4E	; 78
    4d0e:	76 79       	andi	r23, 0x96	; 150
    4d10:	7c 7f       	andi	r23, 0xFC	; 252
    4d12:	7f 7f       	andi	r23, 0xFF	; 255
    4d14:	7f 7f       	andi	r23, 0xFF	; 255
    4d16:	7f 7f       	andi	r23, 0xFF	; 255
    4d18:	7f 7f       	andi	r23, 0xFF	; 255
    4d1a:	7f 7f       	andi	r23, 0xFF	; 255
    4d1c:	7f 7f       	andi	r23, 0xFF	; 255
    4d1e:	7f 7f       	andi	r23, 0xFF	; 255
    4d20:	7f 7f       	andi	r23, 0xFF	; 255
    4d22:	7f 7f       	andi	r23, 0xFF	; 255
    4d24:	7f 7f       	andi	r23, 0xFF	; 255
    4d26:	7f 7f       	andi	r23, 0xFF	; 255
    4d28:	7f 7f       	andi	r23, 0xFF	; 255
    4d2a:	7f 7f       	andi	r23, 0xFF	; 255
    4d2c:	7f 7f       	andi	r23, 0xFF	; 255
    4d2e:	7f 7f       	andi	r23, 0xFF	; 255
    4d30:	7f 7f       	andi	r23, 0xFF	; 255
    4d32:	7f 7f       	andi	r23, 0xFF	; 255
    4d34:	7f 7f       	andi	r23, 0xFF	; 255
    4d36:	7f 7f       	andi	r23, 0xFF	; 255
    4d38:	7f 7f       	andi	r23, 0xFF	; 255
    4d3a:	7f 7f       	andi	r23, 0xFF	; 255
    4d3c:	7f 7f       	andi	r23, 0xFF	; 255
    4d3e:	7f 7f       	andi	r23, 0xFF	; 255
    4d40:	7f 7f       	andi	r23, 0xFF	; 255
    4d42:	7f 7f       	andi	r23, 0xFF	; 255
    4d44:	7f 7f       	andi	r23, 0xFF	; 255
    4d46:	7f 7f       	andi	r23, 0xFF	; 255
    4d48:	7f 7f       	andi	r23, 0xFF	; 255
    4d4a:	7f 7f       	andi	r23, 0xFF	; 255
    4d4c:	7f 7f       	andi	r23, 0xFF	; 255
    4d4e:	7f 7f       	andi	r23, 0xFF	; 255
    4d50:	7f 7f       	andi	r23, 0xFF	; 255
    4d52:	7f 7f       	andi	r23, 0xFF	; 255
    4d54:	7f 7f       	andi	r23, 0xFF	; 255
    4d56:	7f 7f       	andi	r23, 0xFF	; 255
    4d58:	7f 7f       	andi	r23, 0xFF	; 255
    4d5a:	7f 7f       	andi	r23, 0xFF	; 255
    4d5c:	7f 7f       	andi	r23, 0xFF	; 255
    4d5e:	7f 7f       	andi	r23, 0xFF	; 255
    4d60:	7f 7f       	andi	r23, 0xFF	; 255
    4d62:	7f 7f       	andi	r23, 0xFF	; 255
    4d64:	7f 7f       	andi	r23, 0xFF	; 255
    4d66:	7f 7f       	andi	r23, 0xFF	; 255
    4d68:	7f 7f       	andi	r23, 0xFF	; 255
    4d6a:	7f 7f       	andi	r23, 0xFF	; 255
    4d6c:	7f 7f       	andi	r23, 0xFF	; 255
    4d6e:	7f 7f       	andi	r23, 0xFF	; 255
    4d70:	7f 7f       	andi	r23, 0xFF	; 255
    4d72:	7f 7f       	andi	r23, 0xFF	; 255
    4d74:	7f 7f       	andi	r23, 0xFF	; 255
    4d76:	7f 7f       	andi	r23, 0xFF	; 255
    4d78:	7f 7f       	andi	r23, 0xFF	; 255
    4d7a:	7f 7c       	andi	r23, 0xCF	; 207
    4d7c:	78 71       	andi	r23, 0x18	; 24
    4d7e:	68 4c       	sbci	r22, 0xC8	; 200
    4d80:	2c 1c       	adc	r2, r12
    4d82:	12 0c       	add	r1, r2
    4d84:	0a 0b       	sbc	r16, r26
    4d86:	0a 05       	cpc	r16, r10
    4d88:	fd f3       	brhs	.-2      	; 0x4d88 <waves+0x988>
    4d8a:	e9 df       	rcall	.-46     	; 0x4d5e <waves+0x95e>
    4d8c:	d4 ca       	rjmp	.-2648   	; 0x4336 <steptable+0x12e>
    4d8e:	c0 b7       	in	r28, 0x30	; 48
    4d90:	ae a6       	std	Y+46, r10	; 0x2e
    4d92:	9e 97       	sbiw	r26, 0x2e	; 46
    4d94:	91 8b       	std	Z+17, r25	; 0x11
    4d96:	86 85       	ldd	r24, Z+14	; 0x0e
    4d98:	82 80       	ldd	r8, Z+2	; 0x02
    4d9a:	80 80       	ld	r8, Z
    4d9c:	80 80       	ld	r8, Z
    4d9e:	80 80       	ld	r8, Z
    4da0:	80 80       	ld	r8, Z
    4da2:	80 80       	ld	r8, Z
    4da4:	80 80       	ld	r8, Z
    4da6:	80 80       	ld	r8, Z
    4da8:	80 80       	ld	r8, Z
    4daa:	80 80       	ld	r8, Z
    4dac:	80 80       	ld	r8, Z
    4dae:	80 80       	ld	r8, Z
    4db0:	80 80       	ld	r8, Z
    4db2:	80 80       	ld	r8, Z
    4db4:	80 80       	ld	r8, Z
    4db6:	80 80       	ld	r8, Z
    4db8:	80 80       	ld	r8, Z
    4dba:	80 80       	ld	r8, Z
    4dbc:	80 80       	ld	r8, Z
    4dbe:	80 80       	ld	r8, Z
    4dc0:	80 80       	ld	r8, Z
    4dc2:	80 80       	ld	r8, Z
    4dc4:	80 80       	ld	r8, Z
    4dc6:	80 80       	ld	r8, Z
    4dc8:	80 80       	ld	r8, Z
    4dca:	80 80       	ld	r8, Z
    4dcc:	80 80       	ld	r8, Z
    4dce:	80 80       	ld	r8, Z
    4dd0:	80 80       	ld	r8, Z
    4dd2:	80 80       	ld	r8, Z
    4dd4:	80 80       	ld	r8, Z
    4dd6:	80 80       	ld	r8, Z
    4dd8:	80 80       	ld	r8, Z
    4dda:	80 80       	ld	r8, Z
    4ddc:	80 80       	ld	r8, Z
    4dde:	80 80       	ld	r8, Z
    4de0:	80 80       	ld	r8, Z
    4de2:	80 80       	ld	r8, Z
    4de4:	80 80       	ld	r8, Z
    4de6:	80 80       	ld	r8, Z
    4de8:	80 80       	ld	r8, Z
    4dea:	80 80       	ld	r8, Z
    4dec:	80 80       	ld	r8, Z
    4dee:	80 80       	ld	r8, Z
    4df0:	80 80       	ld	r8, Z
    4df2:	80 80       	ld	r8, Z
    4df4:	80 87       	std	Z+8, r24	; 0x08
    4df6:	91 9d       	mul	r25, r1
    4df8:	ac c4       	rjmp	.+2392   	; 0x5752 <ChoosePlayerShips+0x1de>
    4dfa:	cb d4       	rcall	.+2454   	; 0x5792 <ChoosePlayerShips+0x21e>
    4dfc:	dd f2       	brhs	.-74     	; 0x4db4 <waves+0x9b4>
    4dfe:	fa fa       	.word	0xfafa	; ????

00004e00 <InitRound>:

void InitRound(u8 round) {

		player1.Score = 0;
    4e00:	10 92 e4 01 	sts	0x01E4, r1
    4e04:	10 92 e3 01 	sts	0x01E3, r1
		player2.Score = 0;
    4e08:	10 92 f3 01 	sts	0x01F3, r1
    4e0c:	10 92 f2 01 	sts	0x01F2, r1

		if(round == 0){
    4e10:	88 23       	and	r24, r24
    4e12:	41 f4       	brne	.+16     	; 0x4e24 <InitRound+0x24>
			player1.RoundsWon = 0;
    4e14:	10 92 ec 01 	sts	0x01EC, r1
			player2.RoundsWon = 0;
    4e18:	10 92 fb 01 	sts	0x01FB, r1

			player1.ShipType = 0;
    4e1c:	10 92 ed 01 	sts	0x01ED, r1
			player2.ShipType = 0;
    4e20:	10 92 fc 01 	sts	0x01FC, r1
		}

		InitPlayers();
    4e24:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <InitPlayers>

		roundTimer = 900;
    4e28:	84 e8       	ldi	r24, 0x84	; 132
    4e2a:	93 e0       	ldi	r25, 0x03	; 3
    4e2c:	90 93 5d 01 	sts	0x015D, r25
    4e30:	80 93 5c 01 	sts	0x015C, r24


}
    4e34:	08 95       	ret

00004e36 <InitPlayers>:

void InitPlayers(void){
    4e36:	ff 92       	push	r15
    4e38:	0f 93       	push	r16
    4e3a:	1f 93       	push	r17
	ClearObjectStore();
    4e3c:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <ClearObjectStore>

	player1.Ship = NULL;
    4e40:	10 92 e0 01 	sts	0x01E0, r1
    4e44:	10 92 df 01 	sts	0x01DF, r1
	player1.SpawnX = PLAYER1_START_LOC_X;
    4e48:	82 e1       	ldi	r24, 0x12	; 18
    4e4a:	80 93 e9 01 	sts	0x01E9, r24
	player1.SpawnY = PLAYER1_START_LOC_Y;
    4e4e:	9c eb       	ldi	r25, 0xBC	; 188
    4e50:	90 93 ea 01 	sts	0x01EA, r25
	player1.T_Hi = PLAYER1_T_HI;
    4e54:	8c e3       	ldi	r24, 0x3C	; 60
    4e56:	80 93 eb 01 	sts	0x01EB, r24
	//player1.Lives = PLAYER_START_LIVES;

	player1.State = playerAlive;
    4e5a:	10 92 e2 01 	sts	0x01E2, r1
    4e5e:	10 92 e1 01 	sts	0x01E1, r1

	player2.Ship = NULL;
    4e62:	10 92 ef 01 	sts	0x01EF, r1
    4e66:	10 92 ee 01 	sts	0x01EE, r1
	player2.SpawnX = PLAYER2_START_LOC_X;
    4e6a:	8e ee       	ldi	r24, 0xEE	; 238
    4e6c:	80 93 f8 01 	sts	0x01F8, r24
	player2.SpawnY = PLAYER2_START_LOC_Y;
    4e70:	90 93 f9 01 	sts	0x01F9, r25
	player2.T_Hi = PLAYER2_T_HI;
    4e74:	8e eb       	ldi	r24, 0xBE	; 190
    4e76:	80 93 fa 01 	sts	0x01FA, r24
	//player2.Lives = PLAYER_START_LIVES;

	player2.State = playerAlive;
    4e7a:	10 92 f1 01 	sts	0x01F1, r1
    4e7e:	10 92 f0 01 	sts	0x01F0, r1
//	}


//	if (player1.Ship == NULL) {
	player1.Ship = ((ObjectDescStruct*)&ObjectStore[(int)NewShip(&player1)]);
    4e82:	00 e0       	ldi	r16, 0x00	; 0
    4e84:	12 e0       	ldi	r17, 0x02	; 2
    4e86:	8f ed       	ldi	r24, 0xDF	; 223
    4e88:	91 e0       	ldi	r25, 0x01	; 1
    4e8a:	0e 94 14 31 	call	0x6228	; 0x6228 <NewShip>
    4e8e:	9c e0       	ldi	r25, 0x0C	; 12
    4e90:	f9 2e       	mov	r15, r25
    4e92:	8f 9d       	mul	r24, r15
    4e94:	c0 01       	movw	r24, r0
    4e96:	11 24       	eor	r1, r1
    4e98:	80 0f       	add	r24, r16
    4e9a:	91 1f       	adc	r25, r17
    4e9c:	90 93 e0 01 	sts	0x01E0, r25
    4ea0:	80 93 df 01 	sts	0x01DF, r24
	player1.dXSub = 0;
    4ea4:	10 92 e6 01 	sts	0x01E6, r1
    4ea8:	10 92 e5 01 	sts	0x01E5, r1
	player1.dYSub = 0;
    4eac:	10 92 e8 01 	sts	0x01E8, r1
    4eb0:	10 92 e7 01 	sts	0x01E7, r1
	//player1.Ship->Type = OBJ_SHIP;
//	}

//	if (player2.Ship == NULL) {
	player2.Ship = ((ObjectDescStruct*)&ObjectStore[(int)NewShip(&player2)]);
    4eb4:	8e ee       	ldi	r24, 0xEE	; 238
    4eb6:	91 e0       	ldi	r25, 0x01	; 1
    4eb8:	0e 94 14 31 	call	0x6228	; 0x6228 <NewShip>
    4ebc:	8f 9d       	mul	r24, r15
    4ebe:	c0 01       	movw	r24, r0
    4ec0:	11 24       	eor	r1, r1
    4ec2:	08 0f       	add	r16, r24
    4ec4:	19 1f       	adc	r17, r25
    4ec6:	10 93 ef 01 	sts	0x01EF, r17
    4eca:	00 93 ee 01 	sts	0x01EE, r16
	player2.dXSub = 0;
    4ece:	10 92 f5 01 	sts	0x01F5, r1
    4ed2:	10 92 f4 01 	sts	0x01F4, r1
	player2.dYSub = 0;
    4ed6:	10 92 f7 01 	sts	0x01F7, r1
    4eda:	10 92 f6 01 	sts	0x01F6, r1
	//player2.Ship->Type = OBJ_SHIP;
//	}
}
    4ede:	1f 91       	pop	r17
    4ee0:	0f 91       	pop	r16
    4ee2:	ff 90       	pop	r15
    4ee4:	08 95       	ret

00004ee6 <TitleScreen>:
void TitleScreen(void){
    4ee6:	0f 93       	push	r16
	//setup title screen


		DrawPolarObjectFastC(40,  90, 7, 66, 255);//u
    4ee8:	88 e2       	ldi	r24, 0x28	; 40
    4eea:	6a e5       	ldi	r22, 0x5A	; 90
    4eec:	47 e0       	ldi	r20, 0x07	; 7
    4eee:	22 e4       	ldi	r18, 0x42	; 66
    4ef0:	0f ef       	ldi	r16, 0xFF	; 255
    4ef2:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(70,  90, 6, 66, 255);//z
    4ef6:	86 e4       	ldi	r24, 0x46	; 70
    4ef8:	6a e5       	ldi	r22, 0x5A	; 90
    4efa:	46 e0       	ldi	r20, 0x06	; 6
    4efc:	22 e4       	ldi	r18, 0x42	; 66
    4efe:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(103,  90, 8, 66, 255);//e
    4f02:	87 e6       	ldi	r24, 0x67	; 103
    4f04:	6a e5       	ldi	r22, 0x5A	; 90
    4f06:	48 e0       	ldi	r20, 0x08	; 8
    4f08:	22 e4       	ldi	r18, 0x42	; 66
    4f0a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(130,  90, 9, 66, 255);//w
    4f0e:	82 e8       	ldi	r24, 0x82	; 130
    4f10:	6a e5       	ldi	r22, 0x5A	; 90
    4f12:	49 e0       	ldi	r20, 0x09	; 9
    4f14:	22 e4       	ldi	r18, 0x42	; 66
    4f16:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(157,  90, 16, 66, 255);//a
    4f1a:	8d e9       	ldi	r24, 0x9D	; 157
    4f1c:	6a e5       	ldi	r22, 0x5A	; 90
    4f1e:	40 e1       	ldi	r20, 0x10	; 16
    4f20:	22 e4       	ldi	r18, 0x42	; 66
    4f22:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(184,  90, 59, 66, 255);//r
    4f26:	88 eb       	ldi	r24, 0xB8	; 184
    4f28:	6a e5       	ldi	r22, 0x5A	; 90
    4f2a:	4b e3       	ldi	r20, 0x3B	; 59
    4f2c:	22 e4       	ldi	r18, 0x42	; 66
    4f2e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(210,  90, 60, 66, 255);//s
    4f32:	82 ed       	ldi	r24, 0xD2	; 210
    4f34:	6a e5       	ldi	r22, 0x5A	; 90
    4f36:	4c e3       	ldi	r20, 0x3C	; 60
    4f38:	22 e4       	ldi	r18, 0x42	; 66
    4f3a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(40,  110, 34, 66, 200);//b
    4f3e:	88 e2       	ldi	r24, 0x28	; 40
    4f40:	6e e6       	ldi	r22, 0x6E	; 110
    4f42:	42 e2       	ldi	r20, 0x22	; 34
    4f44:	22 e4       	ldi	r18, 0x42	; 66
    4f46:	08 ec       	ldi	r16, 0xC8	; 200
    4f48:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(50,  110, 33, 66, 200);//a
    4f4c:	82 e3       	ldi	r24, 0x32	; 50
    4f4e:	6e e6       	ldi	r22, 0x6E	; 110
    4f50:	41 e2       	ldi	r20, 0x21	; 33
    4f52:	22 e4       	ldi	r18, 0x42	; 66
    4f54:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(60,  110, 52, 66, 200);//t
    4f58:	8c e3       	ldi	r24, 0x3C	; 60
    4f5a:	6e e6       	ldi	r22, 0x6E	; 110
    4f5c:	44 e3       	ldi	r20, 0x34	; 52
    4f5e:	22 e4       	ldi	r18, 0x42	; 66
    4f60:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(70,  110, 52, 66, 200);//t
    4f64:	86 e4       	ldi	r24, 0x46	; 70
    4f66:	6e e6       	ldi	r22, 0x6E	; 110
    4f68:	44 e3       	ldi	r20, 0x34	; 52
    4f6a:	22 e4       	ldi	r18, 0x42	; 66
    4f6c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(80,  110, 44, 66, 200);//l
    4f70:	80 e5       	ldi	r24, 0x50	; 80
    4f72:	6e e6       	ldi	r22, 0x6E	; 110
    4f74:	4c e2       	ldi	r20, 0x2C	; 44
    4f76:	22 e4       	ldi	r18, 0x42	; 66
    4f78:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(90,  110, 37, 66, 200);//e
    4f7c:	8a e5       	ldi	r24, 0x5A	; 90
    4f7e:	6e e6       	ldi	r22, 0x6E	; 110
    4f80:	45 e2       	ldi	r20, 0x25	; 37
    4f82:	22 e4       	ldi	r18, 0x42	; 66
    4f84:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(110,  110, 38, 66, 200);//f
    4f88:	8e e6       	ldi	r24, 0x6E	; 110
    4f8a:	6e e6       	ldi	r22, 0x6E	; 110
    4f8c:	46 e2       	ldi	r20, 0x26	; 38
    4f8e:	22 e4       	ldi	r18, 0x42	; 66
    4f90:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(120,  110, 47, 66, 200);//o
    4f94:	88 e7       	ldi	r24, 0x78	; 120
    4f96:	6e e6       	ldi	r22, 0x6E	; 110
    4f98:	4f e2       	ldi	r20, 0x2F	; 47
    4f9a:	22 e4       	ldi	r18, 0x42	; 66
    4f9c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(130,  110, 50, 66, 200);//r
    4fa0:	82 e8       	ldi	r24, 0x82	; 130
    4fa2:	6e e6       	ldi	r22, 0x6E	; 110
    4fa4:	42 e3       	ldi	r20, 0x32	; 50
    4fa6:	22 e4       	ldi	r18, 0x42	; 66
    4fa8:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(150,  110, 51, 66, 200);//s
    4fac:	86 e9       	ldi	r24, 0x96	; 150
    4fae:	6e e6       	ldi	r22, 0x6E	; 110
    4fb0:	43 e3       	ldi	r20, 0x33	; 51
    4fb2:	22 e4       	ldi	r18, 0x42	; 66
    4fb4:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(160,  110, 48, 66, 200);//p
    4fb8:	80 ea       	ldi	r24, 0xA0	; 160
    4fba:	6e e6       	ldi	r22, 0x6E	; 110
    4fbc:	40 e3       	ldi	r20, 0x30	; 48
    4fbe:	22 e4       	ldi	r18, 0x42	; 66
    4fc0:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(170,  110, 33, 66, 200);//a
    4fc4:	8a ea       	ldi	r24, 0xAA	; 170
    4fc6:	6e e6       	ldi	r22, 0x6E	; 110
    4fc8:	41 e2       	ldi	r20, 0x21	; 33
    4fca:	22 e4       	ldi	r18, 0x42	; 66
    4fcc:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(180,  110, 35, 66, 200);//c
    4fd0:	84 eb       	ldi	r24, 0xB4	; 180
    4fd2:	6e e6       	ldi	r22, 0x6E	; 110
    4fd4:	43 e2       	ldi	r20, 0x23	; 35
    4fd6:	22 e4       	ldi	r18, 0x42	; 66
    4fd8:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(190,  110, 37, 66, 200);//e
    4fdc:	8e eb       	ldi	r24, 0xBE	; 190
    4fde:	6e e6       	ldi	r22, 0x6E	; 110
    4fe0:	45 e2       	ldi	r20, 0x25	; 37
    4fe2:	22 e4       	ldi	r18, 0x42	; 66
    4fe4:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(70,  130, 48, 66, 200);//p
    4fe8:	86 e4       	ldi	r24, 0x46	; 70
    4fea:	62 e8       	ldi	r22, 0x82	; 130
    4fec:	40 e3       	ldi	r20, 0x30	; 48
    4fee:	22 e4       	ldi	r18, 0x42	; 66
    4ff0:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(80,  130, 50, 66, 200);//r
    4ff4:	80 e5       	ldi	r24, 0x50	; 80
    4ff6:	62 e8       	ldi	r22, 0x82	; 130
    4ff8:	42 e3       	ldi	r20, 0x32	; 50
    4ffa:	22 e4       	ldi	r18, 0x42	; 66
    4ffc:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(90,  130, 37, 66, 200);//e
    5000:	8a e5       	ldi	r24, 0x5A	; 90
    5002:	62 e8       	ldi	r22, 0x82	; 130
    5004:	45 e2       	ldi	r20, 0x25	; 37
    5006:	22 e4       	ldi	r18, 0x42	; 66
    5008:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(100,  130, 51, 66, 200);//s
    500c:	84 e6       	ldi	r24, 0x64	; 100
    500e:	62 e8       	ldi	r22, 0x82	; 130
    5010:	43 e3       	ldi	r20, 0x33	; 51
    5012:	22 e4       	ldi	r18, 0x42	; 66
    5014:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(110,  130, 51, 66, 200);//s
    5018:	8e e6       	ldi	r24, 0x6E	; 110
    501a:	62 e8       	ldi	r22, 0x82	; 130
    501c:	43 e3       	ldi	r20, 0x33	; 51
    501e:	22 e4       	ldi	r18, 0x42	; 66
    5020:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(130,  130, 51, 66, 200);//s
    5024:	82 e8       	ldi	r24, 0x82	; 130
    5026:	62 e8       	ldi	r22, 0x82	; 130
    5028:	43 e3       	ldi	r20, 0x33	; 51
    502a:	22 e4       	ldi	r18, 0x42	; 66
    502c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(140,  130, 52, 66, 200);//t
    5030:	8c e8       	ldi	r24, 0x8C	; 140
    5032:	62 e8       	ldi	r22, 0x82	; 130
    5034:	44 e3       	ldi	r20, 0x34	; 52
    5036:	22 e4       	ldi	r18, 0x42	; 66
    5038:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(150,  130, 33, 66, 200);//a
    503c:	86 e9       	ldi	r24, 0x96	; 150
    503e:	62 e8       	ldi	r22, 0x82	; 130
    5040:	41 e2       	ldi	r20, 0x21	; 33
    5042:	22 e4       	ldi	r18, 0x42	; 66
    5044:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(160,  130, 50, 66, 200);//r
    5048:	80 ea       	ldi	r24, 0xA0	; 160
    504a:	62 e8       	ldi	r22, 0x82	; 130
    504c:	42 e3       	ldi	r20, 0x32	; 50
    504e:	22 e4       	ldi	r18, 0x42	; 66
    5050:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(170,  130, 52, 66, 200);//t
    5054:	8a ea       	ldi	r24, 0xAA	; 170
    5056:	62 e8       	ldi	r22, 0x82	; 130
    5058:	44 e3       	ldi	r20, 0x34	; 52
    505a:	22 e4       	ldi	r18, 0x42	; 66
    505c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	//planets
	DrawPolarObjectFastC(30,  30, 5, 66, 255);//planet 1
    5060:	8e e1       	ldi	r24, 0x1E	; 30
    5062:	6e e1       	ldi	r22, 0x1E	; 30
    5064:	45 e0       	ldi	r20, 0x05	; 5
    5066:	22 e4       	ldi	r18, 0x42	; 66
    5068:	0f ef       	ldi	r16, 0xFF	; 255
    506a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(40,  40, 5, 66, 50);//planet 1
    506e:	88 e2       	ldi	r24, 0x28	; 40
    5070:	68 e2       	ldi	r22, 0x28	; 40
    5072:	45 e0       	ldi	r20, 0x05	; 5
    5074:	22 e4       	ldi	r18, 0x42	; 66
    5076:	02 e3       	ldi	r16, 0x32	; 50
    5078:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(100,  40, 5, 66, 100);//planet 1
    507c:	84 e6       	ldi	r24, 0x64	; 100
    507e:	68 e2       	ldi	r22, 0x28	; 40
    5080:	45 e0       	ldi	r20, 0x05	; 5
    5082:	22 e4       	ldi	r18, 0x42	; 66
    5084:	04 e6       	ldi	r16, 0x64	; 100
    5086:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
//	DrawPolarObjectFastC(30,  30, 5, 66, 255);//planet 1


	//press start text
	//PlayMessage(0); //PRESS START
}
    508a:	0f 91       	pop	r16
    508c:	08 95       	ret

0000508e <DrawPlayField>:

void DrawPlayField(void){
    508e:	ff 92       	push	r15
    5090:	0f 93       	push	r16
    5092:	1f 93       	push	r17
	//need to draw score boards, timer etc
	DrawPolarObjectFastC(50,  20, 4, 66, 255); //p1 scoreboard
    5094:	82 e3       	ldi	r24, 0x32	; 50
    5096:	64 e1       	ldi	r22, 0x14	; 20
    5098:	44 e0       	ldi	r20, 0x04	; 4
    509a:	22 e4       	ldi	r18, 0x42	; 66
    509c:	0f ef       	ldi	r16, 0xFF	; 255
    509e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(160,  20, 4, 66, 255); //p2 scoreboard
    50a2:	80 ea       	ldi	r24, 0xA0	; 160
    50a4:	64 e1       	ldi	r22, 0x14	; 20
    50a6:	44 e0       	ldi	r20, 0x04	; 4
    50a8:	22 e4       	ldi	r18, 0x42	; 66
    50aa:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(0,  25, 3, 66, 255); //separator line
    50ae:	80 e0       	ldi	r24, 0x00	; 0
    50b0:	69 e1       	ldi	r22, 0x19	; 25
    50b2:	43 e0       	ldi	r20, 0x03	; 3
    50b4:	22 e4       	ldi	r18, 0x42	; 66
    50b6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(45,  25, 3, 66, 255); //separator line
    50ba:	8d e2       	ldi	r24, 0x2D	; 45
    50bc:	69 e1       	ldi	r22, 0x19	; 25
    50be:	43 e0       	ldi	r20, 0x03	; 3
    50c0:	22 e4       	ldi	r18, 0x42	; 66
    50c2:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(90,  25, 3, 66, 255); //separator line
    50c6:	8a e5       	ldi	r24, 0x5A	; 90
    50c8:	69 e1       	ldi	r22, 0x19	; 25
    50ca:	43 e0       	ldi	r20, 0x03	; 3
    50cc:	22 e4       	ldi	r18, 0x42	; 66
    50ce:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(135,  25, 3, 66, 255); //separator line
    50d2:	87 e8       	ldi	r24, 0x87	; 135
    50d4:	69 e1       	ldi	r22, 0x19	; 25
    50d6:	43 e0       	ldi	r20, 0x03	; 3
    50d8:	22 e4       	ldi	r18, 0x42	; 66
    50da:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(180,  25, 3, 66, 255); //separator line
    50de:	84 eb       	ldi	r24, 0xB4	; 180
    50e0:	69 e1       	ldi	r22, 0x19	; 25
    50e2:	43 e0       	ldi	r20, 0x03	; 3
    50e4:	22 e4       	ldi	r18, 0x42	; 66
    50e6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(220,  25, 3, 66, 255); //separator line
    50ea:	8c ed       	ldi	r24, 0xDC	; 220
    50ec:	69 e1       	ldi	r22, 0x19	; 25
    50ee:	43 e0       	ldi	r20, 0x03	; 3
    50f0:	22 e4       	ldi	r18, 0x42	; 66
    50f2:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	//update scores
	//we'll have 2 objects for each player, to hold their score

	//player 1 score
	DrawPolarObjectFastC(58,  17, GetNumberObject(player1.Score / 10) , 66, 255);
    50f6:	80 91 e3 01 	lds	r24, 0x01E3
    50fa:	90 91 e4 01 	lds	r25, 0x01E4
    50fe:	6a e0       	ldi	r22, 0x0A	; 10
    5100:	70 e0       	ldi	r23, 0x00	; 0
    5102:	0e 94 39 31 	call	0x6272	; 0x6272 <__udivmodhi4>
    5106:	cb 01       	movw	r24, r22
    5108:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    510c:	48 2f       	mov	r20, r24
    510e:	8a e3       	ldi	r24, 0x3A	; 58
    5110:	61 e1       	ldi	r22, 0x11	; 17
    5112:	22 e4       	ldi	r18, 0x42	; 66
    5114:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(68,  17, GetNumberObject(player1.Score % 10) , 66, 255);
    5118:	80 91 e3 01 	lds	r24, 0x01E3
    511c:	90 91 e4 01 	lds	r25, 0x01E4
    5120:	6a e0       	ldi	r22, 0x0A	; 10
    5122:	70 e0       	ldi	r23, 0x00	; 0
    5124:	0e 94 39 31 	call	0x6272	; 0x6272 <__udivmodhi4>
    5128:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    512c:	48 2f       	mov	r20, r24
    512e:	84 e4       	ldi	r24, 0x44	; 68
    5130:	61 e1       	ldi	r22, 0x11	; 17
    5132:	22 e4       	ldi	r18, 0x42	; 66
    5134:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	//player 2 score
	DrawPolarObjectFastC(167,  17, GetNumberObject(player2.Score / 10) , 66, 255);
    5138:	80 91 f2 01 	lds	r24, 0x01F2
    513c:	90 91 f3 01 	lds	r25, 0x01F3
    5140:	6a e0       	ldi	r22, 0x0A	; 10
    5142:	70 e0       	ldi	r23, 0x00	; 0
    5144:	0e 94 39 31 	call	0x6272	; 0x6272 <__udivmodhi4>
    5148:	cb 01       	movw	r24, r22
    514a:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    514e:	48 2f       	mov	r20, r24
    5150:	87 ea       	ldi	r24, 0xA7	; 167
    5152:	61 e1       	ldi	r22, 0x11	; 17
    5154:	22 e4       	ldi	r18, 0x42	; 66
    5156:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(177,  17, GetNumberObject(player2.Score % 10) , 66, 255);
    515a:	80 91 f2 01 	lds	r24, 0x01F2
    515e:	90 91 f3 01 	lds	r25, 0x01F3
    5162:	6a e0       	ldi	r22, 0x0A	; 10
    5164:	70 e0       	ldi	r23, 0x00	; 0
    5166:	0e 94 39 31 	call	0x6272	; 0x6272 <__udivmodhi4>
    516a:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    516e:	48 2f       	mov	r20, r24
    5170:	81 eb       	ldi	r24, 0xB1	; 177
    5172:	61 e1       	ldi	r22, 0x11	; 17
    5174:	22 e4       	ldi	r18, 0x42	; 66
    5176:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	//set timer
	uint16_t sec = roundTimer / 15;
    517a:	80 91 5c 01 	lds	r24, 0x015C
    517e:	90 91 5d 01 	lds	r25, 0x015D
    5182:	6f e0       	ldi	r22, 0x0F	; 15
    5184:	70 e0       	ldi	r23, 0x00	; 0
    5186:	0e 94 39 31 	call	0x6272	; 0x6272 <__udivmodhi4>
    518a:	16 2f       	mov	r17, r22
    518c:	f7 2e       	mov	r15, r23

	DrawPolarObjectFastC(115,  17, GetNumberObject(sec / 10) , 66, 255);
    518e:	86 2f       	mov	r24, r22
    5190:	97 2f       	mov	r25, r23
    5192:	6a e0       	ldi	r22, 0x0A	; 10
    5194:	70 e0       	ldi	r23, 0x00	; 0
    5196:	0e 94 39 31 	call	0x6272	; 0x6272 <__udivmodhi4>
    519a:	cb 01       	movw	r24, r22
    519c:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    51a0:	48 2f       	mov	r20, r24
    51a2:	83 e7       	ldi	r24, 0x73	; 115
    51a4:	61 e1       	ldi	r22, 0x11	; 17
    51a6:	22 e4       	ldi	r18, 0x42	; 66
    51a8:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(125,  17, GetNumberObject(sec % 10) , 66, 255);
    51ac:	81 2f       	mov	r24, r17
    51ae:	9f 2d       	mov	r25, r15
    51b0:	6a e0       	ldi	r22, 0x0A	; 10
    51b2:	70 e0       	ldi	r23, 0x00	; 0
    51b4:	0e 94 39 31 	call	0x6272	; 0x6272 <__udivmodhi4>
    51b8:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    51bc:	48 2f       	mov	r20, r24
    51be:	8d e7       	ldi	r24, 0x7D	; 125
    51c0:	61 e1       	ldi	r22, 0x11	; 17
    51c2:	22 e4       	ldi	r18, 0x42	; 66
    51c4:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
}
    51c8:	1f 91       	pop	r17
    51ca:	0f 91       	pop	r16
    51cc:	ff 90       	pop	r15
    51ce:	08 95       	ret

000051d0 <GetNumberObject>:

uint8_t GetNumberObject(uint16_t num){

	uint8_t type;

	switch(num) {
    51d0:	85 30       	cpi	r24, 0x05	; 5
    51d2:	91 05       	cpc	r25, r1
    51d4:	41 f1       	breq	.+80     	; 0x5226 <GetNumberObject+0x56>
    51d6:	86 30       	cpi	r24, 0x06	; 6
    51d8:	91 05       	cpc	r25, r1
    51da:	78 f4       	brcc	.+30     	; 0x51fa <GetNumberObject+0x2a>
    51dc:	82 30       	cpi	r24, 0x02	; 2
    51de:	91 05       	cpc	r25, r1
    51e0:	e1 f0       	breq	.+56     	; 0x521a <GetNumberObject+0x4a>
    51e2:	83 30       	cpi	r24, 0x03	; 3
    51e4:	91 05       	cpc	r25, r1
    51e6:	18 f4       	brcc	.+6      	; 0x51ee <GetNumberObject+0x1e>
    51e8:	01 97       	sbiw	r24, 0x01	; 1
    51ea:	a9 f4       	brne	.+42     	; 0x5216 <GetNumberObject+0x46>
    51ec:	12 c0       	rjmp	.+36     	; 0x5212 <GetNumberObject+0x42>
    51ee:	83 30       	cpi	r24, 0x03	; 3
    51f0:	91 05       	cpc	r25, r1
    51f2:	a9 f0       	breq	.+42     	; 0x521e <GetNumberObject+0x4e>
    51f4:	04 97       	sbiw	r24, 0x04	; 4
    51f6:	79 f4       	brne	.+30     	; 0x5216 <GetNumberObject+0x46>
    51f8:	14 c0       	rjmp	.+40     	; 0x5222 <GetNumberObject+0x52>
    51fa:	87 30       	cpi	r24, 0x07	; 7
    51fc:	91 05       	cpc	r25, r1
    51fe:	b9 f0       	breq	.+46     	; 0x522e <GetNumberObject+0x5e>
    5200:	87 30       	cpi	r24, 0x07	; 7
    5202:	91 05       	cpc	r25, r1
    5204:	90 f0       	brcs	.+36     	; 0x522a <GetNumberObject+0x5a>
    5206:	88 30       	cpi	r24, 0x08	; 8
    5208:	91 05       	cpc	r25, r1
    520a:	99 f0       	breq	.+38     	; 0x5232 <GetNumberObject+0x62>
    520c:	09 97       	sbiw	r24, 0x09	; 9
    520e:	19 f4       	brne	.+6      	; 0x5216 <GetNumberObject+0x46>
    5210:	12 c0       	rjmp	.+36     	; 0x5236 <GetNumberObject+0x66>
    5212:	82 e1       	ldi	r24, 0x12	; 18
    5214:	08 95       	ret
    5216:	81 e1       	ldi	r24, 0x11	; 17
    5218:	08 95       	ret
    521a:	83 e1       	ldi	r24, 0x13	; 19
    521c:	08 95       	ret
			type = 18;
			break;
		}
		case 2 : {
			type = 19;
			break;
    521e:	84 e1       	ldi	r24, 0x14	; 20
    5220:	08 95       	ret
		}
		case 3 : {
			type = 20;
			break;
    5222:	85 e1       	ldi	r24, 0x15	; 21
    5224:	08 95       	ret
		}
		case 4 : {
			type = 21;
			break;
    5226:	86 e1       	ldi	r24, 0x16	; 22
    5228:	08 95       	ret
		}
		case 5 : {
			type = 22;
			break;
    522a:	87 e1       	ldi	r24, 0x17	; 23
    522c:	08 95       	ret
		}
		case 6 : {
			type = 23;
			break;
    522e:	88 e1       	ldi	r24, 0x18	; 24
    5230:	08 95       	ret
		}
		case 7 : {
			type = 24;
			break;
    5232:	89 e1       	ldi	r24, 0x19	; 25
    5234:	08 95       	ret
		}
		case 8 : {
			type = 25;
			break;
    5236:	8a e1       	ldi	r24, 0x1A	; 26
		}

	}

	return type;
}
    5238:	08 95       	ret

0000523a <playRoundEndMessage>:

void playRoundEndMessage(u8 round){
    523a:	ff 92       	push	r15
    523c:	0f 93       	push	r16
    523e:	1f 93       	push	r17
    5240:	f8 2e       	mov	r15, r24
	//get players scores and see who won
	u8 playerWhoWon = 0;

	if(player1.Score > player2.Score){
    5242:	40 91 e3 01 	lds	r20, 0x01E3
    5246:	50 91 e4 01 	lds	r21, 0x01E4
    524a:	20 91 f2 01 	lds	r18, 0x01F2
    524e:	30 91 f3 01 	lds	r19, 0x01F3
    5252:	24 17       	cp	r18, r20
    5254:	35 07       	cpc	r19, r21
    5256:	10 f0       	brcs	.+4      	; 0x525c <playRoundEndMessage+0x22>
    5258:	10 e0       	ldi	r17, 0x00	; 0
    525a:	06 c0       	rjmp	.+12     	; 0x5268 <playRoundEndMessage+0x2e>
		playerWhoWon = 1;
		player1.RoundsWon++;
    525c:	80 91 ec 01 	lds	r24, 0x01EC
    5260:	8f 5f       	subi	r24, 0xFF	; 255
    5262:	80 93 ec 01 	sts	0x01EC, r24
    5266:	11 e0       	ldi	r17, 0x01	; 1
	}
	if(player2.Score > player1.Score){
    5268:	42 17       	cp	r20, r18
    526a:	53 07       	cpc	r21, r19
    526c:	30 f4       	brcc	.+12     	; 0x527a <playRoundEndMessage+0x40>
		playerWhoWon = 2;
		player2.RoundsWon++;
    526e:	80 91 fb 01 	lds	r24, 0x01FB
    5272:	8f 5f       	subi	r24, 0xFF	; 255
    5274:	80 93 fb 01 	sts	0x01FB, r24
    5278:	12 e0       	ldi	r17, 0x02	; 2
	}

	DrawPolarObjectFastC(60,  90, 50, 66, 200);//r
    527a:	8c e3       	ldi	r24, 0x3C	; 60
    527c:	6a e5       	ldi	r22, 0x5A	; 90
    527e:	42 e3       	ldi	r20, 0x32	; 50
    5280:	22 e4       	ldi	r18, 0x42	; 66
    5282:	08 ec       	ldi	r16, 0xC8	; 200
    5284:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(70,  90, 47, 66, 200);//o
    5288:	86 e4       	ldi	r24, 0x46	; 70
    528a:	6a e5       	ldi	r22, 0x5A	; 90
    528c:	4f e2       	ldi	r20, 0x2F	; 47
    528e:	22 e4       	ldi	r18, 0x42	; 66
    5290:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(80,  90, 53, 66, 200);//u
    5294:	80 e5       	ldi	r24, 0x50	; 80
    5296:	6a e5       	ldi	r22, 0x5A	; 90
    5298:	45 e3       	ldi	r20, 0x35	; 53
    529a:	22 e4       	ldi	r18, 0x42	; 66
    529c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(90,  90, 46, 66, 200);//n
    52a0:	8a e5       	ldi	r24, 0x5A	; 90
    52a2:	6a e5       	ldi	r22, 0x5A	; 90
    52a4:	4e e2       	ldi	r20, 0x2E	; 46
    52a6:	22 e4       	ldi	r18, 0x42	; 66
    52a8:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(100,  90, 36, 66, 200);//d
    52ac:	84 e6       	ldi	r24, 0x64	; 100
    52ae:	6a e5       	ldi	r22, 0x5A	; 90
    52b0:	44 e2       	ldi	r20, 0x24	; 36
    52b2:	22 e4       	ldi	r18, 0x42	; 66
    52b4:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(120,  90, GetNumberObject(round) , 66, 255);
    52b8:	8f 2d       	mov	r24, r15
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    52c0:	48 2f       	mov	r20, r24
    52c2:	88 e7       	ldi	r24, 0x78	; 120
    52c4:	6a e5       	ldi	r22, 0x5A	; 90
    52c6:	22 e4       	ldi	r18, 0x42	; 66
    52c8:	0f ef       	ldi	r16, 0xFF	; 255
    52ca:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(140,  90, 55, 66, 200);//w
    52ce:	8c e8       	ldi	r24, 0x8C	; 140
    52d0:	6a e5       	ldi	r22, 0x5A	; 90
    52d2:	47 e3       	ldi	r20, 0x37	; 55
    52d4:	22 e4       	ldi	r18, 0x42	; 66
    52d6:	08 ec       	ldi	r16, 0xC8	; 200
    52d8:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(150,  90, 41, 66, 200);//i
    52dc:	86 e9       	ldi	r24, 0x96	; 150
    52de:	6a e5       	ldi	r22, 0x5A	; 90
    52e0:	49 e2       	ldi	r20, 0x29	; 41
    52e2:	22 e4       	ldi	r18, 0x42	; 66
    52e4:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(160,  90, 46, 66, 200);//n
    52e8:	80 ea       	ldi	r24, 0xA0	; 160
    52ea:	6a e5       	ldi	r22, 0x5A	; 90
    52ec:	4e e2       	ldi	r20, 0x2E	; 46
    52ee:	22 e4       	ldi	r18, 0x42	; 66
    52f0:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(170,  90, 46, 66, 200);//n
    52f4:	8a ea       	ldi	r24, 0xAA	; 170
    52f6:	6a e5       	ldi	r22, 0x5A	; 90
    52f8:	4e e2       	ldi	r20, 0x2E	; 46
    52fa:	22 e4       	ldi	r18, 0x42	; 66
    52fc:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(180,  90, 37, 66, 200);//e
    5300:	84 eb       	ldi	r24, 0xB4	; 180
    5302:	6a e5       	ldi	r22, 0x5A	; 90
    5304:	45 e2       	ldi	r20, 0x25	; 37
    5306:	22 e4       	ldi	r18, 0x42	; 66
    5308:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(190,  90, 50, 66, 200);//r
    530c:	8e eb       	ldi	r24, 0xBE	; 190
    530e:	6a e5       	ldi	r22, 0x5A	; 90
    5310:	42 e3       	ldi	r20, 0x32	; 50
    5312:	22 e4       	ldi	r18, 0x42	; 66
    5314:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	if(playerWhoWon == 0){
    5318:	11 23       	and	r17, r17
    531a:	89 f4       	brne	.+34     	; 0x533e <playRoundEndMessage+0x104>
			DrawPolarObjectFastC(100,  120, 52, 66, 200);//t
    531c:	84 e6       	ldi	r24, 0x64	; 100
    531e:	68 e7       	ldi	r22, 0x78	; 120
    5320:	44 e3       	ldi	r20, 0x34	; 52
    5322:	22 e4       	ldi	r18, 0x42	; 66
    5324:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
			DrawPolarObjectFastC(110,  120, 41, 66, 200);//i
    5328:	8e e6       	ldi	r24, 0x6E	; 110
    532a:	68 e7       	ldi	r22, 0x78	; 120
    532c:	49 e2       	ldi	r20, 0x29	; 41
    532e:	22 e4       	ldi	r18, 0x42	; 66
    5330:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
			DrawPolarObjectFastC(120,  120, 37, 66, 200);//e
    5334:	88 e7       	ldi	r24, 0x78	; 120
    5336:	68 e7       	ldi	r22, 0x78	; 120
    5338:	45 e2       	ldi	r20, 0x25	; 37
    533a:	22 e4       	ldi	r18, 0x42	; 66
    533c:	2e c0       	rjmp	.+92     	; 0x539a <playRoundEndMessage+0x160>

		}else{
			DrawPolarObjectFastC(100,  120, 48, 66, 200);//p
    533e:	84 e6       	ldi	r24, 0x64	; 100
    5340:	68 e7       	ldi	r22, 0x78	; 120
    5342:	40 e3       	ldi	r20, 0x30	; 48
    5344:	22 e4       	ldi	r18, 0x42	; 66
    5346:	08 ec       	ldi	r16, 0xC8	; 200
    5348:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(110,  120, 44, 66, 200);//l
    534c:	8e e6       	ldi	r24, 0x6E	; 110
    534e:	68 e7       	ldi	r22, 0x78	; 120
    5350:	4c e2       	ldi	r20, 0x2C	; 44
    5352:	22 e4       	ldi	r18, 0x42	; 66
    5354:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(120,  120, 33, 66, 200);//a
    5358:	88 e7       	ldi	r24, 0x78	; 120
    535a:	68 e7       	ldi	r22, 0x78	; 120
    535c:	41 e2       	ldi	r20, 0x21	; 33
    535e:	22 e4       	ldi	r18, 0x42	; 66
    5360:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(130,  120, 57, 66, 200);//y
    5364:	82 e8       	ldi	r24, 0x82	; 130
    5366:	68 e7       	ldi	r22, 0x78	; 120
    5368:	49 e3       	ldi	r20, 0x39	; 57
    536a:	22 e4       	ldi	r18, 0x42	; 66
    536c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(140,  120, 37, 66, 200);//e
    5370:	8c e8       	ldi	r24, 0x8C	; 140
    5372:	68 e7       	ldi	r22, 0x78	; 120
    5374:	45 e2       	ldi	r20, 0x25	; 37
    5376:	22 e4       	ldi	r18, 0x42	; 66
    5378:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(150,  120, 50, 66, 200);//r
    537c:	86 e9       	ldi	r24, 0x96	; 150
    537e:	68 e7       	ldi	r22, 0x78	; 120
    5380:	42 e3       	ldi	r20, 0x32	; 50
    5382:	22 e4       	ldi	r18, 0x42	; 66
    5384:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>


		DrawPolarObjectFastC(170,  120, GetNumberObject(playerWhoWon) , 66, 255);
    5388:	81 2f       	mov	r24, r17
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    5390:	48 2f       	mov	r20, r24
    5392:	8a ea       	ldi	r24, 0xAA	; 170
    5394:	68 e7       	ldi	r22, 0x78	; 120
    5396:	22 e4       	ldi	r18, 0x42	; 66
    5398:	0f ef       	ldi	r16, 0xFF	; 255
    539a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		}

}
    539e:	1f 91       	pop	r17
    53a0:	0f 91       	pop	r16
    53a2:	ff 90       	pop	r15
    53a4:	08 95       	ret

000053a6 <playRoundBeginMessage>:

void playRoundBeginMessage(u8 round){
    53a6:	0f 93       	push	r16
    53a8:	1f 93       	push	r17
    53aa:	18 2f       	mov	r17, r24



	DrawPolarObjectFastC(100,  110, 50, 66, 200);//r
    53ac:	84 e6       	ldi	r24, 0x64	; 100
    53ae:	6e e6       	ldi	r22, 0x6E	; 110
    53b0:	42 e3       	ldi	r20, 0x32	; 50
    53b2:	22 e4       	ldi	r18, 0x42	; 66
    53b4:	08 ec       	ldi	r16, 0xC8	; 200
    53b6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(110,  110, 47, 66, 200);//o
    53ba:	8e e6       	ldi	r24, 0x6E	; 110
    53bc:	6e e6       	ldi	r22, 0x6E	; 110
    53be:	4f e2       	ldi	r20, 0x2F	; 47
    53c0:	22 e4       	ldi	r18, 0x42	; 66
    53c2:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(120,  110, 53, 66, 200);//u
    53c6:	88 e7       	ldi	r24, 0x78	; 120
    53c8:	6e e6       	ldi	r22, 0x6E	; 110
    53ca:	45 e3       	ldi	r20, 0x35	; 53
    53cc:	22 e4       	ldi	r18, 0x42	; 66
    53ce:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(130,  110, 46, 66, 200);//n
    53d2:	82 e8       	ldi	r24, 0x82	; 130
    53d4:	6e e6       	ldi	r22, 0x6E	; 110
    53d6:	4e e2       	ldi	r20, 0x2E	; 46
    53d8:	22 e4       	ldi	r18, 0x42	; 66
    53da:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(140,  110, 36, 66, 200);//d
    53de:	8c e8       	ldi	r24, 0x8C	; 140
    53e0:	6e e6       	ldi	r22, 0x6E	; 110
    53e2:	44 e2       	ldi	r20, 0x24	; 36
    53e4:	22 e4       	ldi	r18, 0x42	; 66
    53e6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(160,  110, GetNumberObject(round) , 66, 255);
    53ea:	81 2f       	mov	r24, r17
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    53f2:	48 2f       	mov	r20, r24
    53f4:	80 ea       	ldi	r24, 0xA0	; 160
    53f6:	6e e6       	ldi	r22, 0x6E	; 110
    53f8:	22 e4       	ldi	r18, 0x42	; 66
    53fa:	0f ef       	ldi	r16, 0xFF	; 255
    53fc:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>


}
    5400:	1f 91       	pop	r17
    5402:	0f 91       	pop	r16
    5404:	08 95       	ret

00005406 <playGameOverMessage>:

void playGameOverMessage(void){
    5406:	0f 93       	push	r16
    5408:	1f 93       	push	r17
	//get players scores and see who won
				u8 theWinner = 0;

				if(player1.RoundsWon > player2.RoundsWon){
    540a:	90 91 ec 01 	lds	r25, 0x01EC
    540e:	80 91 fb 01 	lds	r24, 0x01FB
					theWinner = 1;

				}
				if(player2.RoundsWon > player1.RoundsWon){
    5412:	98 17       	cp	r25, r24
    5414:	10 f4       	brcc	.+4      	; 0x541a <playGameOverMessage+0x14>
    5416:	12 e0       	ldi	r17, 0x02	; 2
    5418:	04 c0       	rjmp	.+8      	; 0x5422 <playGameOverMessage+0x1c>
    541a:	10 e0       	ldi	r17, 0x00	; 0
    541c:	89 17       	cp	r24, r25
    541e:	08 f4       	brcc	.+2      	; 0x5422 <playGameOverMessage+0x1c>
    5420:	11 e0       	ldi	r17, 0x01	; 1
					theWinner = 2;

				}

	DrawPolarObjectFastC(100,  110, 39, 66, 200);//g
    5422:	84 e6       	ldi	r24, 0x64	; 100
    5424:	6e e6       	ldi	r22, 0x6E	; 110
    5426:	47 e2       	ldi	r20, 0x27	; 39
    5428:	22 e4       	ldi	r18, 0x42	; 66
    542a:	08 ec       	ldi	r16, 0xC8	; 200
    542c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(110,  110, 33, 66, 200);//a
    5430:	8e e6       	ldi	r24, 0x6E	; 110
    5432:	6e e6       	ldi	r22, 0x6E	; 110
    5434:	41 e2       	ldi	r20, 0x21	; 33
    5436:	22 e4       	ldi	r18, 0x42	; 66
    5438:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(120,  110, 45, 66, 200);//m
    543c:	88 e7       	ldi	r24, 0x78	; 120
    543e:	6e e6       	ldi	r22, 0x6E	; 110
    5440:	4d e2       	ldi	r20, 0x2D	; 45
    5442:	22 e4       	ldi	r18, 0x42	; 66
    5444:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(130,  110, 37, 66, 200);//e
    5448:	82 e8       	ldi	r24, 0x82	; 130
    544a:	6e e6       	ldi	r22, 0x6E	; 110
    544c:	45 e2       	ldi	r20, 0x25	; 37
    544e:	22 e4       	ldi	r18, 0x42	; 66
    5450:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(140,  110, 47, 66, 200);//o
    5454:	8c e8       	ldi	r24, 0x8C	; 140
    5456:	6e e6       	ldi	r22, 0x6E	; 110
    5458:	4f e2       	ldi	r20, 0x2F	; 47
    545a:	22 e4       	ldi	r18, 0x42	; 66
    545c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(150,  110, 54, 66, 200);//v
    5460:	86 e9       	ldi	r24, 0x96	; 150
    5462:	6e e6       	ldi	r22, 0x6E	; 110
    5464:	46 e3       	ldi	r20, 0x36	; 54
    5466:	22 e4       	ldi	r18, 0x42	; 66
    5468:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(160,  110, 37, 66, 200);//e
    546c:	80 ea       	ldi	r24, 0xA0	; 160
    546e:	6e e6       	ldi	r22, 0x6E	; 110
    5470:	45 e2       	ldi	r20, 0x25	; 37
    5472:	22 e4       	ldi	r18, 0x42	; 66
    5474:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(170,  110, 50, 66, 200);//r
    5478:	8a ea       	ldi	r24, 0xAA	; 170
    547a:	6e e6       	ldi	r22, 0x6E	; 110
    547c:	42 e3       	ldi	r20, 0x32	; 50
    547e:	22 e4       	ldi	r18, 0x42	; 66
    5480:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(70,  140, 55, 66, 200);//w
    5484:	86 e4       	ldi	r24, 0x46	; 70
    5486:	6c e8       	ldi	r22, 0x8C	; 140
    5488:	47 e3       	ldi	r20, 0x37	; 55
    548a:	22 e4       	ldi	r18, 0x42	; 66
    548c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(80,  140, 41, 66, 200);//i
    5490:	80 e5       	ldi	r24, 0x50	; 80
    5492:	6c e8       	ldi	r22, 0x8C	; 140
    5494:	49 e2       	ldi	r20, 0x29	; 41
    5496:	22 e4       	ldi	r18, 0x42	; 66
    5498:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(90,  140, 46, 66, 200);//n
    549c:	8a e5       	ldi	r24, 0x5A	; 90
    549e:	6c e8       	ldi	r22, 0x8C	; 140
    54a0:	4e e2       	ldi	r20, 0x2E	; 46
    54a2:	22 e4       	ldi	r18, 0x42	; 66
    54a4:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(100,  140, 46, 66, 200);//n
    54a8:	84 e6       	ldi	r24, 0x64	; 100
    54aa:	6c e8       	ldi	r22, 0x8C	; 140
    54ac:	4e e2       	ldi	r20, 0x2E	; 46
    54ae:	22 e4       	ldi	r18, 0x42	; 66
    54b0:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(110,  140, 37, 66, 200);//e
    54b4:	8e e6       	ldi	r24, 0x6E	; 110
    54b6:	6c e8       	ldi	r22, 0x8C	; 140
    54b8:	45 e2       	ldi	r20, 0x25	; 37
    54ba:	22 e4       	ldi	r18, 0x42	; 66
    54bc:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(120,  140, 50, 66, 200);//r
    54c0:	88 e7       	ldi	r24, 0x78	; 120
    54c2:	6c e8       	ldi	r22, 0x8C	; 140
    54c4:	42 e3       	ldi	r20, 0x32	; 50
    54c6:	22 e4       	ldi	r18, 0x42	; 66
    54c8:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>


	if(theWinner == 0){
    54cc:	11 23       	and	r17, r17
    54ce:	89 f4       	brne	.+34     	; 0x54f2 <playGameOverMessage+0xec>
			DrawPolarObjectFastC(140,  140, 52, 66, 200);//t
    54d0:	8c e8       	ldi	r24, 0x8C	; 140
    54d2:	6c e8       	ldi	r22, 0x8C	; 140
    54d4:	44 e3       	ldi	r20, 0x34	; 52
    54d6:	22 e4       	ldi	r18, 0x42	; 66
    54d8:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
			DrawPolarObjectFastC(150,  140, 41, 66, 200);//i
    54dc:	86 e9       	ldi	r24, 0x96	; 150
    54de:	6c e8       	ldi	r22, 0x8C	; 140
    54e0:	49 e2       	ldi	r20, 0x29	; 41
    54e2:	22 e4       	ldi	r18, 0x42	; 66
    54e4:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
			DrawPolarObjectFastC(160,  140, 37, 66, 200);//e
    54e8:	80 ea       	ldi	r24, 0xA0	; 160
    54ea:	6c e8       	ldi	r22, 0x8C	; 140
    54ec:	45 e2       	ldi	r20, 0x25	; 37
    54ee:	22 e4       	ldi	r18, 0x42	; 66
    54f0:	2e c0       	rjmp	.+92     	; 0x554e <playGameOverMessage+0x148>

	}else{
		DrawPolarObjectFastC(140,  140, 48, 66, 200);//p
    54f2:	8c e8       	ldi	r24, 0x8C	; 140
    54f4:	6c e8       	ldi	r22, 0x8C	; 140
    54f6:	40 e3       	ldi	r20, 0x30	; 48
    54f8:	22 e4       	ldi	r18, 0x42	; 66
    54fa:	08 ec       	ldi	r16, 0xC8	; 200
    54fc:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(150,  140, 44, 66, 200);//l
    5500:	86 e9       	ldi	r24, 0x96	; 150
    5502:	6c e8       	ldi	r22, 0x8C	; 140
    5504:	4c e2       	ldi	r20, 0x2C	; 44
    5506:	22 e4       	ldi	r18, 0x42	; 66
    5508:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(160,  140, 33, 66, 200);//a
    550c:	80 ea       	ldi	r24, 0xA0	; 160
    550e:	6c e8       	ldi	r22, 0x8C	; 140
    5510:	41 e2       	ldi	r20, 0x21	; 33
    5512:	22 e4       	ldi	r18, 0x42	; 66
    5514:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(170,  140, 57, 66, 200);//y
    5518:	8a ea       	ldi	r24, 0xAA	; 170
    551a:	6c e8       	ldi	r22, 0x8C	; 140
    551c:	49 e3       	ldi	r20, 0x39	; 57
    551e:	22 e4       	ldi	r18, 0x42	; 66
    5520:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(180,  140, 37, 66, 200);//e
    5524:	84 eb       	ldi	r24, 0xB4	; 180
    5526:	6c e8       	ldi	r22, 0x8C	; 140
    5528:	45 e2       	ldi	r20, 0x25	; 37
    552a:	22 e4       	ldi	r18, 0x42	; 66
    552c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		DrawPolarObjectFastC(190,  140, 50, 66, 200);//r
    5530:	8e eb       	ldi	r24, 0xBE	; 190
    5532:	6c e8       	ldi	r22, 0x8C	; 140
    5534:	42 e3       	ldi	r20, 0x32	; 50
    5536:	22 e4       	ldi	r18, 0x42	; 66
    5538:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>


		DrawPolarObjectFastC(210,  140, GetNumberObject(theWinner) , 66, 255);
    553c:	81 2f       	mov	r24, r17
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <GetNumberObject>
    5544:	48 2f       	mov	r20, r24
    5546:	82 ed       	ldi	r24, 0xD2	; 210
    5548:	6c e8       	ldi	r22, 0x8C	; 140
    554a:	22 e4       	ldi	r18, 0x42	; 66
    554c:	0f ef       	ldi	r16, 0xFF	; 255
    554e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
		}


}
    5552:	1f 91       	pop	r17
    5554:	0f 91       	pop	r16
    5556:	08 95       	ret

00005558 <HandleSync>:

void HandleSync(void){
	ClearVramFlags = ClearFrameYes;
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	80 93 13 01 	sts	0x0113, r24

		while(renderCount != 0);			// GetVSync doesn't always work use my own counter
    555e:	80 91 12 01 	lds	r24, 0x0112
    5562:	88 23       	and	r24, r24
    5564:	e1 f7       	brne	.-8      	; 0x555e <HandleSync+0x6>
		ClearVsyncFlag();
    5566:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <ClearVsyncFlag>

		ClearBufferLastLine();
    556a:	0e 94 8f 13 	call	0x271e	; 0x271e <ClearBufferLastLine>
		ClearVramFlags = ClearFrameNo;
    556e:	10 92 13 01 	sts	0x0113, r1
}
    5572:	08 95       	ret

00005574 <ChoosePlayerShips>:

void ChoosePlayerShips(void){
    5574:	ff 92       	push	r15
    5576:	0f 93       	push	r16
    5578:	1f 93       	push	r17
    557a:	1d e3       	ldi	r17, 0x3D	; 61
    557c:	b4 c1       	rjmp	.+872    	; 0x58e6 <ChoosePlayerShips+0x372>
	//have players select their ship
	uint16_t buttons;
	u8 currentObj = OBJ_FIRST_SHIP;

	while(player1.ShipType == 0 || player2.ShipType == 0){
	HandleSync();
    557e:	0e 94 ac 2a 	call	0x5558	; 0x5558 <HandleSync>

	DrawPolarObjectFastC(10,  40, 48, 66, 200);//p
    5582:	8a e0       	ldi	r24, 0x0A	; 10
    5584:	68 e2       	ldi	r22, 0x28	; 40
    5586:	40 e3       	ldi	r20, 0x30	; 48
    5588:	22 e4       	ldi	r18, 0x42	; 66
    558a:	08 ec       	ldi	r16, 0xC8	; 200
    558c:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(20,  40, 44, 66, 200);//l
    5590:	84 e1       	ldi	r24, 0x14	; 20
    5592:	68 e2       	ldi	r22, 0x28	; 40
    5594:	4c e2       	ldi	r20, 0x2C	; 44
    5596:	22 e4       	ldi	r18, 0x42	; 66
    5598:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(30,  40, 33, 66, 200);//a
    559c:	8e e1       	ldi	r24, 0x1E	; 30
    559e:	68 e2       	ldi	r22, 0x28	; 40
    55a0:	41 e2       	ldi	r20, 0x21	; 33
    55a2:	22 e4       	ldi	r18, 0x42	; 66
    55a4:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(40,  40, 57, 66, 200);//y
    55a8:	88 e2       	ldi	r24, 0x28	; 40
    55aa:	68 e2       	ldi	r22, 0x28	; 40
    55ac:	49 e3       	ldi	r20, 0x39	; 57
    55ae:	22 e4       	ldi	r18, 0x42	; 66
    55b0:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(50,  40, 37, 66, 200);//e
    55b4:	82 e3       	ldi	r24, 0x32	; 50
    55b6:	68 e2       	ldi	r22, 0x28	; 40
    55b8:	45 e2       	ldi	r20, 0x25	; 37
    55ba:	22 e4       	ldi	r18, 0x42	; 66
    55bc:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(60,  40, 50, 66, 200);//r
    55c0:	8c e3       	ldi	r24, 0x3C	; 60
    55c2:	68 e2       	ldi	r22, 0x28	; 40
    55c4:	42 e3       	ldi	r20, 0x32	; 50
    55c6:	22 e4       	ldi	r18, 0x42	; 66
    55c8:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	if(player1.ShipType == 0){
    55cc:	80 91 ed 01 	lds	r24, 0x01ED
    55d0:	88 23       	and	r24, r24
    55d2:	29 f4       	brne	.+10     	; 0x55de <ChoosePlayerShips+0x6a>
		//choose player 1 first
		DrawPolarObjectFastC(80,  40, 18, 66, 200);//1
    55d4:	80 e5       	ldi	r24, 0x50	; 80
    55d6:	68 e2       	ldi	r22, 0x28	; 40
    55d8:	42 e1       	ldi	r20, 0x12	; 18
    55da:	22 e4       	ldi	r18, 0x42	; 66
    55dc:	09 c0       	rjmp	.+18     	; 0x55f0 <ChoosePlayerShips+0x7c>
	}else if(player2.ShipType == 0){
    55de:	80 91 fc 01 	lds	r24, 0x01FC
    55e2:	88 23       	and	r24, r24
    55e4:	39 f4       	brne	.+14     	; 0x55f4 <ChoosePlayerShips+0x80>
		DrawPolarObjectFastC(80,  40, 19, 66, 200);//2
    55e6:	80 e5       	ldi	r24, 0x50	; 80
    55e8:	68 e2       	ldi	r22, 0x28	; 40
    55ea:	43 e1       	ldi	r20, 0x13	; 19
    55ec:	22 e4       	ldi	r18, 0x42	; 66
    55ee:	08 ec       	ldi	r16, 0xC8	; 200
    55f0:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	}

	DrawPolarObjectFastC(100,  40, 53, 66, 200);//u
    55f4:	84 e6       	ldi	r24, 0x64	; 100
    55f6:	68 e2       	ldi	r22, 0x28	; 40
    55f8:	45 e3       	ldi	r20, 0x35	; 53
    55fa:	22 e4       	ldi	r18, 0x42	; 66
    55fc:	08 ec       	ldi	r16, 0xC8	; 200
    55fe:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(110,  40, 51, 66, 200);//s
    5602:	8e e6       	ldi	r24, 0x6E	; 110
    5604:	68 e2       	ldi	r22, 0x28	; 40
    5606:	43 e3       	ldi	r20, 0x33	; 51
    5608:	22 e4       	ldi	r18, 0x42	; 66
    560a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(120,  40, 37, 66, 200);//e
    560e:	88 e7       	ldi	r24, 0x78	; 120
    5610:	68 e2       	ldi	r22, 0x28	; 40
    5612:	45 e2       	ldi	r20, 0x25	; 37
    5614:	22 e4       	ldi	r18, 0x42	; 66
    5616:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(140,  40, 53, 66, 200);//u
    561a:	8c e8       	ldi	r24, 0x8C	; 140
    561c:	68 e2       	ldi	r22, 0x28	; 40
    561e:	45 e3       	ldi	r20, 0x35	; 53
    5620:	22 e4       	ldi	r18, 0x42	; 66
    5622:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(150,  40, 48, 66, 200);//p
    5626:	86 e9       	ldi	r24, 0x96	; 150
    5628:	68 e2       	ldi	r22, 0x28	; 40
    562a:	40 e3       	ldi	r20, 0x30	; 48
    562c:	22 e4       	ldi	r18, 0x42	; 66
    562e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(170,  40, 33, 66, 200);//a
    5632:	8a ea       	ldi	r24, 0xAA	; 170
    5634:	68 e2       	ldi	r22, 0x28	; 40
    5636:	41 e2       	ldi	r20, 0x21	; 33
    5638:	22 e4       	ldi	r18, 0x42	; 66
    563a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(180,  40, 46, 66, 200);//n
    563e:	84 eb       	ldi	r24, 0xB4	; 180
    5640:	68 e2       	ldi	r22, 0x28	; 40
    5642:	4e e2       	ldi	r20, 0x2E	; 46
    5644:	22 e4       	ldi	r18, 0x42	; 66
    5646:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(190,  40, 36, 66, 200);//d
    564a:	8e eb       	ldi	r24, 0xBE	; 190
    564c:	68 e2       	ldi	r22, 0x28	; 40
    564e:	44 e2       	ldi	r20, 0x24	; 36
    5650:	22 e4       	ldi	r18, 0x42	; 66
    5652:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(210,  40, 36, 66, 200);//d
    5656:	82 ed       	ldi	r24, 0xD2	; 210
    5658:	68 e2       	ldi	r22, 0x28	; 40
    565a:	44 e2       	ldi	r20, 0x24	; 36
    565c:	22 e4       	ldi	r18, 0x42	; 66
    565e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(220,  40, 47, 66, 200);//o
    5662:	8c ed       	ldi	r24, 0xDC	; 220
    5664:	68 e2       	ldi	r22, 0x28	; 40
    5666:	4f e2       	ldi	r20, 0x2F	; 47
    5668:	22 e4       	ldi	r18, 0x42	; 66
    566a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(230,  40, 55, 66, 200);//w
    566e:	86 ee       	ldi	r24, 0xE6	; 230
    5670:	68 e2       	ldi	r22, 0x28	; 40
    5672:	47 e3       	ldi	r20, 0x37	; 55
    5674:	22 e4       	ldi	r18, 0x42	; 66
    5676:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(240,  40, 46, 66, 200);//n
    567a:	80 ef       	ldi	r24, 0xF0	; 240
    567c:	68 e2       	ldi	r22, 0x28	; 40
    567e:	4e e2       	ldi	r20, 0x2E	; 46
    5680:	22 e4       	ldi	r18, 0x42	; 66
    5682:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(10,  60, 34, 66, 200);//b
    5686:	8a e0       	ldi	r24, 0x0A	; 10
    5688:	6c e3       	ldi	r22, 0x3C	; 60
    568a:	42 e2       	ldi	r20, 0x22	; 34
    568c:	22 e4       	ldi	r18, 0x42	; 66
    568e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(20,  60, 53, 66, 200);//u
    5692:	84 e1       	ldi	r24, 0x14	; 20
    5694:	6c e3       	ldi	r22, 0x3C	; 60
    5696:	45 e3       	ldi	r20, 0x35	; 53
    5698:	22 e4       	ldi	r18, 0x42	; 66
    569a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(30,  60, 52, 66, 200);//t
    569e:	8e e1       	ldi	r24, 0x1E	; 30
    56a0:	6c e3       	ldi	r22, 0x3C	; 60
    56a2:	44 e3       	ldi	r20, 0x34	; 52
    56a4:	22 e4       	ldi	r18, 0x42	; 66
    56a6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(40,  60, 52, 66, 200);//t
    56aa:	88 e2       	ldi	r24, 0x28	; 40
    56ac:	6c e3       	ldi	r22, 0x3C	; 60
    56ae:	44 e3       	ldi	r20, 0x34	; 52
    56b0:	22 e4       	ldi	r18, 0x42	; 66
    56b2:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(50,  60, 47, 66, 200);//o
    56b6:	82 e3       	ldi	r24, 0x32	; 50
    56b8:	6c e3       	ldi	r22, 0x3C	; 60
    56ba:	4f e2       	ldi	r20, 0x2F	; 47
    56bc:	22 e4       	ldi	r18, 0x42	; 66
    56be:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(60,  60, 46, 66, 200);//n
    56c2:	8c e3       	ldi	r24, 0x3C	; 60
    56c4:	6c e3       	ldi	r22, 0x3C	; 60
    56c6:	4e e2       	ldi	r20, 0x2E	; 46
    56c8:	22 e4       	ldi	r18, 0x42	; 66
    56ca:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(80,  60, 52, 66, 200);//t
    56ce:	80 e5       	ldi	r24, 0x50	; 80
    56d0:	6c e3       	ldi	r22, 0x3C	; 60
    56d2:	44 e3       	ldi	r20, 0x34	; 52
    56d4:	22 e4       	ldi	r18, 0x42	; 66
    56d6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(90,  60, 47, 66, 200);//o
    56da:	8a e5       	ldi	r24, 0x5A	; 90
    56dc:	6c e3       	ldi	r22, 0x3C	; 60
    56de:	4f e2       	ldi	r20, 0x2F	; 47
    56e0:	22 e4       	ldi	r18, 0x42	; 66
    56e2:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(110,  60, 51, 66, 200);//s
    56e6:	8e e6       	ldi	r24, 0x6E	; 110
    56e8:	6c e3       	ldi	r22, 0x3C	; 60
    56ea:	43 e3       	ldi	r20, 0x33	; 51
    56ec:	22 e4       	ldi	r18, 0x42	; 66
    56ee:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(120,  60, 37, 66, 200);//e
    56f2:	88 e7       	ldi	r24, 0x78	; 120
    56f4:	6c e3       	ldi	r22, 0x3C	; 60
    56f6:	45 e2       	ldi	r20, 0x25	; 37
    56f8:	22 e4       	ldi	r18, 0x42	; 66
    56fa:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(130,  60, 44, 66, 200);//l
    56fe:	82 e8       	ldi	r24, 0x82	; 130
    5700:	6c e3       	ldi	r22, 0x3C	; 60
    5702:	4c e2       	ldi	r20, 0x2C	; 44
    5704:	22 e4       	ldi	r18, 0x42	; 66
    5706:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(140,  60, 37, 66, 200);//e
    570a:	8c e8       	ldi	r24, 0x8C	; 140
    570c:	6c e3       	ldi	r22, 0x3C	; 60
    570e:	45 e2       	ldi	r20, 0x25	; 37
    5710:	22 e4       	ldi	r18, 0x42	; 66
    5712:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(150,  60, 35, 66, 200);//c
    5716:	86 e9       	ldi	r24, 0x96	; 150
    5718:	6c e3       	ldi	r22, 0x3C	; 60
    571a:	43 e2       	ldi	r20, 0x23	; 35
    571c:	22 e4       	ldi	r18, 0x42	; 66
    571e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(160,  60, 52, 66, 200);//t
    5722:	80 ea       	ldi	r24, 0xA0	; 160
    5724:	6c e3       	ldi	r22, 0x3C	; 60
    5726:	44 e3       	ldi	r20, 0x34	; 52
    5728:	22 e4       	ldi	r18, 0x42	; 66
    572a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(180,  60, 51, 66, 200);//s
    572e:	84 eb       	ldi	r24, 0xB4	; 180
    5730:	6c e3       	ldi	r22, 0x3C	; 60
    5732:	43 e3       	ldi	r20, 0x33	; 51
    5734:	22 e4       	ldi	r18, 0x42	; 66
    5736:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(190,  60, 40, 66, 200);//h
    573a:	8e eb       	ldi	r24, 0xBE	; 190
    573c:	6c e3       	ldi	r22, 0x3C	; 60
    573e:	48 e2       	ldi	r20, 0x28	; 40
    5740:	22 e4       	ldi	r18, 0x42	; 66
    5742:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(200,  60, 41, 66, 200);//i
    5746:	88 ec       	ldi	r24, 0xC8	; 200
    5748:	6c e3       	ldi	r22, 0x3C	; 60
    574a:	49 e2       	ldi	r20, 0x29	; 41
    574c:	22 e4       	ldi	r18, 0x42	; 66
    574e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(210,  60, 48, 66, 200);//p
    5752:	82 ed       	ldi	r24, 0xD2	; 210
    5754:	6c e3       	ldi	r22, 0x3C	; 60
    5756:	40 e3       	ldi	r20, 0x30	; 48
    5758:	22 e4       	ldi	r18, 0x42	; 66
    575a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(220,  60, 28, 66, 200);//.
    575e:	8c ed       	ldi	r24, 0xDC	; 220
    5760:	6c e3       	ldi	r22, 0x3C	; 60
    5762:	4c e1       	ldi	r20, 0x1C	; 28
    5764:	22 e4       	ldi	r18, 0x42	; 66
    5766:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(10,  80, 48, 66, 200);//p
    576a:	8a e0       	ldi	r24, 0x0A	; 10
    576c:	60 e5       	ldi	r22, 0x50	; 80
    576e:	40 e3       	ldi	r20, 0x30	; 48
    5770:	22 e4       	ldi	r18, 0x42	; 66
    5772:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(20,  80, 50, 66, 200);//r
    5776:	84 e1       	ldi	r24, 0x14	; 20
    5778:	60 e5       	ldi	r22, 0x50	; 80
    577a:	42 e3       	ldi	r20, 0x32	; 50
    577c:	22 e4       	ldi	r18, 0x42	; 66
    577e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(30,  80, 37, 66, 200);//e
    5782:	8e e1       	ldi	r24, 0x1E	; 30
    5784:	60 e5       	ldi	r22, 0x50	; 80
    5786:	45 e2       	ldi	r20, 0x25	; 37
    5788:	22 e4       	ldi	r18, 0x42	; 66
    578a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(40,  80, 51, 66, 200);//s
    578e:	88 e2       	ldi	r24, 0x28	; 40
    5790:	60 e5       	ldi	r22, 0x50	; 80
    5792:	43 e3       	ldi	r20, 0x33	; 51
    5794:	22 e4       	ldi	r18, 0x42	; 66
    5796:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(50,  80, 51, 66, 200);//s
    579a:	82 e3       	ldi	r24, 0x32	; 50
    579c:	60 e5       	ldi	r22, 0x50	; 80
    579e:	43 e3       	ldi	r20, 0x33	; 51
    57a0:	22 e4       	ldi	r18, 0x42	; 66
    57a2:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(70,  80, 51, 66, 200);//s
    57a6:	86 e4       	ldi	r24, 0x46	; 70
    57a8:	60 e5       	ldi	r22, 0x50	; 80
    57aa:	43 e3       	ldi	r20, 0x33	; 51
    57ac:	22 e4       	ldi	r18, 0x42	; 66
    57ae:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(80,  80, 37, 66, 200);//e
    57b2:	80 e5       	ldi	r24, 0x50	; 80
    57b4:	60 e5       	ldi	r22, 0x50	; 80
    57b6:	45 e2       	ldi	r20, 0x25	; 37
    57b8:	22 e4       	ldi	r18, 0x42	; 66
    57ba:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(90,  80, 44, 66, 200);//l
    57be:	8a e5       	ldi	r24, 0x5A	; 90
    57c0:	60 e5       	ldi	r22, 0x50	; 80
    57c2:	4c e2       	ldi	r20, 0x2C	; 44
    57c4:	22 e4       	ldi	r18, 0x42	; 66
    57c6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(100,  80, 37, 66, 200);//e
    57ca:	84 e6       	ldi	r24, 0x64	; 100
    57cc:	60 e5       	ldi	r22, 0x50	; 80
    57ce:	45 e2       	ldi	r20, 0x25	; 37
    57d0:	22 e4       	ldi	r18, 0x42	; 66
    57d2:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(110,  80, 35, 66, 200);//c
    57d6:	8e e6       	ldi	r24, 0x6E	; 110
    57d8:	60 e5       	ldi	r22, 0x50	; 80
    57da:	43 e2       	ldi	r20, 0x23	; 35
    57dc:	22 e4       	ldi	r18, 0x42	; 66
    57de:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(120,  80, 52, 66, 200);//t
    57e2:	88 e7       	ldi	r24, 0x78	; 120
    57e4:	60 e5       	ldi	r22, 0x50	; 80
    57e6:	44 e3       	ldi	r20, 0x34	; 52
    57e8:	22 e4       	ldi	r18, 0x42	; 66
    57ea:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(140,  80, 55, 66, 200);//w
    57ee:	8c e8       	ldi	r24, 0x8C	; 140
    57f0:	60 e5       	ldi	r22, 0x50	; 80
    57f2:	47 e3       	ldi	r20, 0x37	; 55
    57f4:	22 e4       	ldi	r18, 0x42	; 66
    57f6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(150,  80, 40, 66, 200);//h
    57fa:	86 e9       	ldi	r24, 0x96	; 150
    57fc:	60 e5       	ldi	r22, 0x50	; 80
    57fe:	48 e2       	ldi	r20, 0x28	; 40
    5800:	22 e4       	ldi	r18, 0x42	; 66
    5802:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(160,  80, 37, 66, 200);//e
    5806:	80 ea       	ldi	r24, 0xA0	; 160
    5808:	60 e5       	ldi	r22, 0x50	; 80
    580a:	45 e2       	ldi	r20, 0x25	; 37
    580c:	22 e4       	ldi	r18, 0x42	; 66
    580e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(170,  80, 46, 66, 200);//n
    5812:	8a ea       	ldi	r24, 0xAA	; 170
    5814:	60 e5       	ldi	r22, 0x50	; 80
    5816:	4e e2       	ldi	r20, 0x2E	; 46
    5818:	22 e4       	ldi	r18, 0x42	; 66
    581a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	DrawPolarObjectFastC(190,  80, 36, 66, 200);//d
    581e:	8e eb       	ldi	r24, 0xBE	; 190
    5820:	60 e5       	ldi	r22, 0x50	; 80
    5822:	44 e2       	ldi	r20, 0x24	; 36
    5824:	22 e4       	ldi	r18, 0x42	; 66
    5826:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(200,  80, 47, 66, 200);//o
    582a:	88 ec       	ldi	r24, 0xC8	; 200
    582c:	60 e5       	ldi	r22, 0x50	; 80
    582e:	4f e2       	ldi	r20, 0x2F	; 47
    5830:	22 e4       	ldi	r18, 0x42	; 66
    5832:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(210,  80, 46, 66, 200);//n
    5836:	82 ed       	ldi	r24, 0xD2	; 210
    5838:	60 e5       	ldi	r22, 0x50	; 80
    583a:	4e e2       	ldi	r20, 0x2E	; 46
    583c:	22 e4       	ldi	r18, 0x42	; 66
    583e:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(220,  80, 37, 66, 200);//e
    5842:	8c ed       	ldi	r24, 0xDC	; 220
    5844:	60 e5       	ldi	r22, 0x50	; 80
    5846:	45 e2       	ldi	r20, 0x25	; 37
    5848:	22 e4       	ldi	r18, 0x42	; 66
    584a:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(230,  80, 28, 66, 200);//.
    584e:	86 ee       	ldi	r24, 0xE6	; 230
    5850:	60 e5       	ldi	r22, 0x50	; 80
    5852:	4c e1       	ldi	r20, 0x1C	; 28
    5854:	22 e4       	ldi	r18, 0x42	; 66
    5856:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	DrawPolarObjectFastC(230,  80, 28, 66, 200);//.
    585a:	86 ee       	ldi	r24, 0xE6	; 230
    585c:	60 e5       	ldi	r22, 0x50	; 80
    585e:	4c e1       	ldi	r20, 0x1C	; 28
    5860:	22 e4       	ldi	r18, 0x42	; 66
    5862:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
	//now get user input for ship type
	if(player1.ShipType == 0){
    5866:	80 91 ed 01 	lds	r24, 0x01ED
    586a:	88 23       	and	r24, r24
    586c:	29 f0       	breq	.+10     	; 0x5878 <ChoosePlayerShips+0x304>
		//choose player 1 first
		buttons = ReadJoypad(0);


	}else if(player2.ShipType == 0){
    586e:	80 91 fc 01 	lds	r24, 0x01FC
    5872:	88 23       	and	r24, r24
    5874:	21 f4       	brne	.+8      	; 0x587e <ChoosePlayerShips+0x30a>
		buttons = ReadJoypad(1);
    5876:	81 e0       	ldi	r24, 0x01	; 1
    5878:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <ReadJoypad>
    587c:	f8 2e       	mov	r15, r24
	}

	if(buttons & BTN_UP){
    587e:	f4 fe       	sbrs	r15, 4
    5880:	04 c0       	rjmp	.+8      	; 0x588a <ChoosePlayerShips+0x316>
		currentObj++;
    5882:	1f 5f       	subi	r17, 0xFF	; 255
		if(currentObj > OBJ_LAST_SHIP){
    5884:	12 34       	cpi	r17, 0x42	; 66
    5886:	10 f1       	brcs	.+68     	; 0x58cc <ChoosePlayerShips+0x358>
    5888:	14 c0       	rjmp	.+40     	; 0x58b2 <ChoosePlayerShips+0x33e>
			currentObj = OBJ_FIRST_SHIP;
		}
	}else if(buttons & BTN_DOWN){
    588a:	f5 fe       	sbrs	r15, 5
    588c:	05 c0       	rjmp	.+10     	; 0x5898 <ChoosePlayerShips+0x324>
		currentObj--;
    588e:	11 50       	subi	r17, 0x01	; 1
		if(currentObj < OBJ_FIRST_SHIP){
    5890:	1d 33       	cpi	r17, 0x3D	; 61
    5892:	e0 f4       	brcc	.+56     	; 0x58cc <ChoosePlayerShips+0x358>
    5894:	11 e4       	ldi	r17, 0x41	; 65
    5896:	1a c0       	rjmp	.+52     	; 0x58cc <ChoosePlayerShips+0x358>
			currentObj = OBJ_LAST_SHIP;
		}
	}else if(buttons & BTN_SELECT){
    5898:	f2 fe       	sbrs	r15, 2
    589a:	18 c0       	rjmp	.+48     	; 0x58cc <ChoosePlayerShips+0x358>
		//player has made a selection
		if(player1.ShipType == 0){
    589c:	80 91 ed 01 	lds	r24, 0x01ED
    58a0:	88 23       	and	r24, r24
    58a2:	49 f4       	brne	.+18     	; 0x58b6 <ChoosePlayerShips+0x342>
			player1.ShipType = currentObj;
    58a4:	10 93 ed 01 	sts	0x01ED, r17
			player1.Ship->Type = currentObj;
    58a8:	e0 91 df 01 	lds	r30, 0x01DF
    58ac:	f0 91 e0 01 	lds	r31, 0x01E0
    58b0:	10 83       	st	Z, r17
    58b2:	1d e3       	ldi	r17, 0x3D	; 61
    58b4:	0b c0       	rjmp	.+22     	; 0x58cc <ChoosePlayerShips+0x358>
			currentObj = OBJ_FIRST_SHIP;
		}else if(player2.ShipType == 0){
    58b6:	80 91 fc 01 	lds	r24, 0x01FC
    58ba:	88 23       	and	r24, r24
    58bc:	39 f4       	brne	.+14     	; 0x58cc <ChoosePlayerShips+0x358>
			player2.ShipType = currentObj;
    58be:	10 93 fc 01 	sts	0x01FC, r17
			player2.Ship->Type = currentObj;
    58c2:	e0 91 ee 01 	lds	r30, 0x01EE
    58c6:	f0 91 ef 01 	lds	r31, 0x01EF
    58ca:	10 83       	st	Z, r17
		}
	}
	DrawPolarObjectFastC(100,  150, currentObj, 66, 255);
    58cc:	84 e6       	ldi	r24, 0x64	; 100
    58ce:	66 e9       	ldi	r22, 0x96	; 150
    58d0:	41 2f       	mov	r20, r17
    58d2:	22 e4       	ldi	r18, 0x42	; 66
    58d4:	0f ef       	ldi	r16, 0xFF	; 255
    58d6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>

	while(!GetVsyncFlag());
    58da:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GetVsyncFlag>
    58de:	88 23       	and	r24, r24
    58e0:	e1 f3       	breq	.-8      	; 0x58da <ChoosePlayerShips+0x366>
		ClearVsyncFlag();
    58e2:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <ClearVsyncFlag>
void ChoosePlayerShips(void){
	//have players select their ship
	uint16_t buttons;
	u8 currentObj = OBJ_FIRST_SHIP;

	while(player1.ShipType == 0 || player2.ShipType == 0){
    58e6:	80 91 ed 01 	lds	r24, 0x01ED
    58ea:	88 23       	and	r24, r24
    58ec:	09 f4       	brne	.+2      	; 0x58f0 <ChoosePlayerShips+0x37c>
    58ee:	47 ce       	rjmp	.-882    	; 0x557e <ChoosePlayerShips+0xa>
    58f0:	80 91 fc 01 	lds	r24, 0x01FC
    58f4:	88 23       	and	r24, r24
    58f6:	09 f4       	brne	.+2      	; 0x58fa <ChoosePlayerShips+0x386>
    58f8:	42 ce       	rjmp	.-892    	; 0x557e <ChoosePlayerShips+0xa>
	while(!GetVsyncFlag());
		ClearVsyncFlag();
	}


}
    58fa:	1f 91       	pop	r17
    58fc:	0f 91       	pop	r16
    58fe:	ff 90       	pop	r15
    5900:	08 95       	ret

00005902 <main>:

int main(){
    5902:	2f 92       	push	r2
    5904:	3f 92       	push	r3
    5906:	4f 92       	push	r4
    5908:	5f 92       	push	r5
    590a:	7f 92       	push	r7
    590c:	8f 92       	push	r8
    590e:	9f 92       	push	r9
    5910:	af 92       	push	r10
    5912:	bf 92       	push	r11
    5914:	cf 92       	push	r12
    5916:	df 92       	push	r13
    5918:	ef 92       	push	r14
    591a:	ff 92       	push	r15
    591c:	0f 93       	push	r16
    591e:	1f 93       	push	r17
    5920:	cf 93       	push	r28
    5922:	df 93       	push	r29

srand(123);
    5924:	8b e7       	ldi	r24, 0x7B	; 123
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <srand>

InitMusicPlayer(patches);
    592c:	89 ef       	ldi	r24, 0xF9	; 249
    592e:	93 e0       	ldi	r25, 0x03	; 3
    5930:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <InitMusicPlayer>

SetHsyncCallback(&DefaultCallback);
    5934:	8e e8       	ldi	r24, 0x8E	; 142
    5936:	95 e1       	ldi	r25, 0x15	; 21
    5938:	0e 94 89 15 	call	0x2b12	; 0x2b12 <SetHsyncCallback>

gameState = title;
    593c:	10 92 de 01 	sts	0x01DE, r1
    5940:	10 92 dd 01 	sts	0x01DD, r1

SetRenderingParameters((21), (224));
    5944:	85 e1       	ldi	r24, 0x15	; 21
    5946:	60 ee       	ldi	r22, 0xE0	; 224
    5948:	0e 94 05 1c 	call	0x380a	; 0x380a <SetRenderingParameters>
    594c:	c0 e0       	ldi	r28, 0x00	; 0
    594e:	d0 e0       	ldi	r29, 0x00	; 0
    5950:	ee 24       	eor	r14, r14
    5952:	ff 24       	eor	r15, r15
    5954:	10 e0       	ldi	r17, 0x00	; 0
    5956:	77 24       	eor	r7, r7
    5958:	00 e0       	ldi	r16, 0x00	; 0
    595a:	88 24       	eor	r8, r8
    595c:	99 24       	eor	r9, r9
								gameOverTimer = 240;
								gameState = gameOver;
								round = 0;
							}else{
								roundBeginStartTimer = 240;
								gameState = beginRound;
    595e:	52 e0       	ldi	r21, 0x02	; 2
    5960:	45 2e       	mov	r4, r21
    5962:	51 2c       	mov	r5, r1
	switch (gameState) {
					case title:
						if ((btnPressedP1&BTN_START) || (btnPressedP2&BTN_START)) {


							gameState = chooseShip;
    5964:	47 e0       	ldi	r20, 0x07	; 7
    5966:	24 2e       	mov	r2, r20
    5968:	31 2c       	mov	r3, r1
    596a:	02 c0       	rjmp	.+4      	; 0x5970 <main+0x6e>

SetHsyncCallback(&DefaultCallback);

gameState = title;

SetRenderingParameters((21), (224));
    596c:	76 01       	movw	r14, r12
    596e:	e5 01       	movw	r28, r10
while(1){

	//HandleSync();

	//player 1 buttons
				btnHeldP1 = ReadJoypad(0);
    5970:	80 e0       	ldi	r24, 0x00	; 0
    5972:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <ReadJoypad>
    5976:	5c 01       	movw	r10, r24
				btnPressedP1 = btnHeldP1&(btnHeldP1^btnPrevP1);
	        	btnReleasedP1 = btnPrevP1&(btnHeldP1^btnPrevP1);
				btnPrevP1 = btnHeldP1;

				//player 2 buttons
				btnHeldP2 = ReadJoypad(1);
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <ReadJoypad>
    597e:	6c 01       	movw	r12, r24
//
//
//	while(!GetVsyncFlag());
//	ClearVsyncFlag();

	switch (gameState) {
    5980:	80 91 dd 01 	lds	r24, 0x01DD
    5984:	90 91 de 01 	lds	r25, 0x01DE
    5988:	83 30       	cpi	r24, 0x03	; 3
    598a:	91 05       	cpc	r25, r1
    598c:	09 f4       	brne	.+2      	; 0x5990 <main+0x8e>
    598e:	55 c0       	rjmp	.+170    	; 0x5a3a <main+0x138>
    5990:	84 30       	cpi	r24, 0x04	; 4
    5992:	91 05       	cpc	r25, r1
    5994:	38 f4       	brcc	.+14     	; 0x59a4 <main+0xa2>
    5996:	81 30       	cpi	r24, 0x01	; 1
    5998:	91 05       	cpc	r25, r1
    599a:	09 f4       	brne	.+2      	; 0x599e <main+0x9c>
    599c:	6c c0       	rjmp	.+216    	; 0x5a76 <main+0x174>
    599e:	02 97       	sbiw	r24, 0x02	; 2
    59a0:	e8 f5       	brcc	.+122    	; 0x5a1c <main+0x11a>
    59a2:	0a c0       	rjmp	.+20     	; 0x59b8 <main+0xb6>
    59a4:	86 30       	cpi	r24, 0x06	; 6
    59a6:	91 05       	cpc	r25, r1
    59a8:	09 f4       	brne	.+2      	; 0x59ac <main+0xaa>
    59aa:	a8 c0       	rjmp	.+336    	; 0x5afc <main+0x1fa>
    59ac:	87 30       	cpi	r24, 0x07	; 7
    59ae:	91 05       	cpc	r25, r1
    59b0:	21 f1       	breq	.+72     	; 0x59fa <main+0xf8>
    59b2:	04 97       	sbiw	r24, 0x04	; 4
    59b4:	d9 f6       	brne	.-74     	; 0x596c <main+0x6a>
    59b6:	9e c0       	rjmp	.+316    	; 0x5af4 <main+0x1f2>
					case title:
						if ((btnPressedP1&BTN_START) || (btnPressedP2&BTN_START)) {
    59b8:	c7 01       	movw	r24, r14
    59ba:	80 95       	com	r24
    59bc:	90 95       	com	r25
    59be:	8c 21       	and	r24, r12
    59c0:	9d 21       	and	r25, r13
    59c2:	c0 95       	com	r28
    59c4:	d0 95       	com	r29
    59c6:	ca 21       	and	r28, r10
    59c8:	db 21       	and	r29, r11
    59ca:	8c 2b       	or	r24, r28
    59cc:	9d 2b       	or	r25, r29
    59ce:	83 ff       	sbrs	r24, 3
    59d0:	09 c0       	rjmp	.+18     	; 0x59e4 <main+0xe2>


							gameState = chooseShip;
    59d2:	30 92 de 01 	sts	0x01DE, r3
    59d6:	20 92 dd 01 	sts	0x01DD, r2
							InitRound(round);
    59da:	81 2f       	mov	r24, r17
    59dc:	0e 94 00 27 	call	0x4e00	; 0x4e00 <InitRound>
							round++;
    59e0:	1f 5f       	subi	r17, 0xFF	; 255
    59e2:	c4 cf       	rjmp	.-120    	; 0x596c <main+0x6a>
						} else {
							HandleSync();
    59e4:	0e 94 ac 2a 	call	0x5558	; 0x5558 <HandleSync>
								//if (--flashStartTimer == 0) {
									TitleScreen();
    59e8:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <TitleScreen>
									while(!GetVsyncFlag()); //may have to remove later...
    59ec:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GetVsyncFlag>
    59f0:	88 23       	and	r24, r24
    59f2:	e1 f3       	breq	.-8      	; 0x59ec <main+0xea>
									ClearVsyncFlag();//may have to remove later...
    59f4:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <ClearVsyncFlag>
    59f8:	b9 cf       	rjmp	.-142    	; 0x596c <main+0x6a>

					case chooseShip:
						//have players choose their ships
						//HandleSync();

						ChoosePlayerShips();
    59fa:	0e 94 ba 2a 	call	0x5574	; 0x5574 <ChoosePlayerShips>

						if(player1.ShipType != 0 && player2.ShipType != 0){
    59fe:	80 91 ed 01 	lds	r24, 0x01ED
    5a02:	88 23       	and	r24, r24
    5a04:	09 f4       	brne	.+2      	; 0x5a08 <main+0x106>
    5a06:	b2 cf       	rjmp	.-156    	; 0x596c <main+0x6a>
    5a08:	80 91 fc 01 	lds	r24, 0x01FC
    5a0c:	88 23       	and	r24, r24
    5a0e:	09 f4       	brne	.+2      	; 0x5a12 <main+0x110>
    5a10:	ad cf       	rjmp	.-166    	; 0x596c <main+0x6a>
							roundBeginStartTimer = 240;

							gameState = beginRound;
    5a12:	50 92 de 01 	sts	0x01DE, r5
    5a16:	40 92 dd 01 	sts	0x01DD, r4
    5a1a:	25 c0       	rjmp	.+74     	; 0x5a66 <main+0x164>

						}
					break;

					case beginRound:
						if(--roundBeginStartTimer == 0){
    5a1c:	01 50       	subi	r16, 0x01	; 1
    5a1e:	39 f4       	brne	.+14     	; 0x5a2e <main+0x12c>
							//play round

							gameState = playRound;
    5a20:	81 e0       	ldi	r24, 0x01	; 1
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	90 93 de 01 	sts	0x01DE, r25
    5a28:	80 93 dd 01 	sts	0x01DD, r24
    5a2c:	9f cf       	rjmp	.-194    	; 0x596c <main+0x6a>
						}else{
							HandleSync();
    5a2e:	0e 94 ac 2a 	call	0x5558	; 0x5558 <HandleSync>
							//play message
							playRoundBeginMessage(round);
    5a32:	81 2f       	mov	r24, r17
    5a34:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <playRoundBeginMessage>
    5a38:	99 cf       	rjmp	.-206    	; 0x596c <main+0x6a>
						break;

					case endRound:
						//show winner of round
						//start a timer to show winner of round
						if(--roundEndStartTimer == 0){
    5a3a:	8a 94       	dec	r8
    5a3c:	b1 f4       	brne	.+44     	; 0x5a6a <main+0x168>
							//play round
							//check if last round over
							if(round == MAX_ROUNDS){
    5a3e:	13 30       	cpi	r17, 0x03	; 3
    5a40:	51 f4       	brne	.+20     	; 0x5a56 <main+0x154>

								gameOverTimer = 240;
								gameState = gameOver;
    5a42:	86 e0       	ldi	r24, 0x06	; 6
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	90 93 de 01 	sts	0x01DE, r25
    5a4a:	80 93 dd 01 	sts	0x01DD, r24
    5a4e:	10 e0       	ldi	r17, 0x00	; 0
    5a50:	30 ef       	ldi	r19, 0xF0	; 240
    5a52:	93 2e       	mov	r9, r19
    5a54:	8b cf       	rjmp	.-234    	; 0x596c <main+0x6a>
								round = 0;
							}else{
								roundBeginStartTimer = 240;
								gameState = beginRound;
    5a56:	50 92 de 01 	sts	0x01DE, r5
    5a5a:	40 92 dd 01 	sts	0x01DD, r4
								InitRound(round);
    5a5e:	81 2f       	mov	r24, r17
    5a60:	0e 94 00 27 	call	0x4e00	; 0x4e00 <InitRound>
								round++;
    5a64:	1f 5f       	subi	r17, 0xFF	; 255
    5a66:	00 ef       	ldi	r16, 0xF0	; 240
    5a68:	81 cf       	rjmp	.-254    	; 0x596c <main+0x6a>
							}
						}else{
							HandleSync();
    5a6a:	0e 94 ac 2a 	call	0x5558	; 0x5558 <HandleSync>
							//play message
							playRoundEndMessage(round);
    5a6e:	81 2f       	mov	r24, r17
    5a70:	0e 94 1d 29 	call	0x523a	; 0x523a <playRoundEndMessage>
    5a74:	7b cf       	rjmp	.-266    	; 0x596c <main+0x6a>

					break;

					case playRound:

						if (--roundTimer <= 0) {
    5a76:	80 91 5c 01 	lds	r24, 0x015C
    5a7a:	90 91 5d 01 	lds	r25, 0x015D
    5a7e:	01 97       	sbiw	r24, 0x01	; 1
    5a80:	90 93 5d 01 	sts	0x015D, r25
    5a84:	80 93 5c 01 	sts	0x015C, r24
    5a88:	89 2b       	or	r24, r25
    5a8a:	41 f4       	brne	.+16     	; 0x5a9c <main+0x19a>
							roundEndStartTimer = 240;
							gameState = endRound;
    5a8c:	83 e0       	ldi	r24, 0x03	; 3
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	90 93 de 01 	sts	0x01DE, r25
    5a94:	80 93 dd 01 	sts	0x01DD, r24
    5a98:	20 ef       	ldi	r18, 0xF0	; 240
    5a9a:	82 2e       	mov	r8, r18

						}

						HandleSync();
    5a9c:	0e 94 ac 2a 	call	0x5558	; 0x5558 <HandleSync>

						DrawObjects();
    5aa0:	0e 94 57 2e 	call	0x5cae	; 0x5cae <DrawObjects>

						//draw field of play
						DrawPlayField();
    5aa4:	0e 94 47 28 	call	0x508e	; 0x508e <DrawPlayField>


							while(!GetVsyncFlag());
    5aa8:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GetVsyncFlag>
    5aac:	88 23       	and	r24, r24
    5aae:	e1 f3       	breq	.-8      	; 0x5aa8 <main+0x1a6>
							ClearVsyncFlag();
    5ab0:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <ClearVsyncFlag>

						if (player1.State == playerDead || player2.State == playerDead) {
    5ab4:	80 91 e1 01 	lds	r24, 0x01E1
    5ab8:	90 91 e2 01 	lds	r25, 0x01E2
    5abc:	01 97       	sbiw	r24, 0x01	; 1
    5abe:	31 f0       	breq	.+12     	; 0x5acc <main+0x1ca>
    5ac0:	80 91 f0 01 	lds	r24, 0x01F0
    5ac4:	90 91 f1 01 	lds	r25, 0x01F1
    5ac8:	01 97       	sbiw	r24, 0x01	; 1
    5aca:	19 f4       	brne	.+6      	; 0x5ad2 <main+0x1d0>
							InitPlayers();
    5acc:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <InitPlayers>
    5ad0:	4d cf       	rjmp	.-358    	; 0x596c <main+0x6a>
							break;
						}


						//eventually we'll need to check player life but this is for testing
						ProcessInput(&player1, btnHeldP1, 1);
    5ad2:	8f ed       	ldi	r24, 0xDF	; 223
    5ad4:	91 e0       	ldi	r25, 0x01	; 1
    5ad6:	b5 01       	movw	r22, r10
    5ad8:	41 e0       	ldi	r20, 0x01	; 1
    5ada:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <ProcessInput>
						//player1.State = playerAlive;

						 ProcessInput(&player2, btnHeldP2, 2);
    5ade:	8e ee       	ldi	r24, 0xEE	; 238
    5ae0:	91 e0       	ldi	r25, 0x01	; 1
    5ae2:	b6 01       	movw	r22, r12
    5ae4:	42 e0       	ldi	r20, 0x02	; 2
    5ae6:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <ProcessInput>
						//player1.State = playerAlive;

						CollisionDetection();
    5aea:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <CollisionDetection>
						MoveObjects();
    5aee:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <MoveObjects>
    5af2:	3c cf       	rjmp	.-392    	; 0x596c <main+0x6a>
					break;

					case dead:
						// Ignore pause game while dead
						if (--playerDeadTimer == 0) {
    5af4:	7a 94       	dec	r7
    5af6:	09 f0       	breq	.+2      	; 0x5afa <main+0x1f8>
    5af8:	39 cf       	rjmp	.-398    	; 0x596c <main+0x6a>
    5afa:	02 c0       	rjmp	.+4      	; 0x5b00 <main+0x1fe>
					break;

					case gameOver:
						//show winner of game
						//show a timer to show winner of game
						if(--gameOverTimer == 0){
    5afc:	9a 94       	dec	r9
    5afe:	29 f4       	brne	.+10     	; 0x5b0a <main+0x208>

							gameState = title; //will change eventually
    5b00:	10 92 de 01 	sts	0x01DE, r1
    5b04:	10 92 dd 01 	sts	0x01DD, r1
    5b08:	31 cf       	rjmp	.-414    	; 0x596c <main+0x6a>
						}else{
							HandleSync();
    5b0a:	0e 94 ac 2a 	call	0x5558	; 0x5558 <HandleSync>
							//show game over message
							playGameOverMessage();
    5b0e:	0e 94 03 2a 	call	0x5406	; 0x5406 <playGameOverMessage>
    5b12:	2c cf       	rjmp	.-424    	; 0x596c <main+0x6a>

00005b14 <ProcessInput>:


}

}
void ProcessInput(player *p, uint16_t buttons, uint8_t owner) {
    5b14:	cf 92       	push	r12
    5b16:	df 92       	push	r13
    5b18:	ef 92       	push	r14
    5b1a:	ff 92       	push	r15
    5b1c:	0f 93       	push	r16
    5b1e:	1f 93       	push	r17
    5b20:	cf 93       	push	r28
    5b22:	df 93       	push	r29
    5b24:	ec 01       	movw	r28, r24
    5b26:	7b 01       	movw	r14, r22
    5b28:	c4 2e       	mov	r12, r20

uint8_t RandThrustAngle;



if(buttons & BTN_RIGHT) {
    5b2a:	67 ff       	sbrs	r22, 7
    5b2c:	05 c0       	rjmp	.+10     	; 0x5b38 <ProcessInput+0x24>
	p->Ship->T_Hi = p->Ship->T_Hi - 3;
    5b2e:	e8 81       	ld	r30, Y
    5b30:	f9 81       	ldd	r31, Y+1	; 0x01
    5b32:	86 81       	ldd	r24, Z+6	; 0x06
    5b34:	83 50       	subi	r24, 0x03	; 3
    5b36:	86 83       	std	Z+6, r24	; 0x06
}

if(buttons & BTN_LEFT)  {
    5b38:	e6 fe       	sbrs	r14, 6
    5b3a:	05 c0       	rjmp	.+10     	; 0x5b46 <ProcessInput+0x32>
	p->Ship->T_Hi = p->Ship->T_Hi + 3;
    5b3c:	e8 81       	ld	r30, Y
    5b3e:	f9 81       	ldd	r31, Y+1	; 0x01
    5b40:	86 81       	ldd	r24, Z+6	; 0x06
    5b42:	8d 5f       	subi	r24, 0xFD	; 253
    5b44:	86 83       	std	Z+6, r24	; 0x06
}

if((buttons & BTN_UP) || (buttons & BTN_B))    {
    5b46:	e4 fc       	sbrc	r14, 4
    5b48:	02 c0       	rjmp	.+4      	; 0x5b4e <ProcessInput+0x3a>
    5b4a:	e0 fe       	sbrs	r14, 0
    5b4c:	58 c0       	rjmp	.+176    	; 0x5bfe <ProcessInput+0xea>
	p->dXSub = p->dXSub + (SinFastC(p->Ship->T_Hi)<<2);
    5b4e:	0e 81       	ldd	r16, Y+6	; 0x06
    5b50:	1f 81       	ldd	r17, Y+7	; 0x07
    5b52:	e8 81       	ld	r30, Y
    5b54:	f9 81       	ldd	r31, Y+1	; 0x01
    5b56:	86 81       	ldd	r24, Z+6	; 0x06
    5b58:	0e 94 3c 1b 	call	0x3678	; 0x3678 <SinFastC>
    5b5c:	99 27       	eor	r25, r25
    5b5e:	87 fd       	sbrc	r24, 7
    5b60:	90 95       	com	r25
    5b62:	88 0f       	add	r24, r24
    5b64:	99 1f       	adc	r25, r25
    5b66:	88 0f       	add	r24, r24
    5b68:	99 1f       	adc	r25, r25
    5b6a:	80 0f       	add	r24, r16
    5b6c:	91 1f       	adc	r25, r17
    5b6e:	9f 83       	std	Y+7, r25	; 0x07
    5b70:	8e 83       	std	Y+6, r24	; 0x06
	p->dYSub = p->dYSub +  + (CosFastC(p->Ship->T_Hi)<<2);
    5b72:	08 85       	ldd	r16, Y+8	; 0x08
    5b74:	19 85       	ldd	r17, Y+9	; 0x09
    5b76:	e8 81       	ld	r30, Y
    5b78:	f9 81       	ldd	r31, Y+1	; 0x01
    5b7a:	86 81       	ldd	r24, Z+6	; 0x06
    5b7c:	0e 94 3b 1b 	call	0x3676	; 0x3676 <CosFastC>
    5b80:	99 27       	eor	r25, r25
    5b82:	87 fd       	sbrc	r24, 7
    5b84:	90 95       	com	r25
    5b86:	88 0f       	add	r24, r24
    5b88:	99 1f       	adc	r25, r25
    5b8a:	88 0f       	add	r24, r24
    5b8c:	99 1f       	adc	r25, r25
    5b8e:	80 0f       	add	r24, r16
    5b90:	91 1f       	adc	r25, r17
    5b92:	99 87       	std	Y+9, r25	; 0x09
    5b94:	88 87       	std	Y+8, r24	; 0x08

	if(p->dXSub >  0x3600) p->dXSub =  0x3600;
    5b96:	8e 81       	ldd	r24, Y+6	; 0x06
    5b98:	9f 81       	ldd	r25, Y+7	; 0x07
    5b9a:	81 50       	subi	r24, 0x01	; 1
    5b9c:	96 43       	sbci	r25, 0x36	; 54
    5b9e:	24 f0       	brlt	.+8      	; 0x5ba8 <ProcessInput+0x94>
    5ba0:	80 e0       	ldi	r24, 0x00	; 0
    5ba2:	96 e3       	ldi	r25, 0x36	; 54
    5ba4:	9f 83       	std	Y+7, r25	; 0x07
    5ba6:	8e 83       	std	Y+6, r24	; 0x06
	if(p->dXSub < -0x3600) p->dXSub = -0x3600;
    5ba8:	8e 81       	ldd	r24, Y+6	; 0x06
    5baa:	9f 81       	ldd	r25, Y+7	; 0x07
    5bac:	80 50       	subi	r24, 0x00	; 0
    5bae:	9a 4c       	sbci	r25, 0xCA	; 202
    5bb0:	24 f4       	brge	.+8      	; 0x5bba <ProcessInput+0xa6>
    5bb2:	80 e0       	ldi	r24, 0x00	; 0
    5bb4:	9a ec       	ldi	r25, 0xCA	; 202
    5bb6:	9f 83       	std	Y+7, r25	; 0x07
    5bb8:	8e 83       	std	Y+6, r24	; 0x06

	if(p->dYSub >  0x3600) p->dYSub =  0x3600;
    5bba:	88 85       	ldd	r24, Y+8	; 0x08
    5bbc:	99 85       	ldd	r25, Y+9	; 0x09
    5bbe:	81 50       	subi	r24, 0x01	; 1
    5bc0:	96 43       	sbci	r25, 0x36	; 54
    5bc2:	24 f0       	brlt	.+8      	; 0x5bcc <ProcessInput+0xb8>
    5bc4:	80 e0       	ldi	r24, 0x00	; 0
    5bc6:	96 e3       	ldi	r25, 0x36	; 54
    5bc8:	99 87       	std	Y+9, r25	; 0x09
    5bca:	88 87       	std	Y+8, r24	; 0x08
	if(p->dYSub < -0x3600) p->dYSub = -0x3600;
    5bcc:	88 85       	ldd	r24, Y+8	; 0x08
    5bce:	99 85       	ldd	r25, Y+9	; 0x09
    5bd0:	80 50       	subi	r24, 0x00	; 0
    5bd2:	9a 4c       	sbci	r25, 0xCA	; 202
    5bd4:	24 f4       	brge	.+8      	; 0x5bde <ProcessInput+0xca>
    5bd6:	80 e0       	ldi	r24, 0x00	; 0
    5bd8:	9a ec       	ldi	r25, 0xCA	; 202
    5bda:	99 87       	std	Y+9, r25	; 0x09
    5bdc:	88 87       	std	Y+8, r24	; 0x08


	p->Ship->dX = p->dXSub>>8;
    5bde:	e8 81       	ld	r30, Y
    5be0:	f9 81       	ldd	r31, Y+1	; 0x01
    5be2:	8e 81       	ldd	r24, Y+6	; 0x06
    5be4:	9f 81       	ldd	r25, Y+7	; 0x07
    5be6:	89 2f       	mov	r24, r25
    5be8:	99 0f       	add	r25, r25
    5bea:	99 0b       	sbc	r25, r25
    5bec:	80 87       	std	Z+8, r24	; 0x08
	p->Ship->dY = p->dYSub>>8;
    5bee:	e8 81       	ld	r30, Y
    5bf0:	f9 81       	ldd	r31, Y+1	; 0x01
    5bf2:	88 85       	ldd	r24, Y+8	; 0x08
    5bf4:	99 85       	ldd	r25, Y+9	; 0x09
    5bf6:	89 2f       	mov	r24, r25
    5bf8:	99 0f       	add	r25, r25
    5bfa:	99 0b       	sbc	r25, r25
    5bfc:	81 87       	std	Z+9, r24	; 0x09
//			p->Ship->Y_Hi + CosMulFastC((p->Ship->T_Hi + 128),10),
//			p->Ship->dX   + SinMulFastC((p->Ship->T_Hi + RandThrustAngle),15),
//			p->Ship->dY   + CosMulFastC((p->Ship->T_Hi + RandThrustAngle),15));
}

if((buttons & BTN_A) && (BulletCountDown == 0))    {
    5bfe:	f0 fe       	sbrs	r15, 0
    5c00:	2c c0       	rjmp	.+88     	; 0x5c5a <ProcessInput+0x146>
    5c02:	80 91 5e 01 	lds	r24, 0x015E
    5c06:	88 23       	and	r24, r24
    5c08:	41 f5       	brne	.+80     	; 0x5c5a <ProcessInput+0x146>
	//play nifty bullet shooting sound
	TriggerFx(SFX_PLAYER_SHOOT, SFX_VOL_PLAYER_SHOOT, true);
    5c0a:	60 ef       	ldi	r22, 0xF0	; 240
    5c0c:	41 e0       	ldi	r20, 0x01	; 1
    5c0e:	0e 94 11 20 	call	0x4022	; 0x4022 <TriggerFx>
	TriggerNote(1,SFX_PLAYER_SHOOT, 70, SFX_VOL_PLAYER_SHOOT);
    5c12:	81 e0       	ldi	r24, 0x01	; 1
    5c14:	60 e0       	ldi	r22, 0x00	; 0
    5c16:	46 e4       	ldi	r20, 0x46	; 70
    5c18:	20 ef       	ldi	r18, 0xF0	; 240
    5c1a:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <TriggerNote>



	NewBullet(p->Ship->X_Hi, p->Ship->Y_Hi, p->Ship->dX + SinMulFastC(p->Ship->T_Hi,64), p->Ship->dY + CosMulFastC(p->Ship->T_Hi,64), 80, owner);
    5c1e:	e8 81       	ld	r30, Y
    5c20:	f9 81       	ldd	r31, Y+1	; 0x01
    5c22:	e2 80       	ldd	r14, Z+2	; 0x02
    5c24:	d4 80       	ldd	r13, Z+4	; 0x04
    5c26:	00 85       	ldd	r16, Z+8	; 0x08
    5c28:	86 81       	ldd	r24, Z+6	; 0x06
    5c2a:	60 e4       	ldi	r22, 0x40	; 64
    5c2c:	0e 94 32 1b 	call	0x3664	; 0x3664 <SinMulFastC>
    5c30:	f8 2e       	mov	r15, r24
    5c32:	e8 81       	ld	r30, Y
    5c34:	f9 81       	ldd	r31, Y+1	; 0x01
    5c36:	11 85       	ldd	r17, Z+9	; 0x09
    5c38:	86 81       	ldd	r24, Z+6	; 0x06
    5c3a:	60 e4       	ldi	r22, 0x40	; 64
    5c3c:	0e 94 31 1b 	call	0x3662	; 0x3662 <CosMulFastC>
    5c40:	0f 0d       	add	r16, r15
    5c42:	18 0f       	add	r17, r24
    5c44:	8e 2d       	mov	r24, r14
    5c46:	6d 2d       	mov	r22, r13
    5c48:	40 2f       	mov	r20, r16
    5c4a:	21 2f       	mov	r18, r17
    5c4c:	00 e5       	ldi	r16, 0x50	; 80
    5c4e:	ec 2c       	mov	r14, r12
    5c50:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <NewBullet>
	BulletCountDown = 10;
    5c54:	8a e0       	ldi	r24, 0x0A	; 10
    5c56:	80 93 5e 01 	sts	0x015E, r24
}

if(BulletCountDown != 0) {
    5c5a:	80 91 5e 01 	lds	r24, 0x015E
    5c5e:	88 23       	and	r24, r24
    5c60:	19 f0       	breq	.+6      	; 0x5c68 <ProcessInput+0x154>
	BulletCountDown--;
    5c62:	81 50       	subi	r24, 0x01	; 1
    5c64:	80 93 5e 01 	sts	0x015E, r24
}

}
    5c68:	df 91       	pop	r29
    5c6a:	cf 91       	pop	r28
    5c6c:	1f 91       	pop	r17
    5c6e:	0f 91       	pop	r16
    5c70:	ff 90       	pop	r15
    5c72:	ef 90       	pop	r14
    5c74:	df 90       	pop	r13
    5c76:	cf 90       	pop	r12
    5c78:	08 95       	ret

00005c7a <ClearObjectStore>:

SetRenderingParameters((21), (224));
}

void ClearObjectStore(void)
{
    5c7a:	e0 e0       	ldi	r30, 0x00	; 0
    5c7c:	f2 e0       	ldi	r31, 0x02	; 2
uint8_t i;
ObjectDescStruct *Current;

for(i = 0; i < MAX_OBJS; i++) {
	Current = (ObjectDescStruct*)&ObjectStore[i];
	Current->Type = 0xFF;
    5c7e:	8f ef       	ldi	r24, 0xFF	; 255
    5c80:	80 83       	st	Z, r24
    5c82:	3c 96       	adiw	r30, 0x0c	; 12
void ClearObjectStore(void)
{
uint8_t i;
ObjectDescStruct *Current;

for(i = 0; i < MAX_OBJS; i++) {
    5c84:	93 e0       	ldi	r25, 0x03	; 3
    5c86:	e8 36       	cpi	r30, 0x68	; 104
    5c88:	f9 07       	cpc	r31, r25
    5c8a:	d1 f7       	brne	.-12     	; 0x5c80 <ClearObjectStore+0x6>
	Current = (ObjectDescStruct*)&ObjectStore[i];
	Current->Type = 0xFF;
}
}
    5c8c:	08 95       	ret

00005c8e <GetFreeObject>:

uint8_t GetFreeObject(void)
{
    5c8e:	e0 e0       	ldi	r30, 0x00	; 0
    5c90:	f2 e0       	ldi	r31, 0x02	; 2
    5c92:	80 e0       	ldi	r24, 0x00	; 0
    5c94:	2f ef       	ldi	r18, 0xFF	; 255

ObjectDescStruct *Current;

do {
	Current = (ObjectDescStruct*)&ObjectStore[i];
	if (Current->Type == 0xFF) {
    5c96:	90 81       	ld	r25, Z
    5c98:	9f 3f       	cpi	r25, 0xFF	; 255
    5c9a:	41 f0       	breq	.+16     	; 0x5cac <GetFreeObject+0x1e>
		return(i);
	}
	if (Current->Type == OBJ_PARTICLE) {
    5c9c:	9e 30       	cpi	r25, 0x0E	; 14
    5c9e:	09 f4       	brne	.+2      	; 0x5ca2 <GetFreeObject+0x14>
    5ca0:	28 2f       	mov	r18, r24
		Particle = i;
	}
	i++;
    5ca2:	8f 5f       	subi	r24, 0xFF	; 255
    5ca4:	3c 96       	adiw	r30, 0x0c	; 12
} while (i<MAX_OBJS);
    5ca6:	8e 31       	cpi	r24, 0x1E	; 30
    5ca8:	b1 f7       	brne	.-20     	; 0x5c96 <GetFreeObject+0x8>
    5caa:	82 2f       	mov	r24, r18

return(Particle);
}
    5cac:	08 95       	ret

00005cae <DrawObjects>:

void DrawObjects(void) {
    5cae:	0f 93       	push	r16
    5cb0:	cf 93       	push	r28
    5cb2:	df 93       	push	r29
    5cb4:	c0 e0       	ldi	r28, 0x00	; 0
    5cb6:	d2 e0       	ldi	r29, 0x02	; 2
uint8_t i;
ObjectDescStruct *Current;

for(i = 0; i < MAX_OBJS; i++) {
	Current = (ObjectDescStruct*)&ObjectStore[i];
	if(Current->Type != 0xFF) {
    5cb8:	48 81       	ld	r20, Y
    5cba:	4f 3f       	cpi	r20, 0xFF	; 255
    5cbc:	31 f0       	breq	.+12     	; 0x5cca <DrawObjects+0x1c>
		DrawPolarObjectFastC(Current->X_Hi,  Current->Y_Hi, Current->Type, Current->T_Hi, Current->Scale);
    5cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    5cc0:	6c 81       	ldd	r22, Y+4	; 0x04
    5cc2:	2e 81       	ldd	r18, Y+6	; 0x06
    5cc4:	0f 81       	ldd	r16, Y+7	; 0x07
    5cc6:	0e 94 84 1b 	call	0x3708	; 0x3708 <DrawPolarObjectFastC>
    5cca:	2c 96       	adiw	r28, 0x0c	; 12

void DrawObjects(void) {
uint8_t i;
ObjectDescStruct *Current;

for(i = 0; i < MAX_OBJS; i++) {
    5ccc:	83 e0       	ldi	r24, 0x03	; 3
    5cce:	c8 36       	cpi	r28, 0x68	; 104
    5cd0:	d8 07       	cpc	r29, r24
    5cd2:	91 f7       	brne	.-28     	; 0x5cb8 <DrawObjects+0xa>
	Current = (ObjectDescStruct*)&ObjectStore[i];
	if(Current->Type != 0xFF) {
		DrawPolarObjectFastC(Current->X_Hi,  Current->Y_Hi, Current->Type, Current->T_Hi, Current->Scale);
	}
}
}
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	0f 91       	pop	r16
    5cda:	08 95       	ret

00005cdc <MoveObjects>:


void MoveObjects() {
    5cdc:	e0 e0       	ldi	r30, 0x00	; 0
    5cde:	f2 e0       	ldi	r31, 0x02	; 2
		}

		if(Current->Life != 0xFF) {
			Current->Life--;
			if(Current->Life == 0) {
				Current->Type = 0xFF;
    5ce0:	7f ef       	ldi	r23, 0xFF	; 255

		if((Current->Y_Hi < 30) && (Current->dY) < 0) Current->Y_Hi = 223;  //lower bound of the screen
		if((Current->Y_Hi < 30) && (Current->dY) > 0) Current->Y_Hi = 30;//lower bound of the screen

		if((Current->Y_Hi > 223) && (Current->dY) > 0) Current->Y_Hi = 30;  //upper bound of the screen
		if((Current->Y_Hi > 223) && (Current->dY) < 0) Current->Y_Hi = 223;//upper bound of the screen
    5ce2:	6f ed       	ldi	r22, 0xDF	; 223
//		if((Current->Y_Hi > 223) && (Current->dY) < 0) Current->Y_Hi = 223;

		if((Current->Y_Hi < 30) && (Current->dY) < 0) Current->Y_Hi = 223;  //lower bound of the screen
		if((Current->Y_Hi < 30) && (Current->dY) > 0) Current->Y_Hi = 30;//lower bound of the screen

		if((Current->Y_Hi > 223) && (Current->dY) > 0) Current->Y_Hi = 30;  //upper bound of the screen
    5ce4:	5e e1       	ldi	r21, 0x1E	; 30
uint8_t i;
ObjectDescStruct *Current;

for(i = 0; i < MAX_OBJS; i++) {
	Current = (ObjectDescStruct*)&ObjectStore[i];
	if(Current->Type != 0xFF) {
    5ce6:	80 81       	ld	r24, Z
    5ce8:	8f 3f       	cpi	r24, 0xFF	; 255
    5cea:	09 f4       	brne	.+2      	; 0x5cee <MoveObjects+0x12>
    5cec:	57 c0       	rjmp	.+174    	; 0x5d9c <MoveObjects+0xc0>
		Current->X16 = Current->X16 + ((Current->dX)<<4);
    5cee:	20 85       	ldd	r18, Z+8	; 0x08
    5cf0:	33 27       	eor	r19, r19
    5cf2:	27 fd       	sbrc	r18, 7
    5cf4:	30 95       	com	r19
    5cf6:	44 e0       	ldi	r20, 0x04	; 4
    5cf8:	22 0f       	add	r18, r18
    5cfa:	33 1f       	adc	r19, r19
    5cfc:	4a 95       	dec	r20
    5cfe:	e1 f7       	brne	.-8      	; 0x5cf8 <MoveObjects+0x1c>
    5d00:	81 81       	ldd	r24, Z+1	; 0x01
    5d02:	92 81       	ldd	r25, Z+2	; 0x02
    5d04:	82 0f       	add	r24, r18
    5d06:	93 1f       	adc	r25, r19
    5d08:	92 83       	std	Z+2, r25	; 0x02
    5d0a:	81 83       	std	Z+1, r24	; 0x01
		Current->Y16 = Current->Y16 + ((Current->dY)<<4);
    5d0c:	41 85       	ldd	r20, Z+9	; 0x09
    5d0e:	24 2f       	mov	r18, r20
    5d10:	33 27       	eor	r19, r19
    5d12:	27 fd       	sbrc	r18, 7
    5d14:	30 95       	com	r19
    5d16:	94 e0       	ldi	r25, 0x04	; 4
    5d18:	22 0f       	add	r18, r18
    5d1a:	33 1f       	adc	r19, r19
    5d1c:	9a 95       	dec	r25
    5d1e:	e1 f7       	brne	.-8      	; 0x5d18 <MoveObjects+0x3c>
    5d20:	83 81       	ldd	r24, Z+3	; 0x03
    5d22:	94 81       	ldd	r25, Z+4	; 0x04
    5d24:	82 0f       	add	r24, r18
    5d26:	93 1f       	adc	r25, r19
    5d28:	94 83       	std	Z+4, r25	; 0x04
    5d2a:	83 83       	std	Z+3, r24	; 0x03
		Current->T16 = Current->T16 + ((Current->dT)<<3);
    5d2c:	22 85       	ldd	r18, Z+10	; 0x0a
    5d2e:	33 27       	eor	r19, r19
    5d30:	27 fd       	sbrc	r18, 7
    5d32:	30 95       	com	r19
    5d34:	83 e0       	ldi	r24, 0x03	; 3
    5d36:	22 0f       	add	r18, r18
    5d38:	33 1f       	adc	r19, r19
    5d3a:	8a 95       	dec	r24
    5d3c:	e1 f7       	brne	.-8      	; 0x5d36 <MoveObjects+0x5a>
    5d3e:	85 81       	ldd	r24, Z+5	; 0x05
    5d40:	96 81       	ldd	r25, Z+6	; 0x06
    5d42:	82 0f       	add	r24, r18
    5d44:	93 1f       	adc	r25, r19
    5d46:	96 83       	std	Z+6, r25	; 0x06
    5d48:	85 83       	std	Z+5, r24	; 0x05

//		if((Current->Y_Hi > 223) && (Current->dY) > 0) Current->Y_Hi = 0;
//		if((Current->Y_Hi > 223) && (Current->dY) < 0) Current->Y_Hi = 223;

		if((Current->Y_Hi < 30) && (Current->dY) < 0) Current->Y_Hi = 223;  //lower bound of the screen
    5d4a:	84 81       	ldd	r24, Z+4	; 0x04
    5d4c:	8e 31       	cpi	r24, 0x1E	; 30
    5d4e:	10 f4       	brcc	.+4      	; 0x5d54 <MoveObjects+0x78>
    5d50:	47 fd       	sbrc	r20, 7
    5d52:	64 83       	std	Z+4, r22	; 0x04
		if((Current->Y_Hi < 30) && (Current->dY) > 0) Current->Y_Hi = 30;//lower bound of the screen
    5d54:	84 81       	ldd	r24, Z+4	; 0x04
    5d56:	8e 31       	cpi	r24, 0x1E	; 30
    5d58:	20 f4       	brcc	.+8      	; 0x5d62 <MoveObjects+0x86>
    5d5a:	81 85       	ldd	r24, Z+9	; 0x09
    5d5c:	18 16       	cp	r1, r24
    5d5e:	0c f4       	brge	.+2      	; 0x5d62 <MoveObjects+0x86>
    5d60:	54 83       	std	Z+4, r21	; 0x04

		if((Current->Y_Hi > 223) && (Current->dY) > 0) Current->Y_Hi = 30;  //upper bound of the screen
    5d62:	84 81       	ldd	r24, Z+4	; 0x04
    5d64:	80 3e       	cpi	r24, 0xE0	; 224
    5d66:	20 f0       	brcs	.+8      	; 0x5d70 <MoveObjects+0x94>
    5d68:	81 85       	ldd	r24, Z+9	; 0x09
    5d6a:	18 16       	cp	r1, r24
    5d6c:	0c f4       	brge	.+2      	; 0x5d70 <MoveObjects+0x94>
    5d6e:	54 83       	std	Z+4, r21	; 0x04
		if((Current->Y_Hi > 223) && (Current->dY) < 0) Current->Y_Hi = 223;//upper bound of the screen
    5d70:	84 81       	ldd	r24, Z+4	; 0x04
    5d72:	80 3e       	cpi	r24, 0xE0	; 224
    5d74:	18 f0       	brcs	.+6      	; 0x5d7c <MoveObjects+0xa0>
    5d76:	81 85       	ldd	r24, Z+9	; 0x09
    5d78:	87 fd       	sbrc	r24, 7
    5d7a:	64 83       	std	Z+4, r22	; 0x04

		//for some reason I was getting orphaned bullets, so I had to put in this code
		if (Current->Type == OBJ_BULLET) {
    5d7c:	80 81       	ld	r24, Z
    5d7e:	88 23       	and	r24, r24
    5d80:	29 f4       	brne	.+10     	; 0x5d8c <MoveObjects+0xb0>
			if(Current->Owner != 1 && Current->Owner != 2){
    5d82:	84 85       	ldd	r24, Z+12	; 0x0c
    5d84:	81 50       	subi	r24, 0x01	; 1
    5d86:	82 30       	cpi	r24, 0x02	; 2
    5d88:	08 f0       	brcs	.+2      	; 0x5d8c <MoveObjects+0xb0>
				Current->Type = 0xFF;
    5d8a:	70 83       	st	Z, r23
			}

		}

		if(Current->Life != 0xFF) {
    5d8c:	83 85       	ldd	r24, Z+11	; 0x0b
    5d8e:	8f 3f       	cpi	r24, 0xFF	; 255
    5d90:	29 f0       	breq	.+10     	; 0x5d9c <MoveObjects+0xc0>
			Current->Life--;
    5d92:	81 50       	subi	r24, 0x01	; 1
    5d94:	83 87       	std	Z+11, r24	; 0x0b
			if(Current->Life == 0) {
    5d96:	88 23       	and	r24, r24
    5d98:	09 f4       	brne	.+2      	; 0x5d9c <MoveObjects+0xc0>
				Current->Type = 0xFF;
    5d9a:	70 83       	st	Z, r23
    5d9c:	3c 96       	adiw	r30, 0x0c	; 12

void MoveObjects() {
uint8_t i;
ObjectDescStruct *Current;

for(i = 0; i < MAX_OBJS; i++) {
    5d9e:	83 e0       	ldi	r24, 0x03	; 3
    5da0:	e8 36       	cpi	r30, 0x68	; 104
    5da2:	f8 07       	cpc	r31, r24
    5da4:	09 f0       	breq	.+2      	; 0x5da8 <MoveObjects+0xcc>
    5da6:	9f cf       	rjmp	.-194    	; 0x5ce6 <MoveObjects+0xa>

			}
		}
	}
}
}
    5da8:	08 95       	ret

00005daa <CheckCollision>:


uint8_t CheckCollision(ObjectDescStruct *Ob1, ObjectDescStruct *Ob2) {  //Ob1 is Ship/bullet  Ob2 is rock
    5daa:	3f 92       	push	r3
    5dac:	4f 92       	push	r4
    5dae:	5f 92       	push	r5
    5db0:	6f 92       	push	r6
    5db2:	7f 92       	push	r7
    5db4:	8f 92       	push	r8
    5db6:	9f 92       	push	r9
    5db8:	af 92       	push	r10
    5dba:	bf 92       	push	r11
    5dbc:	cf 92       	push	r12
    5dbe:	df 92       	push	r13
    5dc0:	ef 92       	push	r14
    5dc2:	ff 92       	push	r15
    5dc4:	0f 93       	push	r16
    5dc6:	1f 93       	push	r17
    5dc8:	cf 93       	push	r28
    5dca:	df 93       	push	r29
    5dcc:	ec 01       	movw	r28, r24
    5dce:	6b 01       	movw	r12, r22

PolarPointStruct PP1, PP2, PPX;
PointStruct      P1, P2, P3, PX;
PointStruct      Ob1Point;

AbsDistCheck = (Ob2->Scale >> 3) + 4;						// This is fairly dodgy "scale to bounding box" maths that "just works"
    5dd0:	db 01       	movw	r26, r22
    5dd2:	17 96       	adiw	r26, 0x07	; 7
    5dd4:	4c 91       	ld	r20, X
    5dd6:	24 2f       	mov	r18, r20
    5dd8:	26 95       	lsr	r18
    5dda:	26 95       	lsr	r18
    5ddc:	26 95       	lsr	r18
    5dde:	82 2f       	mov	r24, r18
    5de0:	8c 5f       	subi	r24, 0xFC	; 252
if (Ob1->Type == OBJ_SHIP) AbsDistCheck = AbsDistCheck + 4;			// in this case.  It needs some more thought to be general purpose.
    5de2:	98 81       	ld	r25, Y
    5de4:	9d 33       	cpi	r25, 0x3D	; 61
    5de6:	11 f4       	brne	.+4      	; 0x5dec <CheckCollision+0x42>
    5de8:	8c 5f       	subi	r24, 0xFC	; 252
    5dea:	04 c0       	rjmp	.+8      	; 0x5df4 <CheckCollision+0x4a>
if (Ob1->Type == OBJ_MIS_BLAST) AbsDistCheck = AbsDistCheck + 30;			// in this case.  It needs some more thought to be general purpose.
    5dec:	92 30       	cpi	r25, 0x02	; 2
    5dee:	11 f4       	brne	.+4      	; 0x5df4 <CheckCollision+0x4a>
    5df0:	82 2f       	mov	r24, r18
    5df2:	8e 5d       	subi	r24, 0xDE	; 222

if((abs(Ob1->X_Hi - Ob2->X_Hi) < AbsDistCheck) &&
    5df4:	3a 80       	ldd	r3, Y+2	; 0x02
    5df6:	f6 01       	movw	r30, r12
    5df8:	92 80       	ldd	r9, Z+2	; 0x02
    5dfa:	28 2f       	mov	r18, r24
    5dfc:	30 e0       	ldi	r19, 0x00	; 0
    5dfe:	83 2d       	mov	r24, r3
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	89 19       	sub	r24, r9
    5e04:	91 09       	sbc	r25, r1
    5e06:	97 ff       	sbrs	r25, 7
    5e08:	03 c0       	rjmp	.+6      	; 0x5e10 <CheckCollision+0x66>
    5e0a:	90 95       	com	r25
    5e0c:	81 95       	neg	r24
    5e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e10:	82 17       	cp	r24, r18
    5e12:	93 07       	cpc	r25, r19
    5e14:	0c f0       	brlt	.+2      	; 0x5e18 <CheckCollision+0x6e>
    5e16:	c0 c0       	rjmp	.+384    	; 0x5f98 <CheckCollision+0x1ee>
    5e18:	4c 80       	ldd	r4, Y+4	; 0x04
    5e1a:	d6 01       	movw	r26, r12
    5e1c:	14 96       	adiw	r26, 0x04	; 4
    5e1e:	bc 90       	ld	r11, X
    5e20:	84 2d       	mov	r24, r4
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	8b 19       	sub	r24, r11
    5e26:	91 09       	sbc	r25, r1
    5e28:	97 ff       	sbrs	r25, 7
    5e2a:	03 c0       	rjmp	.+6      	; 0x5e32 <CheckCollision+0x88>
    5e2c:	90 95       	com	r25
    5e2e:	81 95       	neg	r24
    5e30:	9f 4f       	sbci	r25, 0xFF	; 255
    5e32:	82 17       	cp	r24, r18
    5e34:	93 07       	cpc	r25, r19
    5e36:	0c f0       	brlt	.+2      	; 0x5e3a <CheckCollision+0x90>
    5e38:	af c0       	rjmp	.+350    	; 0x5f98 <CheckCollision+0x1ee>
	P1.X = Ob2->X_Hi;
	P1.Y = Ob2->Y_Hi;

	i = 0;

	Dist1Read = pgm_read_byte(&PolarObjects[Ob2->Type].Points[i].Dist);
    5e3a:	d6 01       	movw	r26, r12
    5e3c:	ec 91       	ld	r30, X
    5e3e:	2e 2f       	mov	r18, r30
    5e40:	30 e0       	ldi	r19, 0x00	; 0
    5e42:	75 e0       	ldi	r23, 0x05	; 5
    5e44:	22 0f       	add	r18, r18
    5e46:	33 1f       	adc	r19, r19
    5e48:	7a 95       	dec	r23
    5e4a:	e1 f7       	brne	.-8      	; 0x5e44 <CheckCollision+0x9a>
    5e4c:	c9 01       	movw	r24, r18
    5e4e:	84 5d       	subi	r24, 0xD4	; 212
    5e50:	99 4e       	sbci	r25, 0xE9	; 233
    5e52:	fc 01       	movw	r30, r24
    5e54:	84 91       	lpm	r24, Z+
	PP2.Dist  = (Dist1Read * Ob2->Scale)>>8;
	PP2.Theta = pgm_read_byte(&PolarObjects[Ob2->Type].Points[i].Theta) + Ob2->T_Hi;
    5e56:	23 5d       	subi	r18, 0xD3	; 211
    5e58:	39 4e       	sbci	r19, 0xE9	; 233
    5e5a:	f9 01       	movw	r30, r18
    5e5c:	24 91       	lpm	r18, Z+
    5e5e:	16 96       	adiw	r26, 0x06	; 6
    5e60:	7c 91       	ld	r23, X

	while (Dist1Read != 0xFF) {
    5e62:	8f 3f       	cpi	r24, 0xFF	; 255
    5e64:	09 f4       	brne	.+2      	; 0x5e68 <CheckCollision+0xbe>
    5e66:	98 c0       	rjmp	.+304    	; 0x5f98 <CheckCollision+0x1ee>
	P1.Y = Ob2->Y_Hi;

	i = 0;

	Dist1Read = pgm_read_byte(&PolarObjects[Ob2->Type].Points[i].Dist);
	PP2.Dist  = (Dist1Read * Ob2->Scale)>>8;
    5e68:	84 9f       	mul	r24, r20
    5e6a:	c0 01       	movw	r24, r0
    5e6c:	11 24       	eor	r1, r1
    5e6e:	89 2f       	mov	r24, r25
    5e70:	99 0f       	add	r25, r25
    5e72:	99 0b       	sbc	r25, r25
    5e74:	f8 2e       	mov	r15, r24
	PP2.Theta = pgm_read_byte(&PolarObjects[Ob2->Type].Points[i].Theta) + Ob2->T_Hi;
    5e76:	12 2f       	mov	r17, r18
    5e78:	17 0f       	add	r17, r23
    5e7a:	aa 24       	eor	r10, r10

	while (Dist1Read != 0xFF) {

		PP1 = PP2;
    5e7c:	71 2f       	mov	r23, r17
    5e7e:	6f 2d       	mov	r22, r15

		i++;
    5e80:	a3 94       	inc	r10
		Dist1Read = pgm_read_byte(&PolarObjects[Ob2->Type].Points[i].Dist);
    5e82:	d6 01       	movw	r26, r12
    5e84:	ec 91       	ld	r30, X
    5e86:	8e 2f       	mov	r24, r30
    5e88:	90 e0       	ldi	r25, 0x00	; 0
    5e8a:	54 e0       	ldi	r21, 0x04	; 4
    5e8c:	88 0f       	add	r24, r24
    5e8e:	99 1f       	adc	r25, r25
    5e90:	5a 95       	dec	r21
    5e92:	e1 f7       	brne	.-8      	; 0x5e8c <CheckCollision+0xe2>
    5e94:	8a 0d       	add	r24, r10
    5e96:	91 1d       	adc	r25, r1
    5e98:	88 0f       	add	r24, r24
    5e9a:	99 1f       	adc	r25, r25
    5e9c:	3c e2       	ldi	r19, 0x2C	; 44
    5e9e:	e3 2e       	mov	r14, r19
    5ea0:	36 e1       	ldi	r19, 0x16	; 22
    5ea2:	f3 2e       	mov	r15, r19
    5ea4:	e8 0e       	add	r14, r24
    5ea6:	f9 1e       	adc	r15, r25
    5ea8:	f7 01       	movw	r30, r14
    5eaa:	e4 90       	lpm	r14, Z+
		PP2.Dist  = (Dist1Read * Ob2->Scale)>>8;;
    5eac:	17 96       	adiw	r26, 0x07	; 7
    5eae:	0c 91       	ld	r16, X
    5eb0:	17 97       	sbiw	r26, 0x07	; 7
    5eb2:	e0 9e       	mul	r14, r16
    5eb4:	80 01       	movw	r16, r0
    5eb6:	11 24       	eor	r1, r1
    5eb8:	01 2f       	mov	r16, r17
    5eba:	11 0f       	add	r17, r17
    5ebc:	11 0b       	sbc	r17, r17
    5ebe:	f0 2e       	mov	r15, r16
		PP2.Theta = pgm_read_byte(&PolarObjects[Ob2->Type].Points[i].Theta) + Ob2->T_Hi;
    5ec0:	83 5d       	subi	r24, 0xD3	; 211
    5ec2:	99 4e       	sbci	r25, 0xE9	; 233
    5ec4:	fc 01       	movw	r30, r24
    5ec6:	14 91       	lpm	r17, Z+
    5ec8:	16 96       	adiw	r26, 0x06	; 6
    5eca:	8c 91       	ld	r24, X
    5ecc:	18 0f       	add	r17, r24

		P2 = PolarToPoint(P1, PP1);
    5ece:	89 2d       	mov	r24, r9
    5ed0:	9b 2d       	mov	r25, r11
    5ed2:	0e 94 59 30 	call	0x60b2	; 0x60b2 <PolarToPoint>
    5ed6:	58 2e       	mov	r5, r24
    5ed8:	69 2e       	mov	r6, r25
		P3 = PolarToPoint(P1, PP2);
    5eda:	89 2d       	mov	r24, r9
    5edc:	9b 2d       	mov	r25, r11
    5ede:	b8 01       	movw	r22, r16
    5ee0:	0e 94 59 30 	call	0x60b2	; 0x60b2 <PolarToPoint>
    5ee4:	78 2e       	mov	r7, r24
    5ee6:	89 2e       	mov	r8, r25

		if(Dist1Read == 0xFF) break;
    5ee8:	ff ef       	ldi	r31, 0xFF	; 255
    5eea:	ef 16       	cp	r14, r31
    5eec:	09 f4       	brne	.+2      	; 0x5ef0 <CheckCollision+0x146>
    5eee:	54 c0       	rjmp	.+168    	; 0x5f98 <CheckCollision+0x1ee>

		j = 0;

		Dist2Read = pgm_read_byte(&PolarObjects[Ob1->Type].Points[j].Dist);
    5ef0:	e8 81       	ld	r30, Y
    5ef2:	4e 2f       	mov	r20, r30
    5ef4:	50 e0       	ldi	r21, 0x00	; 0
    5ef6:	a5 e0       	ldi	r26, 0x05	; 5
    5ef8:	44 0f       	add	r20, r20
    5efa:	55 1f       	adc	r21, r21
    5efc:	aa 95       	dec	r26
    5efe:	e1 f7       	brne	.-8      	; 0x5ef8 <CheckCollision+0x14e>
    5f00:	ca 01       	movw	r24, r20
    5f02:	84 5d       	subi	r24, 0xD4	; 212
    5f04:	99 4e       	sbci	r25, 0xE9	; 233
    5f06:	fc 01       	movw	r30, r24
    5f08:	24 91       	lpm	r18, Z+
		PPX.Dist  = (Dist2Read * Ob1->Scale)>>8;
    5f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    5f0c:	28 9f       	mul	r18, r24
    5f0e:	c0 01       	movw	r24, r0
    5f10:	11 24       	eor	r1, r1
    5f12:	89 2f       	mov	r24, r25
    5f14:	99 0f       	add	r25, r25
    5f16:	99 0b       	sbc	r25, r25
    5f18:	68 2f       	mov	r22, r24
		PPX.Theta = pgm_read_byte(&PolarObjects[Ob1->Type].Points[j].Theta) + Ob1->T_Hi;
    5f1a:	43 5d       	subi	r20, 0xD3	; 211
    5f1c:	59 4e       	sbci	r21, 0xE9	; 233
    5f1e:	fa 01       	movw	r30, r20
    5f20:	74 91       	lpm	r23, Z+
    5f22:	8e 81       	ldd	r24, Y+6	; 0x06
    5f24:	78 0f       	add	r23, r24
    5f26:	e2 2f       	mov	r30, r18
    5f28:	00 e0       	ldi	r16, 0x00	; 0
    5f2a:	30 c0       	rjmp	.+96     	; 0x5f8c <CheckCollision+0x1e2>

		while (Dist2Read != 0xFF) {

			PX = PolarToPoint(Ob1Point, PPX);
    5f2c:	83 2d       	mov	r24, r3
    5f2e:	94 2d       	mov	r25, r4
    5f30:	0e 94 59 30 	call	0x60b2	; 0x60b2 <PolarToPoint>
    5f34:	9c 01       	movw	r18, r24

			if(PointInTriangle(P1, P2, P3, PX) == 1) {
    5f36:	89 2d       	mov	r24, r9
    5f38:	9b 2d       	mov	r25, r11
    5f3a:	65 2d       	mov	r22, r5
    5f3c:	76 2d       	mov	r23, r6
    5f3e:	47 2d       	mov	r20, r7
    5f40:	58 2d       	mov	r21, r8
    5f42:	0e 94 70 30 	call	0x60e0	; 0x60e0 <PointInTriangle>
    5f46:	81 30       	cpi	r24, 0x01	; 1
    5f48:	29 f1       	breq	.+74     	; 0x5f94 <CheckCollision+0x1ea>
				return(1);
			}

			j++;
    5f4a:	0f 5f       	subi	r16, 0xFF	; 255
			Dist2Read = pgm_read_byte(&PolarObjects[Ob1->Type].Points[j].Dist);
    5f4c:	e8 81       	ld	r30, Y
    5f4e:	4e 2f       	mov	r20, r30
    5f50:	50 e0       	ldi	r21, 0x00	; 0
    5f52:	e4 e0       	ldi	r30, 0x04	; 4
    5f54:	44 0f       	add	r20, r20
    5f56:	55 1f       	adc	r21, r21
    5f58:	ea 95       	dec	r30
    5f5a:	e1 f7       	brne	.-8      	; 0x5f54 <CheckCollision+0x1aa>
    5f5c:	40 0f       	add	r20, r16
    5f5e:	51 1d       	adc	r21, r1
    5f60:	44 0f       	add	r20, r20
    5f62:	55 1f       	adc	r21, r21
    5f64:	ca 01       	movw	r24, r20
    5f66:	84 5d       	subi	r24, 0xD4	; 212
    5f68:	99 4e       	sbci	r25, 0xE9	; 233
    5f6a:	fc 01       	movw	r30, r24
    5f6c:	24 91       	lpm	r18, Z+
			PPX.Dist  = (Dist2Read * Ob1->Scale)>>8;
    5f6e:	8f 81       	ldd	r24, Y+7	; 0x07
    5f70:	28 9f       	mul	r18, r24
    5f72:	c0 01       	movw	r24, r0
    5f74:	11 24       	eor	r1, r1
    5f76:	89 2f       	mov	r24, r25
    5f78:	99 0f       	add	r25, r25
    5f7a:	99 0b       	sbc	r25, r25
    5f7c:	68 2f       	mov	r22, r24
			PPX.Theta = pgm_read_byte(&PolarObjects[Ob1->Type].Points[j].Theta) + Ob1->T_Hi;
    5f7e:	43 5d       	subi	r20, 0xD3	; 211
    5f80:	59 4e       	sbci	r21, 0xE9	; 233
    5f82:	fa 01       	movw	r30, r20
    5f84:	74 91       	lpm	r23, Z+
    5f86:	8e 81       	ldd	r24, Y+6	; 0x06
    5f88:	78 0f       	add	r23, r24
    5f8a:	e2 2f       	mov	r30, r18

		Dist2Read = pgm_read_byte(&PolarObjects[Ob1->Type].Points[j].Dist);
		PPX.Dist  = (Dist2Read * Ob1->Scale)>>8;
		PPX.Theta = pgm_read_byte(&PolarObjects[Ob1->Type].Points[j].Theta) + Ob1->T_Hi;

		while (Dist2Read != 0xFF) {
    5f8c:	ef 3f       	cpi	r30, 0xFF	; 255
    5f8e:	09 f4       	brne	.+2      	; 0x5f92 <CheckCollision+0x1e8>
    5f90:	75 cf       	rjmp	.-278    	; 0x5e7c <CheckCollision+0xd2>
    5f92:	cc cf       	rjmp	.-104    	; 0x5f2c <CheckCollision+0x182>
    5f94:	81 e0       	ldi	r24, 0x01	; 1
    5f96:	01 c0       	rjmp	.+2      	; 0x5f9a <CheckCollision+0x1f0>
    5f98:	80 e0       	ldi	r24, 0x00	; 0
	}
}

return(0);

}
    5f9a:	df 91       	pop	r29
    5f9c:	cf 91       	pop	r28
    5f9e:	1f 91       	pop	r17
    5fa0:	0f 91       	pop	r16
    5fa2:	ff 90       	pop	r15
    5fa4:	ef 90       	pop	r14
    5fa6:	df 90       	pop	r13
    5fa8:	cf 90       	pop	r12
    5faa:	bf 90       	pop	r11
    5fac:	af 90       	pop	r10
    5fae:	9f 90       	pop	r9
    5fb0:	8f 90       	pop	r8
    5fb2:	7f 90       	pop	r7
    5fb4:	6f 90       	pop	r6
    5fb6:	5f 90       	pop	r5
    5fb8:	4f 90       	pop	r4
    5fba:	3f 90       	pop	r3
    5fbc:	08 95       	ret

00005fbe <CollisionDetection>:

void CollisionDetection(void) {
    5fbe:	df 92       	push	r13
    5fc0:	ef 92       	push	r14
    5fc2:	ff 92       	push	r15
    5fc4:	0f 93       	push	r16
    5fc6:	1f 93       	push	r17
    5fc8:	cf 93       	push	r28
    5fca:	df 93       	push	r29

	uint8_t i, j;
	ObjectDescStruct *Current;
	ObjectDescStruct *Compare;

	Current = player1.Ship;
    5fcc:	00 91 df 01 	lds	r16, 0x01DF
    5fd0:	10 91 e0 01 	lds	r17, 0x01E0
	Compare = player2.Ship;
    5fd4:	c0 91 ee 01 	lds	r28, 0x01EE
    5fd8:	d0 91 ef 01 	lds	r29, 0x01EF
	//check players first
	if (CheckCollision(Current, Compare) != 0) {
    5fdc:	c8 01       	movw	r24, r16
    5fde:	be 01       	movw	r22, r28
    5fe0:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <CheckCollision>
    5fe4:	88 23       	and	r24, r24
    5fe6:	71 f0       	breq	.+28     	; 0x6004 <CollisionDetection+0x46>
		Current->Life = 1;
    5fe8:	81 e0       	ldi	r24, 0x01	; 1
    5fea:	f8 01       	movw	r30, r16
    5fec:	83 87       	std	Z+11, r24	; 0x0b
		Compare->Life = 1;
    5fee:	8b 87       	std	Y+11, r24	; 0x0b
		player1.State = playerDead;
    5ff0:	81 e0       	ldi	r24, 0x01	; 1
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	90 93 e2 01 	sts	0x01E2, r25
    5ff8:	80 93 e1 01 	sts	0x01E1, r24
		player2.State = playerDead;
    5ffc:	90 93 f1 01 	sts	0x01F1, r25
    6000:	80 93 f0 01 	sts	0x01F0, r24
    6004:	c0 e0       	ldi	r28, 0x00	; 0
    6006:	d2 e0       	ldi	r29, 0x02	; 2
				player1.Ship->Life = 1;
				player1.State = playerDead;
				player2.Score++;
			}
			if (CheckCollision(Current, player2.Ship) != 0 &&  Current->Owner != 2) {
				player2.Ship->Life = 1;
    6008:	dd 24       	eor	r13, r13
    600a:	d3 94       	inc	r13
				player2.State = playerDead;
    600c:	e1 e0       	ldi	r30, 0x01	; 1
    600e:	ee 2e       	mov	r14, r30
    6010:	f1 2c       	mov	r15, r1
	//check players first
	if (CheckCollision(Current, Compare) != 0) {
		Current->Life = 1;
		Compare->Life = 1;
		player1.State = playerDead;
		player2.State = playerDead;
    6012:	1c 2f       	mov	r17, r28
    6014:	0d 2f       	mov	r16, r29
	//next checking missiles
	for(i = 0; i < (MAX_OBJS - 1); i++) {
		Current = (ObjectDescStruct*)&ObjectStore[i];

		//if current is a missile...
		if (Current->Type == OBJ_BULLET){
    6016:	88 81       	ld	r24, Y
    6018:	88 23       	and	r24, r24
    601a:	e9 f5       	brne	.+122    	; 0x6096 <CollisionDetection+0xd8>
			//will need to tell whether bullet is enemies
			//check collision
			if (CheckCollision(Current, player1.Ship) != 0 &&  Current->Owner != 1) {
    601c:	60 91 df 01 	lds	r22, 0x01DF
    6020:	70 91 e0 01 	lds	r23, 0x01E0
    6024:	ce 01       	movw	r24, r28
    6026:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <CheckCollision>
    602a:	88 23       	and	r24, r24
    602c:	a9 f0       	breq	.+42     	; 0x6058 <CollisionDetection+0x9a>
    602e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6030:	81 30       	cpi	r24, 0x01	; 1
    6032:	91 f0       	breq	.+36     	; 0x6058 <CollisionDetection+0x9a>
				player1.Ship->Life = 1;
    6034:	e0 91 df 01 	lds	r30, 0x01DF
    6038:	f0 91 e0 01 	lds	r31, 0x01E0
    603c:	d3 86       	std	Z+11, r13	; 0x0b
				player1.State = playerDead;
    603e:	f0 92 e2 01 	sts	0x01E2, r15
    6042:	e0 92 e1 01 	sts	0x01E1, r14
				player2.Score++;
    6046:	80 91 f2 01 	lds	r24, 0x01F2
    604a:	90 91 f3 01 	lds	r25, 0x01F3
    604e:	01 96       	adiw	r24, 0x01	; 1
    6050:	90 93 f3 01 	sts	0x01F3, r25
    6054:	80 93 f2 01 	sts	0x01F2, r24
			}
			if (CheckCollision(Current, player2.Ship) != 0 &&  Current->Owner != 2) {
    6058:	60 91 ee 01 	lds	r22, 0x01EE
    605c:	70 91 ef 01 	lds	r23, 0x01EF
    6060:	81 2f       	mov	r24, r17
    6062:	90 2f       	mov	r25, r16
    6064:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <CheckCollision>
    6068:	88 23       	and	r24, r24
    606a:	a9 f0       	breq	.+42     	; 0x6096 <CollisionDetection+0xd8>
    606c:	8c 85       	ldd	r24, Y+12	; 0x0c
    606e:	82 30       	cpi	r24, 0x02	; 2
    6070:	91 f0       	breq	.+36     	; 0x6096 <CollisionDetection+0xd8>
				player2.Ship->Life = 1;
    6072:	e0 91 ee 01 	lds	r30, 0x01EE
    6076:	f0 91 ef 01 	lds	r31, 0x01EF
    607a:	d3 86       	std	Z+11, r13	; 0x0b
				player2.State = playerDead;
    607c:	f0 92 f1 01 	sts	0x01F1, r15
    6080:	e0 92 f0 01 	sts	0x01F0, r14
				player1.Score++;
    6084:	80 91 e3 01 	lds	r24, 0x01E3
    6088:	90 91 e4 01 	lds	r25, 0x01E4
    608c:	01 96       	adiw	r24, 0x01	; 1
    608e:	90 93 e4 01 	sts	0x01E4, r25
    6092:	80 93 e3 01 	sts	0x01E3, r24
    6096:	2c 96       	adiw	r28, 0x0c	; 12
		player1.State = playerDead;
		player2.State = playerDead;
	}

	//next checking missiles
	for(i = 0; i < (MAX_OBJS - 1); i++) {
    6098:	f3 e0       	ldi	r31, 0x03	; 3
    609a:	cc 35       	cpi	r28, 0x5C	; 92
    609c:	df 07       	cpc	r29, r31
    609e:	09 f0       	breq	.+2      	; 0x60a2 <CollisionDetection+0xe4>
    60a0:	b8 cf       	rjmp	.-144    	; 0x6012 <CollisionDetection+0x54>

		}

	}

}
    60a2:	df 91       	pop	r29
    60a4:	cf 91       	pop	r28
    60a6:	1f 91       	pop	r17
    60a8:	0f 91       	pop	r16
    60aa:	ff 90       	pop	r15
    60ac:	ef 90       	pop	r14
    60ae:	df 90       	pop	r13
    60b0:	08 95       	ret

000060b2 <PolarToPoint>:



PointStruct PolarToPoint(PointStruct P1, PolarPointStruct PP1) {
    60b2:	ef 92       	push	r14
    60b4:	ff 92       	push	r15
    60b6:	0f 93       	push	r16
    60b8:	1f 93       	push	r17
    60ba:	18 2f       	mov	r17, r24
    60bc:	09 2f       	mov	r16, r25
    60be:	7b 01       	movw	r14, r22

PointStruct PX;

PX.X = P1.X + SinMulFastC(PP1.Theta, PP1.Dist);
    60c0:	8f 2d       	mov	r24, r15
    60c2:	0e 94 32 1b 	call	0x3664	; 0x3664 <SinMulFastC>
    60c6:	18 0f       	add	r17, r24
PX.Y = P1.Y + CosMulFastC(PP1.Theta, PP1.Dist);
    60c8:	8f 2d       	mov	r24, r15
    60ca:	6e 2d       	mov	r22, r14
    60cc:	0e 94 31 1b 	call	0x3662	; 0x3662 <CosMulFastC>

return(PX);
    60d0:	08 0f       	add	r16, r24
}
    60d2:	81 2f       	mov	r24, r17
    60d4:	90 2f       	mov	r25, r16
    60d6:	1f 91       	pop	r17
    60d8:	0f 91       	pop	r16
    60da:	ff 90       	pop	r15
    60dc:	ef 90       	pop	r14
    60de:	08 95       	ret

000060e0 <PointInTriangle>:

uint8_t PointInTriangle(PointStruct P1, PointStruct P2, PointStruct P3, PointStruct PX) {
    60e0:	cf 92       	push	r12
    60e2:	df 92       	push	r13
    60e4:	ef 92       	push	r14
    60e6:	ff 92       	push	r15
    60e8:	0f 93       	push	r16
    60ea:	1f 93       	push	r17
    60ec:	cf 93       	push	r28
    60ee:	df 93       	push	r29
    60f0:	f4 2f       	mov	r31, r20
    60f2:	e5 2f       	mov	r30, r21
SetPixelFastC(P2.X, P2.Y);
SetPixelFastC(P3.X, P3.Y);
*/


PlaneAB = ((uint8_t)P1.X - (uint8_t)PX.X) * ((uint8_t)P2.Y - (uint8_t)PX.Y) - ((uint8_t)P2.X - (uint8_t)PX.X) * ((uint8_t)P1.Y - (uint8_t)PX.Y);
    60f4:	42 2f       	mov	r20, r18
    60f6:	50 e0       	ldi	r21, 0x00	; 0
    60f8:	08 2f       	mov	r16, r24
    60fa:	10 e0       	ldi	r17, 0x00	; 0
    60fc:	04 1b       	sub	r16, r20
    60fe:	15 0b       	sbc	r17, r21
    6100:	c7 2e       	mov	r12, r23
    6102:	dd 24       	eor	r13, r13
    6104:	a3 2f       	mov	r26, r19
    6106:	b0 e0       	ldi	r27, 0x00	; 0
    6108:	70 e0       	ldi	r23, 0x00	; 0
    610a:	64 1b       	sub	r22, r20
    610c:	75 0b       	sbc	r23, r21
    610e:	c9 2f       	mov	r28, r25
    6110:	d0 e0       	ldi	r29, 0x00	; 0
if(PlaneAB > 0) return(0);
    6112:	cd 01       	movw	r24, r26
    6114:	8c 1b       	sub	r24, r28
    6116:	9d 0b       	sbc	r25, r29
    6118:	7c 01       	movw	r14, r24
    611a:	e6 9e       	mul	r14, r22
    611c:	c0 01       	movw	r24, r0
    611e:	e7 9e       	mul	r14, r23
    6120:	90 0d       	add	r25, r0
    6122:	f6 9e       	mul	r15, r22
    6124:	90 0d       	add	r25, r0
    6126:	11 24       	eor	r1, r1
    6128:	96 01       	movw	r18, r12
    612a:	2a 1b       	sub	r18, r26
    612c:	3b 0b       	sbc	r19, r27
    612e:	79 01       	movw	r14, r18
    6130:	e0 9e       	mul	r14, r16
    6132:	90 01       	movw	r18, r0
    6134:	e1 9e       	mul	r14, r17
    6136:	30 0d       	add	r19, r0
    6138:	f0 9e       	mul	r15, r16
    613a:	30 0d       	add	r19, r0
    613c:	11 24       	eor	r1, r1
    613e:	82 0f       	add	r24, r18
    6140:	93 1f       	adc	r25, r19
    6142:	18 16       	cp	r1, r24
    6144:	19 06       	cpc	r1, r25
    6146:	ec f1       	brlt	.+122    	; 0x61c2 <PointInTriangle+0xe2>

PlaneBC = ((uint8_t)P2.X - (uint8_t)PX.X) * ((uint8_t)P3.Y - (uint8_t)PX.Y) - ((uint8_t)P3.X - (uint8_t)PX.X) * ((uint8_t)P2.Y - (uint8_t)PX.Y);
    6148:	ee 2e       	mov	r14, r30
    614a:	ff 24       	eor	r15, r15
    614c:	ef 2f       	mov	r30, r31
    614e:	f0 e0       	ldi	r31, 0x00	; 0
    6150:	e4 1b       	sub	r30, r20
    6152:	f5 0b       	sbc	r31, r21
if(PlaneBC > 0) return(0);
    6154:	cd 01       	movw	r24, r26
    6156:	8c 19       	sub	r24, r12
    6158:	9d 09       	sbc	r25, r13
    615a:	9c 01       	movw	r18, r24
    615c:	2e 9f       	mul	r18, r30
    615e:	c0 01       	movw	r24, r0
    6160:	2f 9f       	mul	r18, r31
    6162:	90 0d       	add	r25, r0
    6164:	3e 9f       	mul	r19, r30
    6166:	90 0d       	add	r25, r0
    6168:	11 24       	eor	r1, r1
    616a:	97 01       	movw	r18, r14
    616c:	2a 1b       	sub	r18, r26
    616e:	3b 0b       	sbc	r19, r27
    6170:	a9 01       	movw	r20, r18
    6172:	46 9f       	mul	r20, r22
    6174:	90 01       	movw	r18, r0
    6176:	47 9f       	mul	r20, r23
    6178:	30 0d       	add	r19, r0
    617a:	56 9f       	mul	r21, r22
    617c:	30 0d       	add	r19, r0
    617e:	11 24       	eor	r1, r1
    6180:	82 0f       	add	r24, r18
    6182:	93 1f       	adc	r25, r19
    6184:	18 16       	cp	r1, r24
    6186:	19 06       	cpc	r1, r25
    6188:	e4 f0       	brlt	.+56     	; 0x61c2 <PointInTriangle+0xe2>
    618a:	40 e0       	ldi	r20, 0x00	; 0
    618c:	cd 01       	movw	r24, r26
    618e:	8e 19       	sub	r24, r14
    6190:	9f 09       	sbc	r25, r15
    6192:	7c 01       	movw	r14, r24
    6194:	e0 9e       	mul	r14, r16
    6196:	c0 01       	movw	r24, r0
    6198:	e1 9e       	mul	r14, r17
    619a:	90 0d       	add	r25, r0
    619c:	f0 9e       	mul	r15, r16
    619e:	90 0d       	add	r25, r0
    61a0:	11 24       	eor	r1, r1
    61a2:	ca 1b       	sub	r28, r26
    61a4:	db 0b       	sbc	r29, r27
    61a6:	ce 9f       	mul	r28, r30
    61a8:	90 01       	movw	r18, r0
    61aa:	cf 9f       	mul	r28, r31
    61ac:	30 0d       	add	r19, r0
    61ae:	de 9f       	mul	r29, r30
    61b0:	30 0d       	add	r19, r0
    61b2:	11 24       	eor	r1, r1
    61b4:	82 0f       	add	r24, r18
    61b6:	93 1f       	adc	r25, r19
    61b8:	18 16       	cp	r1, r24
    61ba:	19 06       	cpc	r1, r25
    61bc:	1c f0       	brlt	.+6      	; 0x61c4 <PointInTriangle+0xe4>
    61be:	41 e0       	ldi	r20, 0x01	; 1
    61c0:	01 c0       	rjmp	.+2      	; 0x61c4 <PointInTriangle+0xe4>
    61c2:	40 e0       	ldi	r20, 0x00	; 0

PlaneCA = ((uint8_t)P3.X - (uint8_t)PX.X) * ((uint8_t)P1.Y - (uint8_t)PX.Y) - ((uint8_t)P1.X - (uint8_t)PX.X) * ((uint8_t)P3.Y - (uint8_t)PX.Y);
if(PlaneCA > 0) return(0);

return(1);
}
    61c4:	84 2f       	mov	r24, r20
    61c6:	df 91       	pop	r29
    61c8:	cf 91       	pop	r28
    61ca:	1f 91       	pop	r17
    61cc:	0f 91       	pop	r16
    61ce:	ff 90       	pop	r15
    61d0:	ef 90       	pop	r14
    61d2:	df 90       	pop	r13
    61d4:	cf 90       	pop	r12
    61d6:	08 95       	ret

000061d8 <NewBullet>:
}
return(NewObjNum);
}

uint8_t NewBullet(uint8_t X, uint8_t Y, int8_t dX, int8_t dY, uint8_t L, uint8_t owner)
{
    61d8:	cf 92       	push	r12
    61da:	df 92       	push	r13
    61dc:	ef 92       	push	r14
    61de:	ff 92       	push	r15
    61e0:	0f 93       	push	r16
    61e2:	1f 93       	push	r17
    61e4:	18 2f       	mov	r17, r24
    61e6:	f6 2e       	mov	r15, r22
    61e8:	d4 2e       	mov	r13, r20
    61ea:	c2 2e       	mov	r12, r18
ObjectDescStruct *NewObj;
uint8_t NewObjNum;

NewObjNum = GetFreeObject();
    61ec:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <GetFreeObject>
    61f0:	98 2f       	mov	r25, r24

if(NewObjNum != 0xFF) {
    61f2:	8f 3f       	cpi	r24, 0xFF	; 255
    61f4:	89 f0       	breq	.+34     	; 0x6218 <NewBullet+0x40>

	NewObj = ((ObjectDescStruct*)&ObjectStore[NewObjNum]);
    61f6:	ec e0       	ldi	r30, 0x0C	; 12
    61f8:	8e 9f       	mul	r24, r30
    61fa:	f0 01       	movw	r30, r0
    61fc:	11 24       	eor	r1, r1
    61fe:	e0 50       	subi	r30, 0x00	; 0
    6200:	fe 4f       	sbci	r31, 0xFE	; 254

	NewObj->Type  =   OBJ_BULLET;
    6202:	10 82       	st	Z, r1
	NewObj->X_Hi  =   X;
    6204:	12 83       	std	Z+2, r17	; 0x02
	NewObj->Y_Hi  =   Y;
    6206:	f4 82       	std	Z+4, r15	; 0x04
	NewObj->T_Hi  =   0;
    6208:	16 82       	std	Z+6, r1	; 0x06
	NewObj->dX    =  dX;
    620a:	d0 86       	std	Z+8, r13	; 0x08
	NewObj->dY    =  dY;
    620c:	c1 86       	std	Z+9, r12	; 0x09
	NewObj->dT    =   0;
    620e:	12 86       	std	Z+10, r1	; 0x0a
	NewObj->Scale =   1;
    6210:	81 e0       	ldi	r24, 0x01	; 1
    6212:	87 83       	std	Z+7, r24	; 0x07
	NewObj->Life  =   L;
    6214:	03 87       	std	Z+11, r16	; 0x0b
	NewObj->Owner =	  owner;
    6216:	e4 86       	std	Z+12, r14	; 0x0c

}
return(NewObjNum);
}
    6218:	89 2f       	mov	r24, r25
    621a:	1f 91       	pop	r17
    621c:	0f 91       	pop	r16
    621e:	ff 90       	pop	r15
    6220:	ef 90       	pop	r14
    6222:	df 90       	pop	r13
    6224:	cf 90       	pop	r12
    6226:	08 95       	ret

00006228 <NewShip>:


uint8_t NewShip(player *p) {
    6228:	1f 93       	push	r17
    622a:	cf 93       	push	r28
    622c:	df 93       	push	r29
    622e:	ec 01       	movw	r28, r24

ObjectDescStruct *NewObj;
uint8_t NewObjNum;
uint8_t shipType = OBJ_SHIP;

if(p->ShipType > 0){
    6230:	1e 85       	ldd	r17, Y+14	; 0x0e
    6232:	11 23       	and	r17, r17
    6234:	09 f4       	brne	.+2      	; 0x6238 <NewShip+0x10>
    6236:	1d e3       	ldi	r17, 0x3D	; 61
	shipType = p->ShipType;
}

NewObjNum = GetFreeObject();
    6238:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <GetFreeObject>
    623c:	98 2f       	mov	r25, r24

if(NewObjNum != 0xFF) {
    623e:	8f 3f       	cpi	r24, 0xFF	; 255
    6240:	99 f0       	breq	.+38     	; 0x6268 <NewShip+0x40>

	NewObj = ((ObjectDescStruct*)&ObjectStore[NewObjNum]);
    6242:	ec e0       	ldi	r30, 0x0C	; 12
    6244:	8e 9f       	mul	r24, r30
    6246:	f0 01       	movw	r30, r0
    6248:	11 24       	eor	r1, r1
    624a:	e0 50       	subi	r30, 0x00	; 0
    624c:	fe 4f       	sbci	r31, 0xFE	; 254

	NewObj->Type  =   shipType;
    624e:	10 83       	st	Z, r17
	NewObj->X_Hi  = p->SpawnX;
    6250:	8a 85       	ldd	r24, Y+10	; 0x0a
    6252:	82 83       	std	Z+2, r24	; 0x02
	NewObj->Y_Hi  = p->SpawnY;
    6254:	8b 85       	ldd	r24, Y+11	; 0x0b
    6256:	84 83       	std	Z+4, r24	; 0x04
	NewObj->T_Hi  = p->T_Hi;
    6258:	8c 85       	ldd	r24, Y+12	; 0x0c
    625a:	86 83       	std	Z+6, r24	; 0x06
	NewObj->dX    =   0;
    625c:	10 86       	std	Z+8, r1	; 0x08
	NewObj->dY    =   0;
    625e:	11 86       	std	Z+9, r1	; 0x09
	NewObj->dT    =   0;
    6260:	12 86       	std	Z+10, r1	; 0x0a
	NewObj->Scale = 255;
    6262:	8f ef       	ldi	r24, 0xFF	; 255
    6264:	87 83       	std	Z+7, r24	; 0x07
	NewObj->Life  =   0;
    6266:	13 86       	std	Z+11, r1	; 0x0b

}
return(NewObjNum);
}
    6268:	89 2f       	mov	r24, r25
    626a:	df 91       	pop	r29
    626c:	cf 91       	pop	r28
    626e:	1f 91       	pop	r17
    6270:	08 95       	ret

00006272 <__udivmodhi4>:
    6272:	aa 1b       	sub	r26, r26
    6274:	bb 1b       	sub	r27, r27
    6276:	51 e1       	ldi	r21, 0x11	; 17
    6278:	07 c0       	rjmp	.+14     	; 0x6288 <__udivmodhi4_ep>

0000627a <__udivmodhi4_loop>:
    627a:	aa 1f       	adc	r26, r26
    627c:	bb 1f       	adc	r27, r27
    627e:	a6 17       	cp	r26, r22
    6280:	b7 07       	cpc	r27, r23
    6282:	10 f0       	brcs	.+4      	; 0x6288 <__udivmodhi4_ep>
    6284:	a6 1b       	sub	r26, r22
    6286:	b7 0b       	sbc	r27, r23

00006288 <__udivmodhi4_ep>:
    6288:	88 1f       	adc	r24, r24
    628a:	99 1f       	adc	r25, r25
    628c:	5a 95       	dec	r21
    628e:	a9 f7       	brne	.-22     	; 0x627a <__udivmodhi4_loop>
    6290:	80 95       	com	r24
    6292:	90 95       	com	r25
    6294:	bc 01       	movw	r22, r24
    6296:	cd 01       	movw	r24, r26
    6298:	08 95       	ret

0000629a <__divmodhi4>:
    629a:	97 fb       	bst	r25, 7
    629c:	09 2e       	mov	r0, r25
    629e:	07 26       	eor	r0, r23
    62a0:	0a d0       	rcall	.+20     	; 0x62b6 <__divmodhi4_neg1>
    62a2:	77 fd       	sbrc	r23, 7
    62a4:	04 d0       	rcall	.+8      	; 0x62ae <__divmodhi4_neg2>
    62a6:	e5 df       	rcall	.-54     	; 0x6272 <__udivmodhi4>
    62a8:	06 d0       	rcall	.+12     	; 0x62b6 <__divmodhi4_neg1>
    62aa:	00 20       	and	r0, r0
    62ac:	1a f4       	brpl	.+6      	; 0x62b4 <__divmodhi4_exit>

000062ae <__divmodhi4_neg2>:
    62ae:	70 95       	com	r23
    62b0:	61 95       	neg	r22
    62b2:	7f 4f       	sbci	r23, 0xFF	; 255

000062b4 <__divmodhi4_exit>:
    62b4:	08 95       	ret

000062b6 <__divmodhi4_neg1>:
    62b6:	f6 f7       	brtc	.-4      	; 0x62b4 <__divmodhi4_exit>
    62b8:	90 95       	com	r25
    62ba:	81 95       	neg	r24
    62bc:	9f 4f       	sbci	r25, 0xFF	; 255
    62be:	08 95       	ret

000062c0 <__udivmodsi4>:
    62c0:	a1 e2       	ldi	r26, 0x21	; 33
    62c2:	1a 2e       	mov	r1, r26
    62c4:	aa 1b       	sub	r26, r26
    62c6:	bb 1b       	sub	r27, r27
    62c8:	fd 01       	movw	r30, r26
    62ca:	0d c0       	rjmp	.+26     	; 0x62e6 <__udivmodsi4_ep>

000062cc <__udivmodsi4_loop>:
    62cc:	aa 1f       	adc	r26, r26
    62ce:	bb 1f       	adc	r27, r27
    62d0:	ee 1f       	adc	r30, r30
    62d2:	ff 1f       	adc	r31, r31
    62d4:	a2 17       	cp	r26, r18
    62d6:	b3 07       	cpc	r27, r19
    62d8:	e4 07       	cpc	r30, r20
    62da:	f5 07       	cpc	r31, r21
    62dc:	20 f0       	brcs	.+8      	; 0x62e6 <__udivmodsi4_ep>
    62de:	a2 1b       	sub	r26, r18
    62e0:	b3 0b       	sbc	r27, r19
    62e2:	e4 0b       	sbc	r30, r20
    62e4:	f5 0b       	sbc	r31, r21

000062e6 <__udivmodsi4_ep>:
    62e6:	66 1f       	adc	r22, r22
    62e8:	77 1f       	adc	r23, r23
    62ea:	88 1f       	adc	r24, r24
    62ec:	99 1f       	adc	r25, r25
    62ee:	1a 94       	dec	r1
    62f0:	69 f7       	brne	.-38     	; 0x62cc <__udivmodsi4_loop>
    62f2:	60 95       	com	r22
    62f4:	70 95       	com	r23
    62f6:	80 95       	com	r24
    62f8:	90 95       	com	r25
    62fa:	9b 01       	movw	r18, r22
    62fc:	ac 01       	movw	r20, r24
    62fe:	bd 01       	movw	r22, r26
    6300:	cf 01       	movw	r24, r30
    6302:	08 95       	ret

00006304 <do_rand>:
    6304:	a0 e0       	ldi	r26, 0x00	; 0
    6306:	b0 e0       	ldi	r27, 0x00	; 0
    6308:	e8 e8       	ldi	r30, 0x88	; 136
    630a:	f1 e3       	ldi	r31, 0x31	; 49
    630c:	0c 94 25 32 	jmp	0x644a	; 0x644a <__prologue_saves__+0x10>
    6310:	ec 01       	movw	r28, r24
    6312:	a8 80       	ld	r10, Y
    6314:	b9 80       	ldd	r11, Y+1	; 0x01
    6316:	ca 80       	ldd	r12, Y+2	; 0x02
    6318:	db 80       	ldd	r13, Y+3	; 0x03
    631a:	a1 14       	cp	r10, r1
    631c:	b1 04       	cpc	r11, r1
    631e:	c1 04       	cpc	r12, r1
    6320:	d1 04       	cpc	r13, r1
    6322:	41 f4       	brne	.+16     	; 0x6334 <do_rand+0x30>
    6324:	84 e2       	ldi	r24, 0x24	; 36
    6326:	a8 2e       	mov	r10, r24
    6328:	89 ed       	ldi	r24, 0xD9	; 217
    632a:	b8 2e       	mov	r11, r24
    632c:	8b e5       	ldi	r24, 0x5B	; 91
    632e:	c8 2e       	mov	r12, r24
    6330:	87 e0       	ldi	r24, 0x07	; 7
    6332:	d8 2e       	mov	r13, r24
    6334:	c6 01       	movw	r24, r12
    6336:	b5 01       	movw	r22, r10
    6338:	2d e1       	ldi	r18, 0x1D	; 29
    633a:	33 ef       	ldi	r19, 0xF3	; 243
    633c:	41 e0       	ldi	r20, 0x01	; 1
    633e:	50 e0       	ldi	r21, 0x00	; 0
    6340:	0e 94 02 32 	call	0x6404	; 0x6404 <__divmodsi4>
    6344:	27 ea       	ldi	r18, 0xA7	; 167
    6346:	31 e4       	ldi	r19, 0x41	; 65
    6348:	40 e0       	ldi	r20, 0x00	; 0
    634a:	50 e0       	ldi	r21, 0x00	; 0
    634c:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <__mulsi3>
    6350:	7b 01       	movw	r14, r22
    6352:	8c 01       	movw	r16, r24
    6354:	c6 01       	movw	r24, r12
    6356:	b5 01       	movw	r22, r10
    6358:	2d e1       	ldi	r18, 0x1D	; 29
    635a:	33 ef       	ldi	r19, 0xF3	; 243
    635c:	41 e0       	ldi	r20, 0x01	; 1
    635e:	50 e0       	ldi	r21, 0x00	; 0
    6360:	0e 94 02 32 	call	0x6404	; 0x6404 <__divmodsi4>
    6364:	ca 01       	movw	r24, r20
    6366:	b9 01       	movw	r22, r18
    6368:	2c ee       	ldi	r18, 0xEC	; 236
    636a:	34 ef       	ldi	r19, 0xF4	; 244
    636c:	4f ef       	ldi	r20, 0xFF	; 255
    636e:	5f ef       	ldi	r21, 0xFF	; 255
    6370:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <__mulsi3>
    6374:	6e 0d       	add	r22, r14
    6376:	7f 1d       	adc	r23, r15
    6378:	80 1f       	adc	r24, r16
    637a:	91 1f       	adc	r25, r17
    637c:	97 ff       	sbrs	r25, 7
    637e:	04 c0       	rjmp	.+8      	; 0x6388 <do_rand+0x84>
    6380:	61 50       	subi	r22, 0x01	; 1
    6382:	70 40       	sbci	r23, 0x00	; 0
    6384:	80 40       	sbci	r24, 0x00	; 0
    6386:	90 48       	sbci	r25, 0x80	; 128
    6388:	68 83       	st	Y, r22
    638a:	79 83       	std	Y+1, r23	; 0x01
    638c:	8a 83       	std	Y+2, r24	; 0x02
    638e:	9b 83       	std	Y+3, r25	; 0x03
    6390:	9b 01       	movw	r18, r22
    6392:	3f 77       	andi	r19, 0x7F	; 127
    6394:	c9 01       	movw	r24, r18
    6396:	cd b7       	in	r28, 0x3d	; 61
    6398:	de b7       	in	r29, 0x3e	; 62
    639a:	ea e0       	ldi	r30, 0x0A	; 10
    639c:	0c 94 41 32 	jmp	0x6482	; 0x6482 <__epilogue_restores__+0x10>

000063a0 <rand_r>:
    63a0:	0e 94 82 31 	call	0x6304	; 0x6304 <do_rand>
    63a4:	08 95       	ret

000063a6 <rand>:
    63a6:	80 e0       	ldi	r24, 0x00	; 0
    63a8:	91 e0       	ldi	r25, 0x01	; 1
    63aa:	0e 94 82 31 	call	0x6304	; 0x6304 <do_rand>
    63ae:	08 95       	ret

000063b0 <srand>:
    63b0:	a0 e0       	ldi	r26, 0x00	; 0
    63b2:	b0 e0       	ldi	r27, 0x00	; 0
    63b4:	80 93 00 01 	sts	0x0100, r24
    63b8:	90 93 01 01 	sts	0x0101, r25
    63bc:	a0 93 02 01 	sts	0x0102, r26
    63c0:	b0 93 03 01 	sts	0x0103, r27
    63c4:	08 95       	ret

000063c6 <__mulsi3>:
    63c6:	62 9f       	mul	r22, r18
    63c8:	d0 01       	movw	r26, r0
    63ca:	73 9f       	mul	r23, r19
    63cc:	f0 01       	movw	r30, r0
    63ce:	82 9f       	mul	r24, r18
    63d0:	e0 0d       	add	r30, r0
    63d2:	f1 1d       	adc	r31, r1
    63d4:	64 9f       	mul	r22, r20
    63d6:	e0 0d       	add	r30, r0
    63d8:	f1 1d       	adc	r31, r1
    63da:	92 9f       	mul	r25, r18
    63dc:	f0 0d       	add	r31, r0
    63de:	83 9f       	mul	r24, r19
    63e0:	f0 0d       	add	r31, r0
    63e2:	74 9f       	mul	r23, r20
    63e4:	f0 0d       	add	r31, r0
    63e6:	65 9f       	mul	r22, r21
    63e8:	f0 0d       	add	r31, r0
    63ea:	99 27       	eor	r25, r25
    63ec:	72 9f       	mul	r23, r18
    63ee:	b0 0d       	add	r27, r0
    63f0:	e1 1d       	adc	r30, r1
    63f2:	f9 1f       	adc	r31, r25
    63f4:	63 9f       	mul	r22, r19
    63f6:	b0 0d       	add	r27, r0
    63f8:	e1 1d       	adc	r30, r1
    63fa:	f9 1f       	adc	r31, r25
    63fc:	bd 01       	movw	r22, r26
    63fe:	cf 01       	movw	r24, r30
    6400:	11 24       	eor	r1, r1
    6402:	08 95       	ret

00006404 <__divmodsi4>:
    6404:	97 fb       	bst	r25, 7
    6406:	09 2e       	mov	r0, r25
    6408:	05 26       	eor	r0, r21
    640a:	0e d0       	rcall	.+28     	; 0x6428 <__divmodsi4_neg1>
    640c:	57 fd       	sbrc	r21, 7
    640e:	04 d0       	rcall	.+8      	; 0x6418 <__divmodsi4_neg2>
    6410:	57 df       	rcall	.-338    	; 0x62c0 <__udivmodsi4>
    6412:	0a d0       	rcall	.+20     	; 0x6428 <__divmodsi4_neg1>
    6414:	00 1c       	adc	r0, r0
    6416:	38 f4       	brcc	.+14     	; 0x6426 <__divmodsi4_exit>

00006418 <__divmodsi4_neg2>:
    6418:	50 95       	com	r21
    641a:	40 95       	com	r20
    641c:	30 95       	com	r19
    641e:	21 95       	neg	r18
    6420:	3f 4f       	sbci	r19, 0xFF	; 255
    6422:	4f 4f       	sbci	r20, 0xFF	; 255
    6424:	5f 4f       	sbci	r21, 0xFF	; 255

00006426 <__divmodsi4_exit>:
    6426:	08 95       	ret

00006428 <__divmodsi4_neg1>:
    6428:	f6 f7       	brtc	.-4      	; 0x6426 <__divmodsi4_exit>
    642a:	90 95       	com	r25
    642c:	80 95       	com	r24
    642e:	70 95       	com	r23
    6430:	61 95       	neg	r22
    6432:	7f 4f       	sbci	r23, 0xFF	; 255
    6434:	8f 4f       	sbci	r24, 0xFF	; 255
    6436:	9f 4f       	sbci	r25, 0xFF	; 255
    6438:	08 95       	ret

0000643a <__prologue_saves__>:
    643a:	2f 92       	push	r2
    643c:	3f 92       	push	r3
    643e:	4f 92       	push	r4
    6440:	5f 92       	push	r5
    6442:	6f 92       	push	r6
    6444:	7f 92       	push	r7
    6446:	8f 92       	push	r8
    6448:	9f 92       	push	r9
    644a:	af 92       	push	r10
    644c:	bf 92       	push	r11
    644e:	cf 92       	push	r12
    6450:	df 92       	push	r13
    6452:	ef 92       	push	r14
    6454:	ff 92       	push	r15
    6456:	0f 93       	push	r16
    6458:	1f 93       	push	r17
    645a:	cf 93       	push	r28
    645c:	df 93       	push	r29
    645e:	cd b7       	in	r28, 0x3d	; 61
    6460:	de b7       	in	r29, 0x3e	; 62
    6462:	ca 1b       	sub	r28, r26
    6464:	db 0b       	sbc	r29, r27
    6466:	0f b6       	in	r0, 0x3f	; 63
    6468:	f8 94       	cli
    646a:	de bf       	out	0x3e, r29	; 62
    646c:	0f be       	out	0x3f, r0	; 63
    646e:	cd bf       	out	0x3d, r28	; 61
    6470:	09 94       	ijmp

00006472 <__epilogue_restores__>:
    6472:	2a 88       	ldd	r2, Y+18	; 0x12
    6474:	39 88       	ldd	r3, Y+17	; 0x11
    6476:	48 88       	ldd	r4, Y+16	; 0x10
    6478:	5f 84       	ldd	r5, Y+15	; 0x0f
    647a:	6e 84       	ldd	r6, Y+14	; 0x0e
    647c:	7d 84       	ldd	r7, Y+13	; 0x0d
    647e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6480:	9b 84       	ldd	r9, Y+11	; 0x0b
    6482:	aa 84       	ldd	r10, Y+10	; 0x0a
    6484:	b9 84       	ldd	r11, Y+9	; 0x09
    6486:	c8 84       	ldd	r12, Y+8	; 0x08
    6488:	df 80       	ldd	r13, Y+7	; 0x07
    648a:	ee 80       	ldd	r14, Y+6	; 0x06
    648c:	fd 80       	ldd	r15, Y+5	; 0x05
    648e:	0c 81       	ldd	r16, Y+4	; 0x04
    6490:	1b 81       	ldd	r17, Y+3	; 0x03
    6492:	aa 81       	ldd	r26, Y+2	; 0x02
    6494:	b9 81       	ldd	r27, Y+1	; 0x01
    6496:	ce 0f       	add	r28, r30
    6498:	d1 1d       	adc	r29, r1
    649a:	0f b6       	in	r0, 0x3f	; 63
    649c:	f8 94       	cli
    649e:	de bf       	out	0x3e, r29	; 62
    64a0:	0f be       	out	0x3f, r0	; 63
    64a2:	cd bf       	out	0x3d, r28	; 61
    64a4:	ed 01       	movw	r28, r26
    64a6:	08 95       	ret

000064a8 <_exit>:
    64a8:	f8 94       	cli

000064aa <__stop_program>:
    64aa:	ff cf       	rjmp	.-2      	; 0x64aa <__stop_program>
